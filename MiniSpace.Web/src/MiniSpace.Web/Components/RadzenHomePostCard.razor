@using MiniSpace.Web.DTO
@using Radzen
@using MudBlazor
@using System.Globalization
@using AlignItems = Radzen.AlignItems
@using Orientation = Radzen.Orientation
@using MiniSpace.Web.Areas.Events
@using MiniSpace.Web.Areas.MediaFiles
@using MiniSpace.Web.Areas.Posts
@using MiniSpace.Web.Pages.Events
@using MiniSpace.Web.Pages.MediaFiles.Dialogs
@using DialogOptions = Radzen.DialogOptions
@using DialogService = Radzen.DialogService
@inject DialogService DialogService
@inject IPostsService PostsService
@inject IEventsService EventsService
@inject IMediaFilesService MediaFilesService
@inject NavigationManager NavigationManager

@if (pageInitialized)
{
    <RadzenCard Style="max-width: 1080px; border-radius: 15px; overflow: hidden; box-shadow: 0 6px 10px rgba(0, 0, 0, 0.1); cursor: pointer">
        <RadzenRow Gap="0.5rem" @onclick="@(() => NavigationManager.NavigateTo($"/events/{Post.EventId}/posts/{Post.Id}"))">
            <RadzenColumn Size="12" class="rz-text-truncate">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
                    @if (Post.UpdatedAt != null)
                    {
                        <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0 rz-px-2 rz-pt-2" Style="color: dodgerblue">
                            Updated at @(Post.UpdatedAt?.ToLocalTime().ToString("f", CultureInfo.CurrentUICulture))
                        </RadzenText>
                    }
                    else
                    {
                        <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0 rz-px-2 rz-pt-2" Style="color: dodgerblue">
                            Published at @(Post.CreatedAt.ToLocalTime().ToString("f", CultureInfo.CurrentUICulture))
                        </RadzenText>
                    }
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" Class="rz-p-4" @onclick="@(() => NavigationManager.NavigateTo($"/events/{Post.EventId}/posts/{Post.Id}"))">
            <RadzenStack Gap="0">
                <RadzenText TextStyle="TextStyle.Overline" Class="rz-display-flex rz-mt-2 rz-my-0">Event name</RadzenText>
                <RadzenText TextStyle="TextStyle.H4" Class="@($"rz-font-weight-bold rz-mb-4 rz-text-align-left event-name {GetFontSizeClass(Event.Name)}")">@Event.Name</RadzenText>
                <RadzenText TextStyle="TextStyle.Overline" Class="rz-display-flex rz-mt-2 rz-my-0">Organization</RadzenText>
                <RadzenText TextStyle="TextStyle.H6" Class="rz-font-weight-bold rz-text-align-left">@Event.Organizer.OrganizationName</RadzenText>
            </RadzenStack>
        </RadzenStack>
        <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;"/>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" @onclick="@(() => NavigationManager.NavigateTo($"/events/{Post.EventId}/posts/{Post.Id}"))">
            <RadzenStack Gap="1em">
                <RadzenStack></RadzenStack>
                <RadzenText TextStyle="TextStyle.Body1" TextAlign="TextAlign.Left" Class="rz-mb-0 rz-p-4">
                    <strong>@(Post.TextContent)</strong>
                </RadzenText>
            </RadzenStack>
        </RadzenStack>
        <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;"/>
        @if (images.Any())
        {
            <RadzenStack class="rz-py-5" Orientation="Orientation.Horizontal">
                <MudCarousel @bind-SelectedIndex="@activeIndex" Class="mud-width-full" Style="height: 70vh;" ShowArrows="@arrows"
                             ShowBullets="@bullets" EnableSwipeGesture="@enableSwipeGesture" AutoCycle="@autocycle" TData="object">
                    @foreach (var img in images)
                    {
                        <MudCarouselItem>
                            <div @onclick="@(() => OpenImageDialog(img))" style="height: 100%; background-image: url('data:image/webp;base64,@img'); background-size: cover; background-position: center;"></div>
                        </MudCarouselItem>
                    }
                </MudCarousel>
            </RadzenStack>
        }
    </RadzenCard>
}

<style>
    :root {
        --rz-card-padding: 10px;
        overflow: auto;
    }
    
    .rz-datalist-data {
      border-radius: 15px;
      overflow: auto;
    }
    
    .rz-g > div, .rz-datalist-data > li {
      padding: 0rem !important;
      border-radius: 15px;
      background-color: transparent;
      border-color: transparent;
    }
</style>

@code
{
    [Parameter] public PostDto Post { get; set; }
    
    private EventDto Event = null;
    private bool pageInitialized = false;
    private IEnumerable<string> images = new List<string>();
    
    private int activeIndex = 0;
    private bool arrows = true;
    private bool bullets = true;
    private bool enableSwipeGesture = true;
    private bool autocycle = true;
    private MudBlazor.Transition transition = MudBlazor.Transition.Slide;
    
    protected override async Task OnInitializedAsync()
    {
        Event = await EventsService.GetEventAsync(Post.EventId, false);
        var tasks = new List<Task<FileDto>>();
        foreach (var mediaFile in Post.MediaFiles)
        {
            tasks.Add(MediaFilesService.GetFileAsync(mediaFile));
        }
        pageInitialized = true;
        StateHasChanged();
        images = (await Task.WhenAll(tasks)).Select(f => f.Base64Content).ToList();
    }
    
    private string GetAuthorName(Guid authorId)
    {
        return authorId == Event.Organizer.Id ? Event.Organizer.Name : "Author unknown";
    }
    
    private string GetFontSizeClass(string eventName)
    {
        if (eventName.Length <= 50)
        {
            return "large-font";
        }
        else if (eventName.Length <= 100)
        {
            return "medium-font";
        }
        else
        {
            return "small-font";
        }
    }
    
    private async Task OpenImageDialog(string base64Image)
    {
        await DialogService.OpenAsync<ImageDialog>("",
            new Dictionary<string, object>() { { "Base64Image", base64Image } },
            new DialogOptions()
            {
                Width = "900px", Height = "650px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }
    
}