@using MiniSpace.Web.DTO
@using Radzen
@using System.Globalization
@using MiniSpace.Web.Areas.Events
@using MiniSpace.Web.Areas.Posts
@using MiniSpace.Web.Pages.Events
@inject IPostsService PostsService
@inject NavigationManager NavigationManager

<RadzenCard Class="rz-border-radius-3" Style="cursor: pointer; max-width: 1080px;"
            @onclick="@(() => NavigationManager.NavigateTo($"/events/{Event.Id}/posts/{Post.Id}"))">
    <RadzenRow Gap="0.5rem">
        <RadzenColumn Size="12" class="rz-text-truncate">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: darkred"
                            Text=@($"{GetAuthorName(Post.OrganizerId)}")/>
                @if (Post.UpdatedAt != null)
                {
                    <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: dodgerblue">
                        Updated at @(Post.UpdatedAt?.ToLocalTime().ToString("f", CultureInfo.CurrentUICulture))
                    </RadzenText>   
                }
                else
                {
                    <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: dodgerblue">
                        Published at @(Post.CreatedAt.ToLocalTime().ToString("f", CultureInfo.CurrentUICulture))
                    </RadzenText>   
                }
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;"/>
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
        <RadzenStack Gap="1em">
            <RadzenStack></RadzenStack>
            <RadzenText TextStyle="TextStyle.Body1" TextAlign="TextAlign.Left" Class="rz-mb-0">
                <strong>@(Post.TextContent)</strong>
            </RadzenText>
        </RadzenStack>
    </RadzenStack>
</RadzenCard>


@code
{
    [Parameter] public EventDto Event { get; set; }
    [Parameter] public PostDto Post { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        
    }
    
    private string GetAuthorName(Guid authorId)
    {
        return authorId == Event.Organizer.Id ? Event.Organizer.Name : "Author unknown";
    }
    
}