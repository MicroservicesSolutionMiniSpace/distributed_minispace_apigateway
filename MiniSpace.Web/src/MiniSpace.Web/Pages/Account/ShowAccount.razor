@page "/account"
@using MiniSpace.Web.Areas.Students
@using MiniSpace.Web.Components
@using MiniSpace.Web.DTO
@using System.IO
@using Radzen
@inject IIdentityService IdentityService
@inject IStudentsService StudentsService
@inject NavigationManager NavigationManager

<h1>Your account</h1>

@if (studentDto.Id != Guid.Empty)
{
    <RadzenStack Gap="1rem">
        <RadzenStack AlignItems="AlignItems.Center" Class="rz-mx-auto rz-my-10">
            <RadzenImage Path="@($"data:image/jpeg;base64,{@studentDto.ProfileImage}")"
                         AlternateText="base64 image"
                         Style="width: 20em" class="rz-border-radius-10"/>
        </RadzenStack>
        
        <RadzenLabelWithTextBoxes Id="fullname" LabelText="Fullname:" Value1="@studentDto.FirstName"
                                  Value2="@studentDto.LastName" Disabled="true"/>

        <RadzenLabelWithTextBox Id="email" LabelText="Email:"
                                Value="@studentDto.Email" Disabled="true"/>

        <RadzenLabelWithTextBox Id="description" LabelText="Description:"
                                @bind-Value="@studentDto.Description" Disabled=@editionDisabled/>

        <RadzenLabelWithTextBox Id="state" LabelText="State:"
                                Value="@studentDto.State" Disabled="true"/>

        <RadzenLabelWithNumeric Id="number-of-friends" LabelText="Number of friends:"
                                Value="@studentDto.NumberOfFriends" Disabled="true"/>

        <RadzenLabelWithDatePicker Id="date-of-birth" LabelText="Date of birth:"
                                   Value="@studentDto.DateOfBirth" Disabled="true"/>

        <RadzenLabelWithDatePicker Id="created-at" LabelText="Created at:"
                                   Value="@studentDto.CreatedAt" Disabled="true"/>

        <RadzenLabelWithCheckbox Id="email-notifications" LabelText="Email notifications:"
                                 @bind-Value="@studentDto.EmailNotifications" Disabled=@editionDisabled/>

        @if (studentDto.State == "incomplete")
        {
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn Size="12" SizeMD="12">
                    <RadzenButton Size="ButtonSize.Large" Text="Complete registration"
                                  Click="@(() => NavigationManager.NavigateTo("/signup/complete"))"/>
                </RadzenColumn>
            </RadzenRow>
        }
        else
        {
            if (editionDisabled)
            {
                <RadzenRow AlignItems="AlignItems.Center">
                    <RadzenColumn Size="12" SizeMD="12">
                        <RadzenButton Size="ButtonSize.Large" Text="Update account"
                                      Click=@EnableEdition/>
                    </RadzenColumn>
                </RadzenRow>
            }
            else
            {
                <RadzenRow AlignItems="AlignItems.Center">
                    <RadzenColumn Size="12" SizeMD="5">
                        <RadzenLabel Text="Update profile image:" Component="profile-image" />
                        <RadzenUpload Multiple="false" Change="@OnClientChange" class="w-100" Name="profile-image"
                                      InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "select file" } })"/>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="5">
                        <RadzenButton Size="ButtonSize.Large" Text="Save account"
                                      Click=@HandleUpdateStudent/>
                    </RadzenColumn>
                </RadzenRow>
            }
        }
    </RadzenStack>
}
else
{
    <p>Loading...</p>
}

@code {
    private StudentDto studentDto = new();
    private bool editionDisabled = true;
    
    protected override async Task OnInitializedAsync()
    {
        if (IdentityService.IsAuthenticated)
        {
            await StudentsService.UpdateStudentDto(IdentityService.UserDto.Id);
            studentDto = StudentsService.StudentDto;
        }
    }

    void EnableEdition()
    {
        editionDisabled = false;
        StateHasChanged();
    }

    private async Task HandleUpdateStudent()
    {
        editionDisabled = true;
        await StudentsService.UpdateStudentAsync(studentDto.Id, studentDto.ProfileImage,
            studentDto.Description, studentDto.EmailNotifications);
        StateHasChanged();
    }
    
    async void OnClientChange(UploadChangeEventArgs args)
    {
        Console.WriteLine("Client-side upload changed");

        foreach (var file in args.Files)
        {
            Console.WriteLine($"File: {file.Name} / {file.Size} bytes");

            try
            {
                long maxFileSize = 10 * 1024 * 1024;
                var stream = file.OpenReadStream(maxFileSize);
                byte[] bytes = await ReadFully(stream);
                studentDto.ProfileImage = Convert.ToBase64String(bytes);
                stream.Close();
            }
            catch (Exception ex)
            { 
                Console.WriteLine($"Client-side file read error: {ex.Message}");
            }
        }
    }
    
    private static async Task<byte[]> ReadFully(Stream input)
    {
        byte[] buffer = new byte[16*1024];
        using (MemoryStream ms = new MemoryStream())
        {
            int read;
            while ((read = await input.ReadAsync(buffer, 0, buffer.Length)) > 0)
            {
                ms.Write(buffer, 0, read);
            }
            return ms.ToArray();
        }
    }
}
