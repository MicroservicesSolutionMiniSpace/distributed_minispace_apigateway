@page "/signin"
@using MiniSpace.Web.Models.Identity
@using MiniSpace.Web.Areas.Identity
@using MiniSpace.Web.Areas.Students
@using Radzen
@using MiniSpace.Web.Areas.Http
@inject IIdentityService IdentityService
@inject IStudentsService StudentsService
@inject IErrorMapperService ErrorMapperService
@inject NavigationManager NavigationManager

 <div style="text-align: center; width: 100%; justify-content: center; align-items: center; padding-top: 10rem;">
        <h2>Welcome to MiniSpace</h2>
        <p>Please sign in to access your account and manage your details.</p>
        <div>&nbsp;</div>
        <h3>Sign In</h3>
    </div>
<div style="display: flex; flex-direction: column; justify-content: center; align-items: center;">
   

    <RadzenAlert AlertStyle="AlertStyle.Danger" @bind-Visible="showError" ShowIcon="false" Variant="Variant.Flat"
                Shade="Shade.Lighter">
        @errorMessage
    </RadzenAlert>

    <RadzenTemplateForm Data="@signInModel" Submit="@(async (SignInModel args) => { await HandleSignIn(); })">
        <RadzenFieldset>
            <RadzenStack Gap="1rem">
                <RadzenRow AlignItems="AlignItems.Center">
                    <RadzenColumn Size="12" SizeMD="3">
                        <RadzenLabel Text="Email:" Component="email" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="9">
                        <RadzenTextBox Style="width: 100%;" Name="email" @bind-Value="signInModel.Email" />
                        <RadzenRequiredValidator Component="email" Text="Email is required" Popup=@popup
                                                Style="position: absolute"/>
                        <RadzenEmailValidator Component="email" Text="Email is invalid" Popup=@popup
                                            Style="position: absolute"/>
                    </RadzenColumn>
                </RadzenRow>
                
                <RadzenRow AlignItems="AlignItems.Center">
                    <RadzenColumn Size="12" SizeMD="3">
                        <RadzenLabel Text="Password:" Component="password" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="9">
                        <RadzenPassword Style="width: 100%;" Name="password" @bind-Value="signInModel.Password"/>
                        <RadzenRequiredValidator Component="password" Text="Password is required" Popup=@popup
                                                Style="position: absolute"/>
                    </RadzenColumn>
                </RadzenRow>
                
                <RadzenRow AlignItems="AlignItems.Center">
                    <RadzenColumn Size="12" SizeMD="12">
                        <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Large" Text="Sign In"/>
                    </RadzenColumn>
                </RadzenRow>
                <div>
                    <a href="/forgot-password">Forgot Password?</a> | <a href="/signup">Create Account</a>
                </div>
            </RadzenStack>
        </RadzenFieldset>
    </RadzenTemplateForm>
     
</div>
@code {
    private SignInModel signInModel = new SignInModel();
    private bool showError = false;
    private string errorMessage = string.Empty;
    private bool popup;

    @* private async Task HandleSignIn()
    {
        var response = await IdentityService.SignInAsync(signInModel.Email, signInModel.Password);
        var jwtDto = response.Content;
        if (jwtDto != null && !string.IsNullOrEmpty(jwtDto.AccessToken))
        {
            await StudentsService.UpdateStudentDto(IdentityService.UserDto.Id);
            NavigationManager.NavigateTo(StudentsService.StudentDto.State == "incomplete" ? "/signup/complete" : "/account");
        }
        else
        {
            showError = true;
            errorMessage = ErrorMapperService.MapError(response.ErrorMessage);
            StateHasChanged(); // Force the component to re-render
        }
    } *@

    private async Task HandleSignIn()
{
    try
    {
        var response = await IdentityService.SignInAsync(signInModel.Email, signInModel.Password);
        if (response != null && response.Content != null && !string.IsNullOrEmpty(response.Content.AccessToken))
        {
            // Assuming UpdateStudentDto and other subsequent methods correctly handle null checks
            await StudentsService.UpdateStudentDto(IdentityService.UserDto.Id);
            var nextPage = StudentsService.StudentDto.State == "incomplete" ? "/signup/complete" : "/account";
            NavigationManager.NavigateTo(nextPage);
        }
        else
        {
            showError = true;
            errorMessage = "Invalid login attempt";
            StateHasChanged(); // Force the component to re-render
        }
    }
    catch (Exception ex)
    {
        // Log the exception or handle it accordingly
        showError = true;
        errorMessage = $"Error during sign in: {ex.Message}";
        StateHasChanged(); // Update UI to show error message
    }
}

}
