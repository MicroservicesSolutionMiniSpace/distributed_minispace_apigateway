@page "/admin/organizations/{OrganizationId}/details"
@using Radzen
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Areas.Organizations
@using MiniSpace.Web.Models.Organizations
@inject IOrganizationsService OrganizationsService
@inject NavigationManager NavigationManager
@inject Radzen.DialogService DialogService

<RadzenStack>
    <RadzenFieldset>
        <HeaderTemplate>
            <RadzenStack Gap="0" Orientation="Orientation.Horizontal">
                <RadzenIcon Icon="assignment" class="me-1"/>
                <b>Basic info</b>
            </RadzenStack>
        </HeaderTemplate>
        <ChildContent>
            <RadzenStack>
                <RadzenRow Size="12" AlignItems="AlignItems.Center">
                    <RadzenColumn Size="6">
                        <RadzenText TextStyle="TextStyle.Body2" class="rz-display-flex rz-my-0">Id</RadzenText>
                        <RadzenText TextStyle="TextStyle.H6"><b>@(OrganizationDetailsDto.Id)</b></RadzenText>
                    </RadzenColumn>
    
                    <RadzenColumn Size="6">
                        <RadzenText TextStyle="TextStyle.Body2" class="rz-display-flex rz-my-0">Name</RadzenText>
                        <RadzenText TextStyle="TextStyle.H6"><b>@(OrganizationDetailsDto.Name)</b></RadzenText>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenStack>
        </ChildContent>
    </RadzenFieldset>
    
    <RadzenFieldset>
        <HeaderTemplate>
            <RadzenStack Gap="0" Orientation="Orientation.Horizontal">
                <RadzenIcon Icon="assignment_ind" class="me-1"/>
                <b>Organizers</b>
            </RadzenStack>
        </HeaderTemplate>
        <ChildContent>
            <RadzenPickList @bind-Source="@notBelongingOrganizers" @bind-Target="@belongingOrganizers" Style="height: 300px; width: 100%;"
                            Orientation="@Orientation.Horizontal" AllowFiltering="true" Multiple="false" TextProperty="Label"
                            ShowHeader="true" ButtonGap="12px" ButtonJustifyContent="JustifyContent.Center"
                            ButtonStyle="@ButtonStyle.Secondary" ButtonSize="@ButtonSize.Medium" ButtonVariant="Variant.Outlined">
                <SourceHeader>
                    Organizers not belonging:
                </SourceHeader>
                <TargetHeader>
                    Organizers belonging:
                </TargetHeader>
                <Template>
                    @context.Label
                </Template>
            </RadzenPickList>
        </ChildContent>
    </RadzenFieldset>

    <RadzenStack Gap="1rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0.5rem">
            <RadzenButton Click="@HandleSubmitting" Variant="Variant.Flat" Text="Submit" Style="width: 120px"/>
            <RadzenButton Click="@(() => DialogService.Close(true))" Variant="Variant.Flat" Text="Close" Style="width: 120px"/>
        </RadzenStack>
    </RadzenStack>
</RadzenStack>

@code {
    [Parameter]
    public OrganizationModel Organization { get; set; }
    [Parameter]
    public IEnumerable<OrganizerModel> Organizers { get; set; }

    private OrganizationDetailsDto OrganizationDetailsDto { get; set; } = new();

    private IEnumerable<OrganizerModel> notBelongingOrganizers = [];
    private IEnumerable<OrganizerModel> belongingOrganizers = [];
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        OrganizationDetailsDto = await OrganizationsService.GetOrganizationDetailsAsync(Organization.Id,
            Organization.RootId);

        HashSet<Guid> belongingGuids = OrganizationDetailsDto.Organizers.ToHashSet();
        List<OrganizerModel> notBelongingTmp = new();
        List<OrganizerModel> belongingTmp = new();

        foreach (var organizer in Organizers)
        {
            organizer.Label = $"{organizer.Name} ({organizer.Email})";
            if (belongingGuids.Contains(organizer.Id))
            {
                organizer.WasBelonging = true;
                belongingTmp.Add(organizer);
            }
            else
            {
                organizer.WasBelonging = false;
                notBelongingTmp.Add(organizer);
            }
        }

        notBelongingOrganizers = notBelongingTmp;
        belongingOrganizers = belongingTmp;
    }

    private async void HandleSubmitting()
    {
        if (belongingOrganizers != null)
        {
            foreach (var organizer in belongingOrganizers)
            {
                if (!organizer.WasBelonging)
                {
                    await OrganizationsService.AddOrganizerToOrganizationAsync(Organization.RootId, Organization.Id, organizer.Id);
                }
            }   
        }

        if (notBelongingOrganizers != null)
        {
            foreach (var organizer in notBelongingOrganizers)
            {
                if (organizer.WasBelonging)
                {
                    await OrganizationsService.RemoveOrganizerFromOrganizationAsync(Organization.RootId, Organization.Id, organizer.Id);
                }
            }   
        }
        
        DialogService.Close(true);
    }
}
