@page "/admin/reports/search/dialog"
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Models.Reports
@using Radzen
@using Blazorise.DeepCloner
@inject Radzen.DialogService DialogService

<RadzenFieldset>
    <RadzenStack Gap="1rem">
        <RadzenRow Gap="1rem" JustifyContent="JustifyContent.Center">
            <RadzenColumn Size="12" SizeSM="5">
                <RadzenStack>
                    <RadzenFormField Text="Context Types" Variant="Variant.Outlined">
                        <RadzenCheckBoxList @bind-Value="@TempSearchReportsModel.ContextTypes" TValue="string"
                                            Orientation="@Orientation.Vertical" class="rz-mx-3 rz-my-3">
                            <Items>
                                <RadzenCheckBoxListItem Text="Event" Value="@("Event")"/>
                                <RadzenCheckBoxListItem Text="Post" Value="@("Post")"/>
                                <RadzenCheckBoxListItem Text="Comment" Value="@("Comment")"/>
                                <RadzenCheckBoxListItem Text="Student Profile" Value="@("StudentProfile")"/>
                            </Items>
                        </RadzenCheckBoxList>
                    </RadzenFormField>
                    <RadzenFormField Text="Results on page" Variant="Variant.Outlined">
                        <RadzenNumeric @bind-Value="@TempSearchReportsModel.Pageable.Size" />
                    </RadzenFormField>
                    <RadzenFormField Text="Sort direction" Variant="Variant.Outlined">
                        <RadzenDropDown Data=@directions @bind-Value="@TempSearchReportsModel.Pageable.Sort.Direction"
                                        TextProperty="Key" ValueProperty="Value" />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeSM="5">
                <RadzenStack>
                    <RadzenFormField Text="States" Variant="Variant.Outlined">
                        <RadzenCheckBoxList @bind-Value="@TempSearchReportsModel.States" TValue="string"
                                            Orientation="@Orientation.Vertical" class="rz-mx-3 rz-my-3">
                            <Items>
                                <RadzenCheckBoxListItem Text="Submitted" Value="@("Submitted")"/>
                                <RadzenCheckBoxListItem Text="Under Review" Value="@("UnderReview")"/>
                                <RadzenCheckBoxListItem Text="Resolved" Value="@("Resolved")"/>
                                <RadzenCheckBoxListItem Text="Rejected" Value="@("Rejected")"/>
                                <RadzenCheckBoxListItem Text="Cancelled" Value="@("Cancelled")"/>
                            </Items>
                        </RadzenCheckBoxList>
                    </RadzenFormField>
                    <RadzenFormField Text="Take care of reports" Variant="Variant.Outlined">
                        <Start>
                            <RadzenCheckBox @bind-Value="@TempSearchReportsModel.OnlyReviewedByYou" Class="rz-my-5"
                                            Name="onlyReviewedByYou"/>
                        </Start>
                        <ChildContent>
                            <RadzenLabel Text="Show only reports under your review"
                                         Component="onlyReviewedByYou" Class="rz-mx-5" />
                        </ChildContent>
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        
        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn Size="12" SizeMD="12">
                <RadzenPickList @bind-Source="@notSelectedSortParams" @bind-Target="@selectedSortParams" Style="height: 180px; width: 100%;"
                                Orientation="@Orientation.Horizontal" TextProperty="Key" AllowFiltering="false" Multiple="false"
                                ShowHeader="true" ButtonGap="12px" ButtonJustifyContent="JustifyContent.Center"
                                ButtonStyle="@ButtonStyle.Secondary" ButtonSize="@ButtonSize.Medium" ButtonVariant="Variant.Outlined">
                    <SourceHeader>
                        <h4>Not selected parameters:</h4>
                    </SourceHeader>
                    <TargetHeader>
                        <h4>Sorting parameters (order important):</h4>
                    </TargetHeader>
                    <Template>
                        @context.Key
                    </Template>
                </RadzenPickList>
            </RadzenColumn>
        </RadzenRow>
        
        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn Size="12" SizeMD="12">
                
            </RadzenColumn>
        </RadzenRow>
    </RadzenStack>
    
    <RadzenStack Gap="1rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0.5rem">
            <RadzenButton Click="@HandleFiltering" Variant="Variant.Flat" Text="Submit" Style="width: 120px"/>
            <RadzenButton Click="@(() => DialogService.Close(true))" Variant="Variant.Flat" Text="Close" Style="width: 120px"/>
        </RadzenStack>
    </RadzenStack>
</RadzenFieldset>

@code {
    [Parameter]
    public SearchReportsModel SearchReportsModel { get; set; }

    private SearchReportsModel TempSearchReportsModel { get; set; }
    
    
    private List<KeyValuePair<string, string>> directions =
    [
        new KeyValuePair<string, string>("Descending", "des"),
        new KeyValuePair<string, string>("Ascending", "asc")
    ];

    private List<KeyValuePair<string, string>> initialSortParams =
    [
        new KeyValuePair<string, string>("Context type", "contextType"),
        new KeyValuePair<string, string>("Category", "category"),
        new KeyValuePair<string, string>("Reason", "reason"),
        new KeyValuePair<string, string>("State", "state"),
        new KeyValuePair<string, string>("Updated at", "updatedAt"),
        new KeyValuePair<string, string>("Created at", "createdAt")
    ];
    
    private IEnumerable<KeyValuePair<string, string>> notSelectedSortParams = [];
    private IEnumerable<KeyValuePair<string, string>> selectedSortParams = [];
    
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        TempSearchReportsModel = SearchReportsModel.DeepClone();
        
        List<KeyValuePair<string, string>> selectedTmp = new();
        
        foreach (var value in TempSearchReportsModel.Pageable.Sort.SortBy)
        {
            var element = initialSortParams.FirstOrDefault(sortParam => sortParam.Value == value);
            initialSortParams.Remove(element);
            selectedTmp.Add(element);
        }

        notSelectedSortParams = initialSortParams;
        selectedSortParams = selectedTmp;
    }
    
    private void HandleFiltering()
    {
        SearchReportsModel.ContextTypes = TempSearchReportsModel.ContextTypes;
        SearchReportsModel.States = TempSearchReportsModel.States;
        SearchReportsModel.OnlyReviewedByYou = TempSearchReportsModel.OnlyReviewedByYou;
        SearchReportsModel.Pageable = TempSearchReportsModel.Pageable.DeepClone();
        SearchReportsModel.Pageable.Sort.SortBy = selectedSortParams != null
            ? selectedSortParams.Select(sortParam => sortParam.Value) : [];
        
        DialogService.Close(true);
    }
}