@page "/admin/organizations"
@using MiniSpace.Web.Areas.Students
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Areas.Organizations
@using MiniSpace.Web.Pages.Admin.Dialogs
@using Radzen
@using DialogOptions = Radzen.DialogOptions
@using DialogService = Radzen.DialogService
@inject DialogService DialogService
@inject IIdentityService IdentityService
@inject IOrganizationsService OrganizationsService
@inject NavigationManager NavigationManager

<h1>Manage organizations</h1>

@if (!pageInitialized)
{
    <h3 class="rz-p-12">Loading...</h3>
}
else
{
    <h4 class="rz-p-8">To manage organizers in an organization, select it and open details dialog.</h4>
    
    <RadzenStack Gap="1rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0.5rem">
            <RadzenButton Size="ButtonSize.Medium" Text="Add root organization"
                          Click="@(() => OpenAddOrganizationDialog((ParentOrganization)selectedItem, true))" />
            <RadzenButton Size="ButtonSize.Medium" Text="Add child organization" Disabled="@(selectedItem == null)"
                          Click="@(() => OpenAddOrganizationDialog((ParentOrganization)selectedItem, false))" />
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0.5rem">
            <RadzenButton Size="ButtonSize.Medium" Text="Clear selection" Disabled="@(selectedItem == null)"
                          Click="@(() => selectedItem = null)" />
            <RadzenButton Size="ButtonSize.Medium" Text="Show organization details" Disabled="@(selectedItem == null)"
                          Click="@(() => OpenOrganizationDetailsDialog(selectedItem as ParentOrganization))" />
           
        </RadzenStack>
    </RadzenStack>
    
    <RadzenStack class="rz-p-8" Gap="1rem" Style="height: 100%">
        @if (totalRootOrganizations == 0)
        {
            <h3>There are not any organizations created.</h3>
        }
        
        <RadzenTree Data="@rootOrganizations" Expand="@OnExpand" @bind-Value=@selectedItem>
            <RadzenTreeLevel TextProperty="Name" ChildrenProperty="Children" />
            <RadzenTreeLevel TextProperty="Name" ChildrenProperty="Children" />
            <RadzenTreeLevel TextProperty="Name" ChildrenProperty="Children" />
            <RadzenTreeLevel TextProperty="Name" ChildrenProperty="Children" />
            <RadzenTreeLevel TextProperty="Name" HasChildren=@(org => false)/>
        </RadzenTree>

    </RadzenStack>
}

@code {
    private bool pageInitialized = false;

    public class ParentOrganization
    {
        public Guid Id { get; set; }
        public string Name { get; set; }
        public Guid RootId { get; set; }
        public List<ParentOrganization> Children { get; set; }
    }
    
    private int totalRootOrganizations = 0;
    private List<ParentOrganization> rootOrganizations = new();
    
    protected override async Task OnInitializedAsync()
    {
        if (IdentityService.IsAuthenticated && IdentityService.GetCurrentUserRole() == "admin")
        {
            var tmpOrganizations = await OrganizationsService.GetRootOrganizationsAsync();
            ConvertOrganizationDtoList(tmpOrganizations, rootOrganizations, null);
            totalRootOrganizations = rootOrganizations.Count;
        }
        
        pageInitialized = true;
    }
    
    private async void OnExpand(TreeExpandEventArgs args)
    {
        var parent = (ParentOrganization)args.Value;
        var childOrganizations = await OrganizationsService.GetChildrenOrganizationsAsync(parent.Id, parent.RootId);
        ConvertOrganizationDtoList(childOrganizations, parent.Children, parent.RootId);
        StateHasChanged();
    }

    private static void ConvertOrganizationDtoList(IEnumerable<OrganizationDto> input, IList<ParentOrganization> result, Guid? rootId)
    {
        result.Clear();
        foreach (var organization in input)
        {
            result.Add(new ParentOrganization()
            {
                Id = organization.Id,
                Name = organization.Name,
                RootId = rootId ?? organization.Id,
                Children = new List<ParentOrganization>()
            });
        }
    }
    
    private object selectedItem;
    
    private async Task OpenAddOrganizationDialog(ParentOrganization parentOrganization, bool isRootOrganization)
    {
        await DialogService.OpenAsync<AddOrganizationDialog>("Add new organization:",
            new Dictionary<string, object>()
            {
                { "ParentOrganization", parentOrganization },
                { "IsRootOrganization", isRootOrganization }
            },
            new DialogOptions()
            {
                Width = "500px", Height = "230px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });

        if (isRootOrganization)
        {
            await OnInitializedAsync();
        }
        else if (selectedItem is ParentOrganization selectedOrg)
        {
            var childOrganizations = await OrganizationsService.GetChildrenOrganizationsAsync(selectedOrg.Id, selectedOrg.RootId);
            ConvertOrganizationDtoList(childOrganizations, selectedOrg.Children, selectedOrg.RootId);
            StateHasChanged();
        }
    }
    
    private async Task OpenOrganizationDetailsDialog(ParentOrganization parentOrganization)
    {
        await DialogService.OpenAsync<OrganizationDetailsDialog>("Details of the organization:",
            new Dictionary<string, object>() { { "ParentOrganization", parentOrganization } },
            new DialogOptions()
            {
                Width = "700px", Height = "600px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }
}
