@page "/admin/reports"
@using MiniSpace.Web.Areas.Reports
@using MiniSpace.Web.DTO
@using MiniSpace.Web.DTO.Wrappers
@using MiniSpace.Web.Models.Reports
@using MiniSpace.Web.Pages.Admin.Dialogs
@using MudBlazor
@using Radzen
@using Orientation = Radzen.Orientation
@using DialogOptions = Radzen.DialogOptions
@using DialogService = Radzen.DialogService
@inject DialogService DialogService
@inject IIdentityService IdentityService
@inject IReportsService ReportsService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h1>Manage reports</h1>

@if (!pageInitialized)
{
    <h3 class="rz-p-12">Loading...</h3>
}
@if (pageInitialized && adminId != Guid.Empty)
{
    <h4 class="rz-p-8">To see details and manage a report, open details dialog by clicking "Show" button.</h4>
    
    <div class="rz-p-4 rz-text-align-center">
        <RadzenButton Size="ButtonSize.Medium" Text="Filter by criteria" Click="@OpenSearchDialog"/>
    </div>
    
    <RadzenStack Gap="1rem" Style="height: 100%">
        @if (totalElements == 0)
        {
            <h3>There are not any reports created.</h3>
        }

        @if (pageInitialized && totalElements != 0)
        {
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
                <MudPagination Count="@totalPages" SelectedChanged="@SelectedPageChanged"
                               Selected="@searchReportsModel.Pageable.Page"
                               Rectangular="true" ShowFirstButton="true" ShowLastButton="true"/>
            </RadzenStack>
        }
        
        <RadzenDataGrid AllowColumnResize="true" AllowAlternatingRows="false" Data="@reports" ColumnWidth="300px"
                        PagerHorizontalAlign="HorizontalAlign.Center">
            <Columns>
                <RadzenDataGridColumn Property="ContextType" Title="Context Type" Frozen="true" Width="60px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn Property="Category" Title="Category" Frozen="true" Width="100px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn Property="State" Title="State" Frozen="true" Width="60px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn Context="report" Title="Details" Width="60px" TextAlign="TextAlign.Center"
                                      Filterable="false" Sortable="false" Frozen="true">
                    <Template Context="report">
                        <RadzenButton Size="ButtonSize.Medium" Text="Show"
                                      ButtonStyle="ButtonStyle.Secondary"
                                      Click="@(() => OpenManageReportDialog(report))" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="Reason" Title="Reason" Width="110px" TextAlign="TextAlign.Center" />
            </Columns>
        </RadzenDataGrid>

        @if (pageInitialized && totalElements != 0)
        {
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
                <MudPagination Count="@totalPages" SelectedChanged="@SelectedPageChanged"
                               Selected="@searchReportsModel.Pageable.Page"
                               Rectangular="true" ShowFirstButton="true" ShowLastButton="true"/>
            </RadzenStack>
        }
    </RadzenStack>
}

@code {
    private SearchReportsModel searchReportsModel = new()
    {
        ContextTypes = ["Event", "Post", "Comment", "StudentProfile"],
        States = ["Submitted", "UnderReview", "Resolved", "Rejected", "Cancelled"],
        Pageable = new PageableDto()
        {
            Page = 1,
            Size = 5,
            Sort = new SortDto()
            {
                SortBy = new List<string>() { "updatedAt", "createdAt" },
                Direction = "des"
            }
        }  
    };
    
    private Guid adminId;
    private bool pageInitialized = false;

    int totalPages = 0;
    int totalElements = 0;
    IEnumerable<ReportDto> reports; 
    
    protected override async Task OnInitializedAsync()
    {
        if (IdentityService.IsAuthenticated && IdentityService.GetCurrentUserRole() == "admin")
        {
            adminId = IdentityService.GetCurrentUserId();
            
            var searchReportsCriteria = await LocalStorage.GetItemAsync<SearchReportsModel>("searchReportsCriteria");
            if (searchReportsCriteria != null)
            {
                searchReportsModel = searchReportsCriteria;
            }
            
            var response = await ReportsService.SearchReportsAsync(searchReportsModel.ContextTypes,
                searchReportsModel.States, searchReportsModel.OnlyReviewedByYou ? adminId : Guid.Empty,
                searchReportsModel.Pageable);
            if (response.Content != null)
            {
                totalPages = response.Content.TotalPages;
                totalElements = response.Content.TotalElements;
                reports = response.Content.Content;
            }
            else
            {
                totalPages = 0;
                totalElements = 0;
                reports = new List<ReportDto>();
            }
            
            pageInitialized = true;
            
            var reportDto = await LocalStorage.GetItemAsync<ReportDto>("reportDto");
            if (reportDto != null)
            {
                await LocalStorage.RemoveItemAsync("reportDto");
                await OpenManageReportDialog(reportDto);
            }
        }
    }
    
    private async void SelectedPageChanged(int pageNumber)
    {
        searchReportsModel.Pageable.Page = pageNumber;
        
        var response = await ReportsService.SearchReportsAsync(searchReportsModel.ContextTypes,
            searchReportsModel.States, searchReportsModel.OnlyReviewedByYou ? adminId : Guid.Empty,
            searchReportsModel.Pageable);
        reports = response.Content.Content;
        StateHasChanged();
    }
    
    private async Task OpenSearchDialog()
    {
        await DialogService.OpenAsync<SearchReportsDialog>("Filter all reports by criteria:",
            new Dictionary<string, object>() { { "SearchReportsModel", searchReportsModel } },
            new DialogOptions()
            {
                Width = "800px", Height = "600px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
        await LocalStorage.SetItemAsync("searchReportsCriteria", searchReportsModel);
        await OnInitializedAsync();
    }
    
    private async Task OpenManageReportDialog(ReportDto reportDto)
    {
        await DialogService.OpenAsync<ManageReportDialog>("Manage the report:",
            new Dictionary<string, object>() { { "ReportDto", reportDto }, { "AdminId", adminId }},
            new DialogOptions()
            {
                Width = "700px", Height = "600px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }
}
