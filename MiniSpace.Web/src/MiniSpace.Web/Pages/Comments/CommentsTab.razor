@using Blazorise.DeepCloner
@using MiniSpace.Web.Areas.Comments
@using MiniSpace.Web.DTO
@using MiniSpace.Web.DTO.Wrappers
@using MiniSpace.Web.Models.Comments
@using MiniSpace.Web.Pages.Comments.Dialogs
@using MudBlazor
@using Radzen
@using AlignItems = Radzen.AlignItems
@using DialogOptions = Radzen.DialogOptions
@using DialogService = Radzen.DialogService
@using Orientation = Radzen.Orientation
@inject DialogService DialogService
@inject ICommentsService CommentsService

<RadzenStack Gap="1rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0.5rem">
        <RadzenButton Size="ButtonSize.Medium" Text="Create comment" ButtonStyle="ButtonStyle.Secondary"
                      Click="@(() => CreateRootComment())" />
        <RadzenButton Size="ButtonSize.Medium" Text="Sort by criteria"
                      Click="@OpenSearchCommentsDialog" />
    </RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="12">
            @if (pageInitialized && commentsEmpty)
            {
                <h3>No comments have been added by students yet.</h3>
            }
            <CommentsTree Comments="Comments" StudentId="StudentId"
                          UpdateComment="@UpdateComment"
                          DeleteComment="@DeleteComment"
                          CreateSubComment="@CreateSubComment"
                          LoadSubComments="@LoadSubComments" 
                          LoadMoreSubComments="@LoadMoreSubComments"
                          AddLike="@AddLike"
                          DeleteLike="@DeleteLike" />
            @if (moreCommentsAvailable)
            {
                <RadzenButton Size="ButtonSize.Medium" Text="Load more comments"
                              Click="@LoadMoreComments" />
            }
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code {
    [Parameter]
    public string EventId { get; set; }
    [Parameter]
    public Guid StudentId { get; set; }

    private Guid eventId;
    private Guid studentId;
    
    private HashSet<CommentDto> Comments;
    
    private SearchCommentsModel SearchCommentsModel = new()
    {
        CommentContext = "Event",
        Pageable = new PageableDto()
        {
            Page = 1,
            Size = 5,
            Sort = new SortDto()
            {
                SortBy = new List<string>() { "lastUpdatedAt" },
                Direction = "des"
            }
        }
    };
    
    private CreateCommentModel CreateCommentModel = new()
    {
        CommentContext = "Event"
    };

    private UpdateCommentModel UpdateCommentModel = new();
    
    private DeleteCommentModel DeleteCommentModel = new();
    
    private bool pageInitialized;
    private bool moreCommentsAvailable;
    private bool commentsEmpty = true;
    
    protected override async Task OnInitializedAsync()
    {
        eventId = new Guid(EventId);
        studentId = StudentId;
        
        SearchCommentsModel.ContextId = eventId;
        CreateCommentModel.ContextId = eventId;
        CreateCommentModel.StudentId = studentId;
        await SearchComments();
        
        pageInitialized = true;
    }
    
    private async Task OpenCreateCommentDialog(string title)
    {
        await DialogService.OpenAsync<CreateCommentDialog>(title,
            new Dictionary<string, object>()
            {
                { "EventId", EventId },
                { "CreateCommentModel", CreateCommentModel }
            },
            new DialogOptions()
            {
                Width = "800px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }

    private async Task OpenUpdateCommentDialog(string title)
    {
        await DialogService.OpenAsync<UpdateCommentDialog>(title,
            new Dictionary<string, object>()
            {
                { "EventId", EventId },
                { "UpdateCommentModel", UpdateCommentModel }
            },
            new DialogOptions()
            {
                Width = "800px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }
    
    private async Task OpenDeleteCommentDialog(string title)
    {
        await DialogService.OpenAsync<DeleteCommentDialog>(title,
            new Dictionary<string, object>()
            {
                { "EventId", eventId },
                { "DeleteCommentModel", DeleteCommentModel }
            },
            new DialogOptions()
            {
                Width = "500px", Height = "100px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }
    
    private async Task OpenSearchCommentsDialog()
    {
        await DialogService.OpenAsync<SearchCommentsDialog>("Sort your comments by criteria:",
            new Dictionary<string, object>()
            {
                { "EventId", EventId },
                { "SearchCommentsModel", SearchCommentsModel }
            },
            new DialogOptions()
            {
                Width = "800px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
        if (SearchCommentsModel.SearchingSubmitted)
        {
            SearchCommentsModel.SearchingSubmitted = false;
            await SearchComments();
        }
    }

    private async Task<HashSet<CommentDto>> HandleSearchingSubComments(SearchCommentsModel searchSubCommentsModel,
        CommentDto comment)
    {
        var subComments = new HashSet<CommentDto>();
        var response = await CommentsService.SearchSubCommentsAsync(searchSubCommentsModel.ContextId,
            searchSubCommentsModel.CommentContext, comment.Id, searchSubCommentsModel.Pageable);
        
        if (response.Content != null && !response.Content.Empty)
        {
            subComments = response.Content.Content.ToHashSet();
            var moreSubCommentsAvailable = response.Content.Number < response.Content.TotalPages;

            foreach (var subComment in subComments)
            {
                subComment.Parent = comment;
            }

            if (moreSubCommentsAvailable)
            {
                subComments.Last().IsLast = true;
            }
        }

        return subComments;
    }
    
    private async Task SearchComments()
    {
        Comments = [];
        SearchCommentsModel.Pageable.Page = 1;
        
        var response = await CommentsService.SearchRootCommentsAsync(SearchCommentsModel.ContextId,
            SearchCommentsModel.CommentContext, SearchCommentsModel.Pageable);
        if (response.Content != null)
        {
            Comments = response.Content.Content.ToHashSet();
            commentsEmpty = response.Content.Empty;
            moreCommentsAvailable = response.Content.Number < response.Content.TotalPages;
            
            if (moreCommentsAvailable)
            {
                Comments.Last().IsLast = true;
            }
        }
        else
        {
            commentsEmpty = true;
        }
        
        foreach (var comment in Comments)
        {
            if (comment.RepliesCount > 0)
            {
                comment.CanExpand = true;
            }
            
            var searchSubCommentsModel = SearchCommentsModel.DeepClone();
            searchSubCommentsModel.Pageable.Page = 1;
            comment.SubComments = await HandleSearchingSubComments(searchSubCommentsModel, comment);
        }
        
        StateHasChanged();
    }
    
    private async Task LoadMoreComments()
    {
        List<CommentDto> moreComments = [];
        ++SearchCommentsModel.Pageable.Page;
        
        var response = await CommentsService.SearchRootCommentsAsync(SearchCommentsModel.ContextId,
            SearchCommentsModel.CommentContext, SearchCommentsModel.Pageable);
        if (response.Content != null)
        {
            moreComments = response.Content.Content.ToList();
            moreCommentsAvailable = response.Content.Number < response.Content.TotalPages;
            Comments.Last().IsLast = false;
            
            if (moreCommentsAvailable)
            {
                moreComments.Last().IsLast = true;
            }
        }

        foreach (var comment in moreComments)
        {
            if (comment.RepliesCount > 0)
            {
                comment.CanExpand = true;
            }
            
            var searchSubCommentsModel = SearchCommentsModel.DeepClone();
            searchSubCommentsModel.Pageable.Page = 1;
            comment.SubComments = await HandleSearchingSubComments(searchSubCommentsModel, comment);
            
            Comments.Add(comment);
        }
        
        StateHasChanged();
    }

    private async Task CreateRootComment()
    {
        CreateCommentModel.ParentId = Guid.Empty;
        await OpenCreateCommentDialog("Create new comment:");
        if (CreateCommentModel.CreatingSubmitted)
        {
            CreateCommentModel.CreatingSubmitted = false;
            await SearchComments();
        }
    }

    private async Task UpdateComment(CommentDto comment)
    {
        UpdateCommentModel.CommentId = comment.Id;
        UpdateCommentModel.TextContent = comment.TextContent;
        await OpenUpdateCommentDialog("Update comment:");
        if (UpdateCommentModel.UpdatingSubmitted)
        {
            UpdateCommentModel.UpdatingSubmitted = false;
            await SearchComments();
        }
    }
    
    private async Task DeleteComment(CommentDto comment)
    {
        DeleteCommentModel.CommentId = comment.Id;
        await OpenDeleteCommentDialog("Are you sure? This action cannot be undone!");
        if (DeleteCommentModel.DeletingSubmitted)
        {
            DeleteCommentModel.DeletingSubmitted = false;
            await SearchComments();
        }
    }

    private async Task AddLike(CommentDto comment)
    {
        await CommentsService.AddLikeAsync(comment.Id);
        comment.Likes.Add(studentId);
        StateHasChanged();
    }
    
    private async Task DeleteLike(CommentDto comment)
    {
        await CommentsService.DeleteLikeAsync(comment.Id);
        comment.Likes.Remove(studentId);
        StateHasChanged();
    }
    
    private async Task CreateSubComment(CommentDto parentComment)
    {
        CreateCommentModel.ParentId = parentComment.Id;
        await OpenCreateCommentDialog("Reply for the comment:");
        if (CreateCommentModel.CreatingSubmitted)
        {
            CreateCommentModel.CreatingSubmitted = false;
            ++parentComment.RepliesCount;
        }
    }
    
    private async Task LoadSubComments(CommentDto parentComment)
    {
        var searchSubCommentsModel = SearchCommentsModel.DeepClone();
        searchSubCommentsModel.Pageable.Page = parentComment.SubCommentsPage = 1;
        parentComment.SubComments = await HandleSearchingSubComments(searchSubCommentsModel, parentComment);
    }
    
    private async Task LoadMoreSubComments(CommentDto lastComment)
    {
        var parentComment = lastComment.Parent;
        
        var searchSubCommentsModel = SearchCommentsModel.DeepClone();
        searchSubCommentsModel.Pageable.Page = ++parentComment.SubCommentsPage;
        var moreSubComments = await HandleSearchingSubComments(searchSubCommentsModel, parentComment);
        if (moreSubComments.Any())
        {
            parentComment.SubComments.Last().IsLast = false;
            foreach (var subComment in moreSubComments)
            {
                parentComment.SubComments.Add(subComment);
            }
        }
    }
}
