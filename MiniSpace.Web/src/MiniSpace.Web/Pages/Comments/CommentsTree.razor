@using MiniSpace.Web.DTO
@using MudBlazor
@using Radzen
@using MiniSpace.Web.Models.Reports
@using MiniSpace.Web.Pages.Reports.Dialogs
@using DialogOptions = Radzen.DialogOptions
@using DialogService = Radzen.DialogService
@inject DialogService DialogService
@inject IIdentityService IdentityService

<MudTreeView Items="@Comments" Hover="true" Width="100%">
    <ItemTemplate Context="comment">
        <MudTreeViewItem @ref="currentItem" Items="@comment.SubComments" Value="@comment" CanExpand="@comment.CanExpand"
                         ExpandedChanged="@(() => { LoadSubComments(comment); currentItem.ReloadAsync(); })">
            <BodyContent>
                <MudGrid Justify="Justify.FlexEnd">
                    @if (comment.ParentId == Guid.Empty)
                    {
                        <RadzenCard Class="rz-border-radius-3" Style="width: 100%">
                            <RadzenRow Gap="0.5rem">
                                <RadzenColumn Size="3">
                                    <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: darkred"
                                                Text=@(comment.StudentName)/>
                                    <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: dodgerblue">
                                        @(comment.LastUpdatedAt.ToLocalTime().ToString(dateFormat))
                                    </RadzenText>
                                    @if (comment.StudentId == StudentId && !comment.IsDeleted)
                                    {
                                        <MudStack Row="true" Justify="Justify.Center">
                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium"
                                                           Color="Color.Inherit"
                                                           OnClick="async () => { await UpdateCommentAsync(comment); }"/>
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Medium"
                                                           Color="Color.Inherit"
                                                           OnClick="async () => { await DeleteCommentAsync(comment); }"/>
                                        </MudStack>
                                    }
                                    else
                                    {
                                        <MudIconButton Icon="@Icons.Material.Filled.Report" Size="Size.Medium"
                                                       Color="Color.Inherit" Disabled=@(comment.IsDeleted || !IdentityService.IsAuthenticated)
                                                       OnClick="async () => { await ReportCommentAsync(comment); }"/>
                                    }
                                </RadzenColumn>
                                <RadzenColumn Size="6">
                                    @if (comment.IsDeleted)
                                    {
                                        <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0"
                                                    Text="(Comment Deleted)"/>
                                    }
                                    else
                                    {
                                        <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0"
                                                    Style="word-wrap: anywhere" Text=@(comment.TextContent)/>
                                    }
                                </RadzenColumn>
                                <RadzenColumn Size="3">
                                    <MudStack Row="true" Justify="Justify.Center">
                                        <MudText>@(comment.Likes.Count.ToString())</MudText>
                                        @if (!comment.Likes.Contains(StudentId))
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.ThumbUp" Size="Size.Medium"
                                                           Color="Color.Inherit" Disabled=@(!IdentityService.IsAuthenticated)
                                                           OnClick="async () => { await AddLikeAsync(comment); }"/>
                                        }
                                        else
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.ThumbUp" Size="Size.Medium"
                                                           Color="Color.Success" Disabled=@(!IdentityService.IsAuthenticated)
                                                           OnClick="async () => { await DeleteLikeAsync(comment); }"/>
                                        }
                                        <MudText>@(comment.RepliesCount)</MudText>
                                        <MudIconButton Icon="@Icons.Material.Filled.AddComment" Size="Size.Medium"
                                                       Color="Color.Inherit" Disabled=@(!IdentityService.IsAuthenticated)
                                                       OnClick="async () => { await CreateSubCommentAsync(comment); }"/>
                                    </MudStack>
                                    @if (comment.Likes.Contains((StudentId)))
                                    {
                                        <MudText>You Liked!</MudText>
                                    }
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenCard>
                    }
                    else
                    {
                        <RadzenCard Class="rz-border-radius-3" Style="width: 95%">
                            <RadzenRow Gap="0.5rem">
                                <RadzenColumn Size="3">
                                    <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: darkred"
                                                Text=@(comment.StudentName)/>
                                    <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: dodgerblue">
                                        @(comment.LastUpdatedAt.ToLocalTime().ToString(dateFormat))
                                    </RadzenText>
                                    @if (comment.StudentId == StudentId)
                                    {
                                        <MudStack Row="true" Justify="Justify.Center">
                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium"
                                                           Color="Color.Inherit"
                                                           OnClick="async () => { await UpdateCommentAsync(comment); }"/>
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Medium"
                                                           Color="Color.Inherit"
                                                           OnClick="async () => { await DeleteCommentAsync(comment); }"/>
                                        </MudStack>
                                    }
                                    else
                                    {
                                        <MudIconButton Icon="@Icons.Material.Filled.Report" Size="Size.Medium"
                                                       Color="Color.Inherit"
                                                       OnClick="async () => { await ReportCommentAsync(comment); }"/>
                                    }
                                </RadzenColumn>
                                <RadzenColumn Size="6">
                                    @if (comment.IsDeleted)
                                    {
                                        <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0"
                                                    Text="(Reply Deleted)"/>
                                    }
                                    else
                                    {
                                        <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0"
                                                    Style="word-wrap: anywhere" Text=@(comment.TextContent)/>
                                    }
                                </RadzenColumn>
                                <RadzenColumn Size="3">
                                    <MudStack Row="true" Justify="Justify.Center">
                                        <MudText>@(comment.Likes.Count.ToString())</MudText>
                                        @if (!comment.Likes.Contains(StudentId))
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.ThumbUp" Size="Size.Medium"
                                                           Color="Color.Inherit"
                                                           OnClick="async () => { await AddLikeAsync(comment); }"/>
                                        }
                                        else
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.ThumbUp" Size="Size.Medium"
                                                           Color="Color.Success"
                                                           OnClick="async () => { await DeleteLikeAsync(comment); }"/>
                                        }
                                    </MudStack>
                                    @if (comment.Likes.Contains((StudentId)))
                                    {
                                        <MudText>You Liked!</MudText>
                                    }
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenCard>
                        @if (comment.IsLast)
                        {
                            <RadzenButton Size="ButtonSize.Medium" Text="Load more replies"
                                          Click="@(() => LoadMoreSubCommentsAsync(comment))"/>
                        }
                    }
                </MudGrid>
            </BodyContent>
        </MudTreeViewItem>
    </ItemTemplate>
</MudTreeView>

@code
{
    [Parameter]
    public HashSet<CommentDto> Comments { get; set; }
    [Parameter]
    public Guid StudentId { get; set; }
    [Parameter]
    public Func<CommentDto, Task> UpdateComment { get; set; }
    [Parameter]
    public Func<CommentDto, Task> DeleteComment { get; set; }
    [Parameter]
    public Func<CommentDto, Task> CreateSubComment { get; set; }
    [Parameter]
    public Func<CommentDto, Task> LoadSubComments { get; set; }
    [Parameter]
    public Func<CommentDto, Task> LoadMoreSubComments { get; set; }
    [Parameter]
    public Func<CommentDto, Task> AddLike { get; set; }
    [Parameter]
    public Func<CommentDto, Task> DeleteLike { get; set; }
    
    private const string dateFormat = "dd/MM/yyyy HH:mm";
    
    MudTreeViewItem<CommentDto> currentItem;

    private async Task UpdateCommentAsync(CommentDto comment)
    {
        await UpdateComment(comment);
        await currentItem.ReloadAsync();
    }
    
    private async Task DeleteCommentAsync(CommentDto comment)
    {
        await DeleteComment(comment);
        await currentItem.ReloadAsync();
    }
    
    private async Task CreateSubCommentAsync(CommentDto comment)
    {
        await CreateSubComment(comment);
        await LoadSubComments(comment);
        await currentItem.ReloadAsync();
    }
    
    private async Task LoadMoreSubCommentsAsync(CommentDto lastSubComment)
    {
        await LoadMoreSubComments(lastSubComment);
        await currentItem.ReloadAsync();
    }

    private async Task AddLikeAsync(CommentDto comment)
    {
        await AddLike(comment);
        await currentItem.ReloadAsync();
    }
    
    private async Task DeleteLikeAsync(CommentDto comment)
    {
        await DeleteLike(comment);
        await currentItem.ReloadAsync();
    }
    
    private async Task OpenReportCommentDialog(CreateReportModel createReportModel)
    {
        await DialogService.OpenAsync<CreateReportDialog>("Report the comment:",
            new Dictionary<string, object>() { { "CreateReportModel", createReportModel } },
            new DialogOptions()
            {
                Width = "700px", Height = "350px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }
    
    private async Task ReportCommentAsync(CommentDto commentDto)
    {
        var createReportModel = new CreateReportModel
        {
            IssuerId = StudentId,
            TargetId = commentDto.Id,
            TargetOwnerId = commentDto.StudentId,
            ContextType = "Comment"
        };

        await OpenReportCommentDialog(createReportModel);
    }
}
