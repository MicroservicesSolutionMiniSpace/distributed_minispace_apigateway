@page "/events/create"
@using MiniSpace.Web.Areas.Identity
@using MiniSpace.Web.Areas.Events
@using MiniSpace.Web.Areas.Http
@using MiniSpace.Web.Areas.Organizations
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Models.Events
@using Radzen
@inject IIdentityService IdentityService
@inject IEventsService EventsService
@inject IOrganizationsService OrganizationsService
@inject IErrorMapperService ErrorMapperService
@inject NavigationManager NavigationManager

<h3>Create new event</h3>
<RadzenAlert AlertStyle="AlertStyle.Danger" @bind-Visible="showError" ShowIcon="false" Variant="Variant.Flat"
                Shade="Shade.Lighter">
        @errorMessage
</RadzenAlert>
<RadzenTemplateForm Data="@userDto" Submit="@(async (UserDto args) => { await HandleCreateEvent(); })">
    <RadzenFieldset>
        <RadzenStack Gap="1rem">
            <RadzenRow Gap="1rem" JustifyContent="JustifyContent.Center">
                <RadzenColumn Size="12" SizeSM="4">
                    <RadzenStack>
                        <RadzenFormField Text="Name" Variant="Variant.Outlined">
                            <RadzenTextBox @bind-Value="@addEventModel.Name" Name="name" />
                            <RadzenRequiredValidator Component="name" Style="position: relative"
                                                     Text="Name is required" />
                            <RadzenLengthValidator Component="name"  Max="300" Style="position: relative"
                                                   Text="Name should have at most 300 characters" />
                        </RadzenFormField>
                        <RadzenFormField Text="Start date" Variant="Variant.Outlined">
                            <RadzenDatePicker @bind-Value="@addEventModel.StartDate" Name="start-date"
                                              ShowTime="true" MinutesStep="5" DateFormat="dd/MM/yyyy HH:mm" />
                            <RadzenCustomValidator Component="start-date" Style="position: relative"
                                                   Validator="@(() => ValidateDate(addEventModel.StartDate))"
                                                   Text="Minute number has to be divisible by 5"/>
                        </RadzenFormField>
                        <RadzenFormField Text="Building name" Variant="Variant.Outlined">
                            <RadzenTextBox @bind-Value="@addEventModel.BuildingName" Name="building-name" />
                            <RadzenRequiredValidator Component="building-name" Style="position: relative"
                                                     Text="Building name is required" />
                        </RadzenFormField>
                        <RadzenFormField Text="Building number" Variant="Variant.Outlined">
                            <RadzenTextBox @bind-Value="@addEventModel.BuildingNumber" Name="building-number" />
                            <RadzenRequiredValidator Component="building-number" Style="position: relative"
                                                     Text="Building number is required"/>
                        </RadzenFormField>
                        <RadzenFormField Text="City" Variant="Variant.Outlined">
                            <RadzenTextBox @bind-Value="@addEventModel.City" Name="city" />
                            <RadzenRequiredValidator Component="city" Style="position: relative"
                                                     Text="City is required"/>
                        </RadzenFormField>
                        <RadzenFormField Text="Capacity" Variant="Variant.Outlined">
                            <RadzenNumeric @bind-Value="@addEventModel.Capacity" Name="capacity" />
                            <RadzenNumericRangeValidator Component="capacity" Min="1" Max="1000" Style="position: relative"
                                                         Text="Capacity should be between 1 and 1000" />
                        </RadzenFormField>
                        <RadzenFormField Text="Organization" Variant="Variant.Outlined">
                            <RadzenDropDown Data=@organizations @bind-Value="@addEventModel.OrganizationId"
                                            TextProperty="Name" ValueProperty="Id" />
                     </RadzenFormField>
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeSM="4">
                    <RadzenStack>
                         <RadzenFormField Text="Category" Variant="Variant.Outlined">
                             <RadzenDropDown Data=@categories @bind-Value="@addEventModel.Category" />
                         </RadzenFormField>
                         <RadzenFormField Text="End date" Variant="Variant.Outlined">
                             <RadzenDatePicker @bind-Value="@addEventModel.EndDate" Name="end-date"
                                               ShowTime="true" MinutesStep="5" DateFormat="dd/MM/yyyy HH:mm" />
                             <RadzenCustomValidator Component="end-date" Style="position: relative"
                                                    Validator="@(() => ValidateDate(addEventModel.EndDate))"
                                                    Text="Minute number has to be divisible by 5"/>
                         </RadzenFormField>
                        <RadzenFormField Text="Street" Variant="Variant.Outlined">
                            <RadzenTextBox @bind-Value="@addEventModel.Street" Name="street" />
                            <RadzenRequiredValidator Component="street" Style="position: relative"
                                                     Text="Street is required" />
                        </RadzenFormField>
                        <RadzenFormField Text="Apartment number" Variant="Variant.Outlined">
                            <RadzenTextBox @bind-Value="@addEventModel.ApartmentNumber" />
                        </RadzenFormField>
                        <RadzenFormField Text="Zip code" Variant="Variant.Outlined">
                            <RadzenTextBox @bind-Value="@addEventModel.ZipCode" Name="zip-code" />
                            <RadzenRequiredValidator Component="zip-code" Style="position: relative"
                                                     Text="Zip code is required" />
                        </RadzenFormField>
                        <RadzenFormField Text="Fee" Variant="Variant.Outlined">
                            <RadzenNumeric @bind-Value="@addEventModel.Fee" Placeholder="0.00" Step="0.01" Name="fee"/>
                            <RadzenNumericRangeValidator Component="fee" Min="0.0" Max="1000.0" Style="position: relative"
                                                         Text="Fee should be between 0.0 and 1000.0" />
                        </RadzenFormField>
                        <RadzenFormField Text="Publish Date" Variant="Variant.Outlined">
                            <RadzenStack Orientation="Orientation.Vertical">
                                <RadzenRadioButtonList @bind-Value="@publishInfo" TValue="int" class="rz-m-4 rz-mt-8">
                                    <Items>
                                        <RadzenRadioButtonListItem Text="Publish now" Value="1"/>
                                        <RadzenRadioButtonListItem Text="Publish in future" Value="2"/>
                                    </Items>
                                </RadzenRadioButtonList>
                                @if (publishInfo == 2)
                                {
                                    <RadzenDatePicker @bind-Value="@addEventModel.PublishDate" Name="publish-date"
                                                      ShowTime="true" MinutesStep="5" DateFormat="dd/MM/yyyy HH:mm" />
                                    <RadzenCustomValidator Component="publish-date" Style="position: relative"
                                                           Validator="@(() => ValidateDate(addEventModel.PublishDate))"
                                                           Text="Minute number has to be divisible by 5"/>
                                }
                            </RadzenStack>
                        </RadzenFormField>
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
            
            <RadzenRow Gap="1rem" JustifyContent="JustifyContent.Center">
                <RadzenColumn Size="12" SizeSM="8">
                    <RadzenStack>
                        <RadzenFormField Text="Description" Variant="Variant.Outlined">
                            <RadzenTextArea Style="height: 100px" @bind-Value="@addEventModel.Description" Name="description"/>
                            <RadzenRequiredValidator Component="description" Style="position: relative"
                                                     Text="Description is required" />
                            <RadzenLengthValidator Component="description"  Max="1000" Style="position: relative"
                                                   Text="Description should have at most 1000 characters" />
                        </RadzenFormField>
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
            
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn Size="12" SizeMD="12">
                    <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Text="Submit"/>
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>
    </RadzenFieldset>
</RadzenTemplateForm>

@code {
    private UserDto userDto = new();

    private AddEventModel addEventModel = new()
    {
        Name = "One of first events!",
        Category = "Art",
        StartDate = new DateTime(2024, 05, 09),
        EndDate = new DateTime(2024, 05, 11),
        BuildingName = "Gmach Główny",
        Street = "Plac Politechniki",
        BuildingNumber = "1",
        ApartmentNumber = "1",
        City = "Warszawa",
        ZipCode = "00-061",
        Description = "Great event!",
        Capacity = 30,
        Fee = 34.44M
    };
    private bool showError = false;
    private string errorMessage = string.Empty;
    private int publishInfo = 1;
    
    private List<string> categories =
    [
        "Music",
        "Sports",
        "Education",
        "Science",
        "Technology",
        "Art",
        "Business",
        "Health",
        "Charity",
        "Other"
    ];
    
    private IEnumerable<OrganizationDto> organizations;
    
    private static bool ValidateDate(DateTime dateTime)
    {
        return dateTime.Minute % 5 == 0;
    }
    
    protected override async Task OnInitializedAsync()
    {
        if (IdentityService.IsAuthenticated && IdentityService.GetCurrentUserRole() == "organizer")
        {
            userDto = IdentityService.UserDto;
            organizations = await OrganizationsService.GetOrganizerOrganizationsAsync(userDto.Id);
            
            addEventModel.OrganizerId = userDto.Id;
            addEventModel.OrganizationId = organizations.First().Id;
        }
    }
    
    private async Task HandleCreateEvent()
    {
        var response = await EventsService.AddEventAsync(Guid.Empty, addEventModel.Name,
            addEventModel.OrganizerId, addEventModel.OrganizationId,
            addEventModel.StartDate.ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
            addEventModel.EndDate.ToString("yyyy-MM-ddTHH:mm:ss.fffZ"), 
            addEventModel.BuildingName, addEventModel.Street,  addEventModel.BuildingNumber,
            addEventModel.ApartmentNumber, addEventModel.City, addEventModel.ZipCode,
            addEventModel.Description, addEventModel.Capacity, addEventModel.Fee, addEventModel.Category,
            publishInfo == 2 ? addEventModel.PublishDate.ToString("yyyy-MM-ddTHH:mm:ss.fffZ") : string.Empty);
        
        if (response.ErrorMessage != null)
        {
            showError = true;
            errorMessage = ErrorMapperService.MapError(response.ErrorMessage);
        }
        else
        {
            NavigationManager.NavigateTo("/events");
        }
    }
}
