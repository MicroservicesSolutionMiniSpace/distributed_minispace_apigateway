@page "/events/search/dialog"
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Models.Events
@using MiniSpace.Web.Models.Organizations
@using Radzen
@using Blazorise.DeepCloner
@using MiniSpace.Web.Areas.Organizations
@inject NavigationManager NavigationManager
@inject Radzen.DialogService DialogService
@inject IOrganizationsService OrganizationsService

<RadzenFieldset>
    <RadzenStack Gap="1rem">
        <RadzenRow Gap="1rem" JustifyContent="JustifyContent.Center">
            <RadzenColumn Size="12" SizeSM="4">
                <RadzenStack>
                    <RadzenFormField Text="Name" Variant="Variant.Outlined">
                        <RadzenTextBox @bind-Value="@TempSearchEventsModel.Name" />
                    </RadzenFormField>
                    <RadzenFormField Text="Category" Variant="Variant.Outlined">
                         <RadzenDropDown Data=@categories @bind-Value="@TempSearchEventsModel.Category" />
                     </RadzenFormField>
                    <RadzenFormField Text="Start date" Variant="Variant.Outlined">
                        <RadzenDatePicker @bind-Value="@TempSearchEventsModel.DateFrom" DateFormat="dd/MM/yyyy HH:mm" />
                    </RadzenFormField>
                    <RadzenFormField Text="Results on page" Variant="Variant.Outlined">
                        <RadzenNumeric @bind-Value="@TempSearchEventsModel.Pageable.Size" />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeSM="4">
                <RadzenStack>
                    <RadzenFormField Text="Organizer" Variant="Variant.Outlined">
                        <RadzenTextBox @bind-Value="@TempSearchEventsModel.Organizer" />
                    </RadzenFormField>
                    <RadzenFormField Text="State" Variant="Variant.Outlined">
                         <RadzenDropDown Data=@states @bind-Value="@TempSearchEventsModel.State" />
                     </RadzenFormField>
                    <RadzenFormField Text="End date" Variant="Variant.Outlined">
                        <RadzenDatePicker @bind-Value="@TempSearchEventsModel.DateTo" DateFormat="dd/MM/yyyy HH:mm" />
                    </RadzenFormField>
                    <RadzenFormField Text="Sort direction" Variant="Variant.Outlined">
                        <RadzenDropDown Data=@directions @bind-Value="@TempSearchEventsModel.Pageable.Sort.Direction"
                                        TextProperty="Key" ValueProperty="Value" />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        
        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn Size="12" SizeMD="12">
                <RadzenPickList @bind-Source="@notSelectedSortParams" @bind-Target="@selectedSortParams" Style="height: 180px; width: 100%;"
                                Orientation="@Orientation.Horizontal" TextProperty="Key" AllowFiltering="false" Multiple="false"
                                ShowHeader="true" ButtonGap="12px" ButtonJustifyContent="JustifyContent.Center"
                                ButtonStyle="@ButtonStyle.Secondary" ButtonSize="@ButtonSize.Medium" ButtonVariant="Variant.Outlined">
                    <SourceHeader>
                        <h4>Not selected parameters:</h4>
                    </SourceHeader>
                    <TargetHeader>
                        <h4>Sorting parameters (order important):</h4>
                    </TargetHeader>
                    <Template>
                        @context.Key
                    </Template>
                </RadzenPickList>
            </RadzenColumn>
        </RadzenRow>
        
        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn Size="12" SizeMD="12">
                @if (totalRootOrganizations == 0)
                {
                    <h3>There are not any organizations created.</h3>
                }

                <h4>Select an organization (also suborganizations are included in results):</h4>

                <RadzenTree Data="@rootOrganizations" Expand="@OnExpand" @bind-Value=@selectedItem>
                    <RadzenTreeLevel TextProperty="Name" ChildrenProperty="Children"/>
                    <RadzenTreeLevel TextProperty="Name" ChildrenProperty="Children"/>
                    <RadzenTreeLevel TextProperty="Name" ChildrenProperty="Children"/>
                    <RadzenTreeLevel TextProperty="Name" ChildrenProperty="Children"/>
                    <RadzenTreeLevel TextProperty="Name" HasChildren=@(org => false)/>
                </RadzenTree>
            </RadzenColumn>
        </RadzenRow>

        <RadzenStack Gap="1rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0.5rem">
                <RadzenButton Size="ButtonSize.Medium" Text="Clear organization selection" Disabled="@(selectedItem == null)"
                              Click="@(() => selectedItem = null)" />
            </RadzenStack>
        </RadzenStack>
        
        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn Size="12" SizeMD="12">
                
            </RadzenColumn>
        </RadzenRow>
    </RadzenStack>
    
    <RadzenStack Gap="1rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0.5rem">
            <RadzenButton Click="@HandleFiltering" Variant="Variant.Flat" Text="Submit" Style="width: 120px"/>
            <RadzenButton Click="@(() => DialogService.Close(true))" Variant="Variant.Flat" Text="Close" Style="width: 120px"/>
        </RadzenStack>
    </RadzenStack>
</RadzenFieldset>

@code {
    [Parameter]
    public SearchEventsModel SearchEventsModel { get; set; }

    private SearchEventsModel TempSearchEventsModel { get; set; }
    
    private List<string> categories =
    [
        "",
        "Music",
        "Sports",
        "Education",
        "Science",
        "Technology",
        "Art",
        "Business",
        "Health",
        "Charity",
        "Other"
    ];

    private List<string> states = 
    [
        "",
        "Published",
        "Archived"
    ];
    
    private List<KeyValuePair<string, string>> directions =
    [
        new KeyValuePair<string, string>("Descending", "des"),
        new KeyValuePair<string, string>("Ascending", "asc")
    ];

    private List<KeyValuePair<string, string>> initialSortParams =
    [
        new KeyValuePair<string, string>("Name", "name"),
        new KeyValuePair<string, string>("Capacity", "capacity"),
        new KeyValuePair<string, string>("Start date", "startDate"),
        new KeyValuePair<string, string>("End date", "endDate"),
    ];
    
    private IEnumerable<KeyValuePair<string, string>> notSelectedSortParams = [];
    private IEnumerable<KeyValuePair<string, string>> selectedSortParams = [];
    
    private int totalRootOrganizations = 0;
    private List<OrganizationModel> rootOrganizations = new();
    private object selectedItem;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        TempSearchEventsModel = SearchEventsModel.DeepClone();
        
        List<KeyValuePair<string, string>> selectedTmp = new();
        
        foreach (var value in TempSearchEventsModel.Pageable.Sort.SortBy)
        {
            var element = initialSortParams.FirstOrDefault(sortParam => sortParam.Value == value);
            initialSortParams.Remove(element);
            selectedTmp.Add(element);
        }

        notSelectedSortParams = initialSortParams;
        selectedSortParams = selectedTmp;
        
        var tmpOrganizations = await OrganizationsService.GetRootOrganizationsAsync();
        ConvertOrganizationDtoList(tmpOrganizations, rootOrganizations, null);
        totalRootOrganizations = rootOrganizations.Count;
    }

    private async void OnExpand(TreeExpandEventArgs args)
    {
        var parent = (OrganizationModel)args.Value;
        var childOrganizations = await OrganizationsService.GetChildrenOrganizationsAsync(parent.Id, parent.RootId);
        ConvertOrganizationDtoList(childOrganizations, parent.Children, parent.RootId);
        StateHasChanged();
    }
    
    private static void ConvertOrganizationDtoList(IEnumerable<OrganizationDto> input, IList<OrganizationModel> result, Guid? rootId)
    {
        result.Clear();
        foreach (var organization in input)
        {
            result.Add(new OrganizationModel()
            {
                Id = organization.Id,
                Name = organization.Name,
                RootId = rootId ?? organization.Id,
                Children = new List<OrganizationModel>()
            });
        }
    }
    
    private void HandleFiltering()
    {
        SearchEventsModel.Name = TempSearchEventsModel.Name;
        SearchEventsModel.Organizer = TempSearchEventsModel.Organizer;
        SearchEventsModel.Organization = selectedItem != null ? (OrganizationModel)selectedItem: new OrganizationModel();
        SearchEventsModel.Category = TempSearchEventsModel.Category;
        SearchEventsModel.State = TempSearchEventsModel.State;
        SearchEventsModel.DateFrom = TempSearchEventsModel.DateFrom;
        SearchEventsModel.DateTo = TempSearchEventsModel.DateTo;
        SearchEventsModel.Pageable = TempSearchEventsModel.Pageable.DeepClone();
        SearchEventsModel.Pageable.Sort.SortBy = selectedSortParams != null
            ? selectedSortParams.Select(sortParam => sortParam.Value) : [];
        
        DialogService.Close(true);
    }
}