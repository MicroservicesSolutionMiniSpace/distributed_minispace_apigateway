@using MiniSpace.Web.Areas.Identity
@using MiniSpace.Web.Areas.Friends
@using MiniSpace.Web.DTO
@using Radzen
@using System.Globalization
@using MiniSpace.Web.Areas.Events
@inject Radzen.DialogService DialogService
@inject IIdentityService IdentityService
@inject IEventsService EventsService
@inject NavigationManager NavigationManager

<RadzenFieldset>
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                    FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5"
                    AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true"
                    Data="@Students" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <RadzenDataGridColumn Property="Name" Title="Name" Frozen="true" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn Context="participant" Title="Options" TextAlign="TextAlign.Center"
                              Filterable="false" Sortable="false" Frozen="true">
            <Template Context="participant">
                <RadzenButton Size="ButtonSize.Medium" Text="Show"
                              ButtonStyle="ButtonStyle.Secondary"
                              Click="@(() => NavigationManager.NavigateTo($"/student-details/{participant.StudentId}"))" />
                <RadzenButton Size="ButtonSize.Medium" Text="Remove"
                              ButtonStyle="ButtonStyle.Warning"
                              Click="@(() => RemoveEventParticipant(participant))"/>
            </Template>
        </RadzenDataGridColumn>
    </RadzenDataGrid>
    
    <RadzenStack Gap="1rem" class="rz-pt-5" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0.5rem">
            <RadzenButton Click="@(() => Close())" Variant="Variant.Flat" Text="Close" Style="width: 120px"/>
        </RadzenStack>
    </RadzenStack>
</RadzenFieldset>
@code {
    [Parameter] public IEnumerable<ParticipantDto> Students { get; set; }
    [Parameter] public EventDto Event { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        StateHasChanged();
    }

    private void Close()
    {
        DialogService.Close();
    }
    
    private async void RemoveEventParticipant(ParticipantDto participant)
    {
        await EventsService.RemoveEventParticipantAsync(Event.Id, participant.StudentId);
    }
}