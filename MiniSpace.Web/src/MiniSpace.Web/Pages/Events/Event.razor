@page "/events/{EventId}"
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Areas.Comments
@using MiniSpace.Web.Areas.Events
@using MiniSpace.Web.Areas.Posts
@using MiniSpace.Web.Areas.Reactions
@using MiniSpace.Web.DTO
@using MiniSpace.Web.DTO.Enums
@using MiniSpace.Web.Pages.Comments
@using MiniSpace.Web.Pages.Events.Dialogs
@using Radzen
@using MudBlazor
@using AlignItems = Radzen.AlignItems
@using DialogOptions = Radzen.DialogOptions
@using DialogService = Radzen.DialogService
@using Orientation = Radzen.Orientation
@using System.Globalization
@using MiniSpace.Web.Areas.MediaFiles
@inject DialogService DialogService
@inject IIdentityService IdentityService
@inject IEventsService EventsService
@inject IPostsService PostsService
@inject IReactionsService ReactionsService
@inject ICommentsService CommentsService
@inject IMediaFilesService MediaFilesService
@inject NavigationManager NavigationManager

@if (!pageInitialized)
{
    <h3 class="rz-p-12">Loading...</h3>
}

@if (pageInitialized)
{
    
    <RadzenStack class="rz-pt-6" Gap="1rem" Style="height: 100%">
        <RadzenCard Style="max-width: 1080px; border-radius: 15px; overflow: hidden; box-shadow: 0 6px 10px rgba(0, 0, 0, 0.1); cursor: pointer">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
                <RadzenText TextStyle="TextStyle.Body1" Class="@($"rz-font-weight-bold rz-px-4 rz-pt-4 {GetStateColor()}")">@StateToText()</RadzenText>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" Class="rz-p-4">
                <RadzenStack Gap="0">
                    <RadzenText TextStyle="TextStyle.Overline" Class="rz-display-flex rz-mt-2 rz-my-0">Event name</RadzenText>
                    <RadzenText TextStyle="TextStyle.H4" Class="@($"rz-font-weight-bold rz-mb-4 rz-text-align-left event-name {GetFontSizeClass(ev.Name)}")">@ev.Name</RadzenText>
                    <RadzenRow Gap="0.5rem">
                        <RadzenColumn SizeSM="6">
                            <RadzenText TextStyle="TextStyle.Overline" Class="rz-display-flex rz-mt-2 rz-my-0">Organization</RadzenText>
                            <RadzenText TextStyle="TextStyle.H6" Class="rz-font-weight-bold rz-text-align-left">@ev.Organizer.OrganizationName</RadzenText>
                        </RadzenColumn>
                        <RadzenColumn SizeSM="6">
                            <RadzenText TextStyle="TextStyle.Overline" Class="rz-display-flex rz-mt-2 rz-my-0">Organizer</RadzenText>
                            <RadzenText TextStyle="TextStyle.H6" Class="rz-font-weight-bold rz-text-align-left">@ev.Organizer.Name</RadzenText>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </RadzenStack>
             <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" Class="rz-p-4">
                 <RadzenStack RowGap="0">
                     <RadzenText TextStyle="TextStyle.Overline" Class="rz-display-flex rz-mt-2 rz-my-0">Description</RadzenText>
                     <RadzenText TextStyle="TextStyle.Body1" Class="@($"rz-font-weight-bold rz-mb-4 rz-text-align-left")">@ev.Description</RadzenText>
                 </RadzenStack>
             </RadzenStack>
             @if (images.Any())
             {
                 <RadzenStack class="rz-pb-5">
                     <MudCarousel @bind-SelectedIndex="@activeIndex" Class="mud-width-full" Style="height: 50vh;" ShowArrows="@arrows"
                                  ShowBullets="@bullets" EnableSwipeGesture="@enableSwipeGesture" AutoCycle="@autocycle" TData="object">
                         @foreach (var img in images)
                         {
                             <MudCarouselItem>
                                <div style="height: 100%; background-image: url('data:image/webp;base64,@img'); background-size: cover; background-position: center;"></div>
                             </MudCarouselItem>
                         }
                     </MudCarousel>
                 </RadzenStack>
             }
             <RadzenCard Class="gradient-background rz-shadow-0 rz-border-radius-5 rz-p-8" Style="margin: 1rem calc(-1 * var(--rz-card-padding)); border-radius: 0;">
                 <RadzenRow RowGap="0">
                     <RadzenColumn SizeSM="6">
                         <RadzenText TextStyle="TextStyle.Overline" Class="rz-color-on-secondary-light rz-display-flex rz-mt-4 rz-mb-0">Start date</RadzenText>
                         <RadzenText TextStyle="TextStyle.Body1" Class="rz-color-on-secondary-light rz-font-weight-bold">@ev.StartDate.ToLocalTime().ToString("f", CultureInfo.CurrentUICulture)</RadzenText>
                         <RadzenText TextStyle="TextStyle.Overline" Class="rz-color-on-secondary-light rz-display-flex rz-mt-4 rz-mb-0">End date</RadzenText>
                         <RadzenText TextStyle="TextStyle.Body1" Class="rz-color-on-secondary-light rz-font-weight-bold">@ev.EndDate.ToLocalTime().ToString("f", CultureInfo.CurrentUICulture)</RadzenText>
                     </RadzenColumn>
                     <RadzenColumn SizeSM="6">
                         <RadzenText TextStyle="TextStyle.Overline" Class="rz-color-on-secondary-light rz-display-flex rz-mt-4 rz-mb-0">Location</RadzenText>
                         <RadzenText TextStyle="TextStyle.Body1" Class="rz-color-on-secondary-light rz-font-weight-bold">@ev.Location?.BuildingName</RadzenText>
                         <RadzenText TextStyle="TextStyle.Overline" Class="rz-color-on-secondary-light rz-display-flex rz-mt-4 rz-mb-0">Fee</RadzenText>
                         <RadzenText TextStyle="TextStyle.Body1" Class="rz-color-on-secondary-light rz-font-weight-bold">@String.Format(new System.Globalization.CultureInfo("pl-PL"), "{0:C}", ev?.Fee)</RadzenText>
                     </RadzenColumn>
                 </RadzenRow>
             </RadzenCard>
             <RadzenRow RowGap="0">
                 <RadzenColumn SizeSM="9">
                     <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="0.5rem" Class="rz-p-6 rz-border-top">
                         <RadzenIcon Icon="grade" Style="color: #30445f;"/>
                         <RadzenText TextStyle="TextStyle.H6" Class="rz-font-weight-bold rz-text-align-left rz-pr-8">@ev.InterestedStudents</RadzenText>
                         <RadzenIcon Icon="account_circle" Style="color: #30445f;" />
                         <RadzenText TextStyle="TextStyle.H6" Class="rz-font-weight-bold rz-text-align-left">@ev.SignedUpStudents/@ev.Capacity</RadzenText>
                     </RadzenStack>
                 </RadzenColumn>
                 <RadzenColumn SizeSM="3">
                     <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="1rem" Class="rz-p-4 rz-border-top">
                         @if (ev.Status == "Archived" && eventRating != null)
                         {
                             <RadzenIcon Icon="rating" Style="color: #30445f;"/>
                             <RadzenText TextStyle="TextStyle.Body1" Class="rz-font-weight-bold rz-pt-2">
                                 @(eventRating.TotalRatings > 0 ? $"{@eventRating.AverageRating} out of 5 ({@eventRating.TotalRatings} reviews)" :
                                     "No ratings yet")
                             </RadzenText>
                         }
                     </RadzenStack>
                 </RadzenColumn>
             </RadzenRow>
        </RadzenCard>
        <RadzenTabs Change="@OnChange" TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Server">
            <Tabs>
                <RadzenTabsItem Text="Posts">
                    @if (pageInitialized && !posts.Any())
                    {
                        <h3>No posts have been added by organizers yet.</h3>
                    }
                    <RadzenDataList PageSize="6" AllowPaging="true" Data="@posts" TItem="PostDto">
                        <Template Context="post">
                            <RadzenCard Class="rz-border-radius-3" Style="cursor: pointer"
                                        @onclick="@(() => NavigationManager.NavigateTo($"/events/{ev.Id}/posts/{post.Id}/author/{GetAuthorName(post.OrganizerId)}"))">
                                <RadzenRow Gap="0.5rem">
                                    <RadzenColumn Size="12" class="rz-text-truncate">
                                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
                                            <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: darkred"
                                                        Text=@($"{GetAuthorName(post.OrganizerId)}")/>
                                            @if (post.UpdatedAt != null)
                                            {
                                                <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: dodgerblue">
                                                    Updated at @(post.UpdatedAt?.ToLocalTime().ToString("f", CultureInfo.CurrentUICulture))
                                                </RadzenText>   
                                            }
                                            else
                                            {
                                                <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: dodgerblue">
                                                    Published at @(post.CreatedAt.ToLocalTime().ToString("f", CultureInfo.CurrentUICulture))
                                                </RadzenText>   
                                            }
                                        </RadzenStack>
                                    </RadzenColumn>
                                </RadzenRow>
                                <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;"/>
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                                    <RadzenStack Gap="1em">
                                        <RadzenStack></RadzenStack>
                                        <RadzenText TextStyle="TextStyle.Body1" TextAlign="TextAlign.Left" Class="rz-mb-0">
                                            <strong>@(post.TextContent)</strong>
                                        </RadzenText>
                                    </RadzenStack>
                                </RadzenStack>
                            </RadzenCard>
                        </Template>
                    </RadzenDataList>
                </RadzenTabsItem>

                <RadzenTabsItem Text="Comments">
                    <CommentsTab CommentContext="Event" ContextId="@EventId" StudentId="studentId" />
                </RadzenTabsItem>

                <RadzenTabsItem Text="Reactions">
                    @if (pageInitialized && !reactions.Any())
                    {
                        <h3>No reactions have been added by students yet.</h3>
                    }
                    @* <RadzenDataList PageSize="10" AllowPaging="true" Data="@reactions" TItem="ReactionDto"> *@
                    @*     <Template Context="reaction"> *@
                    @*         <RadzenCard Class="rz-border-radius-3"> *@
                    @*             <RadzenRow Gap="0.5rem"> *@
                    @*                 <RadzenColumn Size="6"> *@
                    @*                     <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: darkred" *@
                    @*                                 Text=@(reaction.StudentFullName)/> *@
                    @*                 </RadzenColumn> *@
                    @*                 <RadzenColumn Size="6"> *@
                    @*                     <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: dodgerblue" *@
                    @*                                 Text=@(ReactionTypeExtensions.GetReactionText(reaction.Type))/> *@
                    @*                 </RadzenColumn> *@
                    @*             </RadzenRow> *@
                    @*         </RadzenCard> *@
                    @*     </Template> *@
                    @* </RadzenDataList> *@
                </RadzenTabsItem>

                @if (IdentityService.IsAuthenticated && !IsUserEventOrganizer(ev))
                {
                    <RadzenTabsItem Text="Signed up friends">
                        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" 
                                        AllowSorting="true" PageSize="@participantPageSize" PageSizeOptions="@participantPageSizeOptions"
                                        AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true"
                                        Data="@ev.FriendsSignedUp" ColumnWidth="100px" LogicalFilterOperator="LogicalFilterOperator.Or">
                            <Columns>
                                <RadzenDataGridColumn Property="Name" Title="Name" Frozen="true" TextAlign="TextAlign.Center" />
                                <RadzenDataGridColumn Context="friend" Title="Options" TextAlign="TextAlign.Center"
                                                      Filterable="false" Sortable="false" Frozen="true">
                                    <Template Context="friend">
                                        <RadzenButton Size="ButtonSize.Medium" Text="Show"
                                                      ButtonStyle="ButtonStyle.Secondary"
                                                      Click="@(() => OpenParticipantDetailsDialog(friend, "friend"))" />
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </RadzenTabsItem>
                    
                    <RadzenTabsItem Text="Interested friends">
                        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                                        AllowSorting="true" PageSize="@participantPageSize" PageSizeOptions="@participantPageSizeOptions"
                                        AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true"
                                        Data="@ev.FriendsInterestedIn" ColumnWidth="100px" LogicalFilterOperator="LogicalFilterOperator.Or">
                            <Columns>
                                <RadzenDataGridColumn Property="Name" Title="Name" Frozen="true" TextAlign="TextAlign.Center" />
                                <RadzenDataGridColumn Context="friend" Title="Options" TextAlign="TextAlign.Center"
                                                      Filterable="false" Sortable="false" Frozen="true">
                                    <Template Context="friend">
                                        <RadzenButton Size="ButtonSize.Medium" Text="Show"
                                                      ButtonStyle="ButtonStyle.Secondary"
                                                      Click="@(() => OpenParticipantDetailsDialog(friend, "friend"))" />
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </RadzenTabsItem>
                }

                @if (IdentityService.IsAuthenticated && IsUserEventOrganizer(ev))
                {
                    <RadzenTabsItem Text="Signed up students">
                        <RadzenDataGrid @ref="signedUpDataGrid"
                                        AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                                        AllowSorting="true" PageSize="@participantPageSize" PageSizeOptions="@participantPageSizeOptions"
                                        AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true"
                                        Data="@signedUpStudents" ColumnWidth="100px" LogicalFilterOperator="LogicalFilterOperator.Or">
                            <Columns>
                                <RadzenDataGridColumn Property="Name" Title="Name" Frozen="true" TextAlign="TextAlign.Center" />
                                <RadzenDataGridColumn Context="participant" Title="Options" TextAlign="TextAlign.Center"
                                                      Filterable="false" Sortable="false" Frozen="true">
                                    <Template Context="participant">
                                        <RadzenButton Size="ButtonSize.Medium" Text="Show"
                                                      ButtonStyle="ButtonStyle.Secondary"
                                                      Click="@(() => OpenParticipantDetailsDialog(participant, "participant"))" />
                                        <RadzenButton Size="ButtonSize.Medium" Text="Remove"
                                                      ButtonStyle="ButtonStyle.Warning"
                                                      Click="@(() => RemoveEventParticipant(ev, participant))"/>
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </RadzenTabsItem>
                    
                    <RadzenTabsItem Text="Interested students">
                        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                                        AllowSorting="true" PageSize="@participantPageSize" PageSizeOptions="@participantPageSizeOptions"
                                        AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true"
                                        Data="@interestedStudents" ColumnWidth="100px" LogicalFilterOperator="LogicalFilterOperator.Or">
                            <Columns>
                                <RadzenDataGridColumn Property="Name" Title="Name" Frozen="true" TextAlign="TextAlign.Center" />
                                <RadzenDataGridColumn Context="participant" Title="Options" TextAlign="TextAlign.Center"
                                                      Filterable="false" Sortable="false" Frozen="true">
                                    <Template Context="participant">
                                        <RadzenButton Size="ButtonSize.Medium" Text="Show"
                                                      ButtonStyle="ButtonStyle.Secondary"
                                                      Click="@(() => OpenParticipantDetailsDialog(participant, "participant"))" />
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </RadzenTabsItem>
                }
            </Tabs>
        </RadzenTabs>
    </RadzenStack>
}

<style>
    :root {
        --rz-card-padding: 10px;
        overflow: auto;
    }

    .rz-datalist-data {
      border-radius: 15px;
      overflow: auto;
    }
    
    .rz-g > div, .rz-datalist-data > li {
      padding: 0rem !important;
      border-radius: 15px;
      background-color: transparent;
      border-color: transparent;
    }
    
    .event-name {
        word-break: break-word;
    }
    
    .small-font {
        font-size: 1.35em;
    }
    
    .medium-font {
        font-size: 1.85em;
    }
    
    .large-font {
        font-size: 2.5em;
    }

    .gradient-background {
        background: linear-gradient(90deg, rgba(48,68,95,1) 0%, rgba(16,35,56,1) 100%);
    }
    
    .archived-event {
        color: grey;
    }
        
    .cancelled-event {
        color: red;
    }
    
    .to-be-published-event {
        color: orange;
    }

</style>

@code {
    [Parameter]
    public string EventId { get; set; }
    
    private Guid studentId;
    private EventDto ev = new();
    private bool pageInitialized = false;
    private EventRatingDto eventRating = null;
    
    private int activeIndex = 0;
    private bool arrows = true;
    private bool bullets = true;
    private bool enableSwipeGesture = true;
    private bool autocycle = true;
    private MudBlazor.Transition transition = MudBlazor.Transition.Slide; 

    IEnumerable<PostDto> posts;
    IEnumerable<ReactionDto> reactions = [];
    IEnumerable<string> images = [];
    
    ReactionsSummaryDto reactionsSummary = new();
    List<KeyValuePair<string, ReactionType?>> reactionTypes = ReactionTypeExtensions.GenerateReactionPairs();
    
    private int participantPageSize = 10;
    IEnumerable<int> participantPageSizeOptions = new int[] { 10, 20, 40};
    RadzenDataGrid<ParticipantDto> signedUpDataGrid;
    List<ParticipantDto> signedUpStudents;
    List<ParticipantDto> interestedStudents;
     
    protected override async Task OnInitializedAsync()
    {
        ev = await EventsService.GetEventAsync(new Guid(EventId));
        posts = await PostsService.GetPostsAsync(ev.Id);
        reactionsSummary = await ReactionsService.GetReactionsSummaryAsync(ev.Id, ReactionContentType.Event);
        var tasks = new List<Task<FileDto>>();
        foreach (var mediaFile in ev.MediaFiles)
        {
            tasks.Add(MediaFilesService.GetFileAsync(mediaFile));
        }
        
        if (ev.Status == "Archived")
        {
            var response = await EventsService.GetEventRatingAsync(ev.Id);
            if (response != null)
            {
                eventRating = response;
            }
        }
        if (IdentityService.IsAuthenticated)
        {
            studentId = IdentityService.GetCurrentUserId();
        }
        
        StateHasChanged();
        images = (await Task.WhenAll(tasks)).Select(f => f.Base64Content).ToList();
        pageInitialized = true;
    }

    private string GetAuthorName(Guid authorId)
    {
        return authorId == ev.Organizer.Id ? ev.Organizer.Name : "Author unknown";
    }

    private bool IsUserEventOrganizer(EventDto eventDto)
    {
        if (IdentityService.GetCurrentUserRole() != "organizer")
        {
            return false;
        }

        return eventDto.Organizer != null && studentId == eventDto.Organizer.Id;
    }
    
    private async void OnChange(int index)
    {
        if (!IdentityService.IsAuthenticated)
        {
            return;
        }
        
        switch (index)
        {
            case 0:
                posts = await PostsService.GetPostsAsync(ev.Id);
                break;
            case 1:
                break;
            case 2:
                reactions = await ReactionsService.GetReactionsAsync(ev.Id, ReactionContentType.Event);
                break;
            case 3:
                if (IsUserEventOrganizer(ev))
                {
                    var eventParticipantsDto = await EventsService.GetEventParticipantsAsync(ev.Id);
                    signedUpStudents = eventParticipantsDto.SignedUpStudents.ToList();
                }
                break;
            case 4:
                if (IsUserEventOrganizer(ev))
                {
                    var eventParticipantsDto = await EventsService.GetEventParticipantsAsync(ev.Id);
                    interestedStudents = eventParticipantsDto.InterestedStudents.ToList();
                }
                break;
        }
        StateHasChanged();
    }

    private async Task OpenEventDetailsDialog(EventDto eventDto)
    {
        await DialogService.OpenAsync<EventDetailsDialog>("Details of the event:",
            new Dictionary<string, object>() { { "EventDto", eventDto } },
            new DialogOptions()
            {
                Width = "700px", Height = "600px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }

    private async Task OpenDeleteEventDialog()
    {
        await DialogService.OpenAsync<DeleteEventDialog>("Are you sure? This action cannot be undone!",
            new Dictionary<string, object>() { {"EventId", new Guid(EventId) } },
            new DialogOptions()
            {
                Width = "500px", Height = "100px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }
    
    private async Task OpenParticipantDetailsDialog(ParticipantDto participantDto, string term)
    {
        await DialogService.OpenAsync<ParticipantDetailsDialog>($"Details of the {term}:",
            new Dictionary<string, object>()
            {
                { "EventId", EventId },
                { "ParticipantDto", participantDto }
            },
            new DialogOptions()
            {
                Width = "700px", Height = "600px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }
    
    private async void SignUpToEvent(EventDto eventDto)
    {
        await EventsService.SignUpToEventAsync(eventDto.Id, studentId);
        eventDto.IsSignedUp = true;
        StateHasChanged();
    }
    
    private async void CancelSignUpToEvent(EventDto eventDto)
    {
        await EventsService.CancelSignUpToEventAsync(eventDto.Id, studentId);
        eventDto.IsSignedUp = false;
        StateHasChanged();
    }
    
    private async void ShowInterestInEvent(EventDto eventDto)
    {
        await EventsService.ShowInterestInEventAsync(eventDto.Id, studentId);
        eventDto.IsInterested = true;
        StateHasChanged();
    }
    
    private async void CancelInterestInEvent(EventDto eventDto)
    {
        await EventsService.CancelInterestInEventAsync(eventDto.Id, studentId);
        eventDto.IsInterested = false;
        StateHasChanged();
    }
    
    private async void RemoveEventParticipant(EventDto eventDto, ParticipantDto participant)
    {
        await EventsService.RemoveEventParticipantAsync(eventDto.Id, participant.StudentId);
        signedUpStudents.Remove(participant);
        await signedUpDataGrid.Reload();
    }

    private async void ReactionChanged(ReactionType? reactionType)
    {
        if (reactionsSummary.AuthUserReactionId != null)
        {
            await ReactionsService.DeleteReactionAsync((Guid)reactionsSummary.AuthUserReactionId);
        }
        
        if (reactionType != null)
        {
            await ReactionsService.CreateReactionAsync(Guid.Empty, studentId, reactionType.ToString(),
                ev.Id, ReactionContentType.Event.ToString());
        }

        reactionsSummary = await ReactionsService.GetReactionsSummaryAsync(ev.Id, ReactionContentType.Event);
        StateHasChanged();
    }
    
    private string GetFontSizeClass(string eventName)
    {
        if (eventName.Length <= 50)
        {
            return "large-font";
        }
        else if (eventName.Length <= 100)
        {
            return "medium-font";
        }
        else
        {
            return "small-font";
        }
    }
    
    private string StateToText()
    {
        if (ev.Status == "Archived")
        {
            return "Archived event";
        }
        else if (ev.Status == "Cancelled")
        {
            return "Cancelled event";
        }
        else if (ev.Status == "ToBePublished")
        {
            return "To be published event";
        }
        else
        {
            return "Published";
        }
    }

    private string GetStateColor()
    {
        if (ev.Status == "Archived")
        {
            return "archived-event";
        }
        else if (ev.Status == "Cancelled")
        {
            return "cancelled-event";
        }
        else if (ev.Status == "ToBePublished")
        {
            return "to-be-published-event";
        }
        else
        {
            return String.Empty;
        }
    }
    
    // private async Task SearchComments()
    // {
    //     comments = [];
    //     searchCommentsModel.Pageable.Page = 1;
    //     
    //     var response = await CommentsService.SearchRootCommentsAsync(searchCommentsModel.ContextId,
    //         searchCommentsModel.CommentContext, searchCommentsModel.Pageable);
    //     if (response.Content != null)
    //     {
    //         comments = response.Content.Content.ToHashSet();
    //         commentsEmpty = response.Content.Empty;
    //         
    //         if (response.Content.Number < response.Content.TotalPages)
    //         {
    //             comments.Last().IsLast = true;
    //         }
    //     }
    //     else
    //     {
    //         commentsEmpty = true;
    //     }
    //     
    //     foreach (var comment in comments)
    //     {
    //         if (comment.RepliesCount > 0)
    //         {
    //             comment.CanExpand = true;
    //         }
    //         
    //         var searchSubCommentsModel = searchCommentsModel.DeepClone();
    //         searchSubCommentsModel.Pageable.Page = 1;
    //         
    //         var subResponse = await CommentsService.SearchSubCommentsAsync(searchCommentsModel.ContextId,
    //             searchCommentsModel.CommentContext, comment.Id, searchCommentsModel.Pageable);
    //         if (subResponse.Content is { Empty: false })
    //         {
    //             comment.SubComments = subResponse.Content.Content.ToHashSet();
    //             var moreSubCommentsAvailable = subResponse.Content.Number < subResponse.Content.TotalPages;
    //
    //             foreach (var subComment in comment.SubComments)
    //             {
    //                 subComment.Parent = comment;
    //             }
    //
    //             if (moreSubCommentsAvailable)
    //             {
    //                 comment.SubComments.Last().IsLast = true;   
    //             }
    //         }
    //     }
    //     
    //     StateHasChanged();
    // }
}