@page "/events/{EventId}"
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Areas.Comments
@using MiniSpace.Web.Areas.Events
@using MiniSpace.Web.Areas.Posts
@using MiniSpace.Web.Areas.Reactions
@using MiniSpace.Web.DTO
@using MiniSpace.Web.DTO.Enums
@using MiniSpace.Web.Models.Reports
@using MiniSpace.Web.Pages.Comments
@using MiniSpace.Web.Pages.Events.Dialogs
@using MiniSpace.Web.Pages.Reports.Dialogs
@using Radzen
@using MudBlazor
@using AlignItems = Radzen.AlignItems
@using DialogOptions = Radzen.DialogOptions
@using DialogService = Radzen.DialogService
@using Orientation = Radzen.Orientation
@using System.Globalization
@using MiniSpace.Web.Areas.MediaFiles
@inject DialogService DialogService
@inject IIdentityService IdentityService
@inject IEventsService EventsService
@inject IPostsService PostsService
@inject IReactionsService ReactionsService
@inject ICommentsService CommentsService
@inject IMediaFilesService MediaFilesService
@inject NavigationManager NavigationManager

@if (!pageInitialized && !eventNotFound)
{
    <div style="display: flex; justify-content: center; align-items: center;">
        <RadzenProgressBarCircular ShowValue="true" ProgressBarStyle="ProgressBarStyle.Light" 
                                   Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
            <Template>Loading...</Template>
        </RadzenProgressBarCircular>
    </div>
}

@if (eventNotFound)
{
    <h3 class="rz-p-12">Event not found!</h3>
    <h3>Probably has been deleted!</h3>
}

@if (pageInitialized)
{
    @if (IdentityService.IsAuthenticated && (IdentityService.GetCurrentUserRole() == "user" || IdentityService.GetCurrentUserRole() == "organizer"))
    {
        <div>
            <RadzenStack class="rz-pt-5 rz-mx-auto" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Gap="1rem">
                <RadzenStack  Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                    @if (!IsUserEventOrganizer(ev) && ev.Status != "Archived")
                    {
                        @if (!ev.IsInterested)
                        {
                            <RadzenButton Size="ButtonSize.Medium" Text="Show interest in event"
                                          Click="@(() => ShowInterestInEvent(ev))" class="separate-button"/>
                        }
                        else
                        {
                            <RadzenButton Size="ButtonSize.Medium" Text="Cancel interest in event" 
                                          Click="@(() => CancelInterestInEvent(ev))" class="separate-button-cancelled"/>
                        }
                        @if (!ev.IsSignedUp)
                        {
                            <RadzenButton Size="ButtonSize.Medium" Text="Sign up to event" 
                                          Click="@(() => SignUpToEvent(ev))" class="separate-button" Disabled=@(ev.SignedUpStudents>=ev.Capacity)/>
                        }
                        else
                        {
                            <RadzenButton Size="ButtonSize.Medium" Text="Cancel sign up to event" 
                                          Click="@(() => CancelSignUpToEvent(ev))" class="separate-button-cancelled"/>
                        }    
                    }
                    @if (IdentityService.GetCurrentUserRole() == "user" && ev.Status != "Archived")
                    {
                        @if (ev.IsSignedUp || ev.IsInterested)
                        {
                            <RadzenButton Size="ButtonSize.Medium" Text="Invite friends"
                                        Click="@(() => OpenInviteFriendsToEventDialog(ev.Id))" class="separate-button-cancelled"/>
                        }
                    
                    }
                    @if (IdentityService.GetCurrentUserRole() == "organizer" && ev.Status != "Archived")
                    {
                        <RadzenButton Size="ButtonSize.Medium" Text="Invite friends"
                                        Click="@(() => OpenInviteFriendsToEventDialog(ev.Id))" class="separate-button-cancelled"/>
                    }
                </RadzenStack>
                <RadzenButton Size="ButtonSize.Medium" Text="Event details" Icon="info" Style="background-color: darkgreen !important;"
                                                                  Click="@(() => OpenEventDetailsDialog(ev))" class="separate-button"/>
            </RadzenStack>
        </div>
    }
    <RadzenStack class="rz-pt-6" Gap="1rem" Style="height: 100%">
        <RadzenCard Style="max-width: 1080px; border-radius: 15px; overflow: hidden; box-shadow: 0 6px 10px rgba(0, 0, 0, 0.1); cursor: pointer">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="0.5rem" Class="rz-pt-2 rz-px-4 rz-border-top">
                    <RadzenButton Size="ButtonSize.Medium" Click="@(() => { if (IsUserEventOrganizer(ev)) OpenInterestedStudentsDialog(); else OpenInterestedFriendsDialog(); })" 
                                  class="friends-button" Disabled=@(!IdentityService.IsAuthenticated)>
                        <RadzenIcon Icon="grade" Style="color: #30445f;"/>
                        <RadzenText TextStyle="TextStyle.H6" Class="rz-font-weight-bold rz-text-align-left rz-pr-8">@ev.InterestedStudents</RadzenText>
                    </RadzenButton>
                    <RadzenButton Size="ButtonSize.Medium" Click="@(() => { if (IsUserEventOrganizer(ev)) OpenSignedUpStudentsDialog(); else OpenSignedUpFriendsDialog(); })" 
                                  class="friends-button" Disabled=@(!IdentityService.IsAuthenticated)>
                        <RadzenIcon Icon="account_circle" Style="color: #30445f;" />
                        <RadzenText TextStyle="TextStyle.H6" Class="rz-font-weight-bold rz-text-align-left">@ev.SignedUpStudents/@ev.Capacity</RadzenText>
                    </RadzenButton>
                    @if (ev.Status == "Archived" && eventRating != null)
                    {
                        <RadzenIcon Icon="rating" Style="color: #30445f;"/>
                        <RadzenText TextStyle="TextStyle.Body1" Class="rz-font-weight-bold rz-pt-2">
                            @(eventRating.TotalRatings > 0 ? $"{@eventRating.AverageRating:F2} out of 5 ({@eventRating.TotalRatings} reviews)" :
                                "No ratings yet")
                        </RadzenText>
                    }
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem" Class="rz-pt-2 rz-px-4 rz-border-top">
                    <RadzenText TextStyle="TextStyle.Body1" Class="@($"rz-font-weight-bold rz-px-4 rz-pt-2 {GetStateColor()}")">@StateToText()</RadzenText>
                    @if (IdentityService.IsAuthenticated & IsUserEventOrganizer(ev))
                    {
                        <RadzenButton Size="ButtonSize.Medium" Text="Update event" class="edit-button"
                                      Click="@(() => NavigationManager.NavigateTo($"/events/{ev.Id}/update"))">
                            <RadzenIcon Icon="edit" Style="color: white; font-weight: 800;"/>
                        </RadzenButton>
                        <RadzenButton Size="ButtonSize.Medium" Text="Delete event" class="delete-button"
                                                          Click="@(() => OpenDeleteEventDialog())" >
                            <RadzenIcon Icon="close" Style="color: white; font-weight: 800;"/>
                        </RadzenButton>
                    }
                    else if (IdentityService.IsAuthenticated && !IsUserEventOrganizer(ev))
                    {
                        <RadzenButton Size="ButtonSize.Medium" Text="Report event" class="delete-button"
                                      Click="@(() => ReportEvent(ev))" >
                            <RadzenIcon Icon="warning" Style="color: white; font-weight: 800;"/>
                        </RadzenButton>
                    }
                </RadzenStack>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Stretch" Gap="1rem" Class="rz-p-4">
                <RadzenStack Gap="0">
                    <RadzenText TextStyle="TextStyle.Overline" Class="rz-display-flex rz-mt-2 rz-my-0">Event name</RadzenText>
                    <RadzenText TextStyle="TextStyle.H4" Class="@($"rz-font-weight-bold rz-mb-4 rz-text-align-left event-name {GetFontSizeClass(ev.Name)}")">@ev.Name</RadzenText>
                    <RadzenRow Gap="0.5rem">
                        <RadzenColumn SizeSM="6" class="rz-mx-auto">
                            <RadzenText TextStyle="TextStyle.Overline" Class="rz-display-flex rz-mt-2 rz-my-0">Organization</RadzenText>
                            <RadzenText TextStyle="TextStyle.H6" Class="rz-font-weight-bold rz-text-align-left">@ev.Organizer.OrganizationName</RadzenText>
                        </RadzenColumn>
                        <RadzenColumn SizeSM="6" class="rz-mx-auto">
                            <RadzenText TextStyle="TextStyle.Overline" Class="rz-display-flex rz-mt-2 rz-my-0">Organizer</RadzenText>
                            <RadzenText TextStyle="TextStyle.H6" Class="rz-font-weight-bold rz-text-align-left">@ev.Organizer.Name</RadzenText>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" Class="rz-p-4">
                <RadzenStack RowGap="0">
                    <RadzenText TextStyle="TextStyle.Overline" Class="rz-display-flex rz-mt-2 rz-my-0">Description</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1" Class="@($"rz-font-weight-bold rz-mb-4 rz-text-align-left")">@ev.Description</RadzenText>
                </RadzenStack>
            </RadzenStack>
            @if (images.Any())
            {
                <RadzenStack class="rz-pb-5" Orientation="Orientation.Horizontal">
                    <MudCarousel @bind-SelectedIndex="@activeIndex" Class="mud-width-full" Style="height: 70vh;" ShowArrows="@arrows"
                                 ShowBullets="@bullets" EnableSwipeGesture="@enableSwipeGesture" AutoCycle="@autocycle" TData="object">
                        @foreach (var img in images)
                        {
                            <MudCarouselItem>
                                <div style="height: 100%; background-image: url('data:image/webp;base64,@img'); background-size: cover; background-position: center;"></div>
                            </MudCarouselItem>
                        }
                    </MudCarousel>
                </RadzenStack>
            }
            <RadzenCard Class="gradient-background rz-shadow-0 rz-border-radius-5 rz-p-8" Style="margin: 1rem calc(-1 * var(--rz-card-padding)); border-radius: 0;">
                <RadzenRow RowGap="0">
                    <RadzenColumn SizeSM="6">
                        <RadzenText TextStyle="TextStyle.Overline" Class="rz-color-on-secondary-light rz-display-flex rz-mt-4 rz-mb-0">Start date</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" Class="rz-color-on-secondary-light rz-font-weight-bold">@ev.StartDate.ToLocalTime().ToString("f", CultureInfo.CurrentUICulture)</RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" Class="rz-color-on-secondary-light rz-display-flex rz-mt-4 rz-mb-0">End date</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" Class="rz-color-on-secondary-light rz-font-weight-bold">@ev.EndDate.ToLocalTime().ToString("f", CultureInfo.CurrentUICulture)</RadzenText>
                    </RadzenColumn>
                    <RadzenColumn SizeSM="6">
                        <RadzenText TextStyle="TextStyle.Overline" Class="rz-color-on-secondary-light rz-display-flex rz-mt-4 rz-mb-0">Location</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" Class="rz-color-on-secondary-light rz-font-weight-bold">@ev.Location?.BuildingName</RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" Class="rz-color-on-secondary-light rz-display-flex rz-mt-4 rz-mb-0">Fee</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" Class="rz-color-on-secondary-light rz-font-weight-bold">@String.Format(new System.Globalization.CultureInfo("pl-PL"), "{0:C}", ev?.Fee)</RadzenText>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenCard>
            <RadzenRow RowGap="0">
                <RadzenColumn SizeSM="8">
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="0.5rem" Class="rz-p-6 rz-border-top">
                        <RadzenText TextStyle="TextStyle.H6" Class="rz-font-weight-bold rz-text-align-left">Number of reactions:  @reactionsSummary.NumberOfReactions</RadzenText>
                    </RadzenStack>
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="0.5rem" Class="rz-px-6 rz-pb-4 rz-border-top">
                        @if (reactionsSummary.NumberOfReactions > 0)
                        {
                            <RadzenText TextStyle="TextStyle.H6" Class="rz-font-weight-bold rz-text-align-left">Dominant reaction: </RadzenText>
                            <MudIcon Icon="@($"{reactionsSummary.DominantReaction.GetReactionIcon()}")" Style="color: #30445f;"/>
                        }
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn SizeSM="4">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="1rem" Class="rz-p-4 rz-border-top">
                        @if (IdentityService.IsAuthenticated && ev.IsSignedUp && ev.Status == "Archived")
                        {
                            <RadzenButton Size="ButtonSize.Medium" class="separate-button"
                                          Click="@(() => OpenRatingDialog())" Text="@(ev.StudentRating != null ? $"Your rating {ev.StudentRating}/5" : "Rate")"/>
                        }
                        @if (IdentityService.IsAuthenticated && !IsUserEventOrganizer(ev))
                        {
                            <RadzenButton Size="ButtonSize.Medium" class="separate-button"
                                          Click="@(() => OpenReactionsDialog())">
                                React
                                @if (reactionsSummary.AuthUserReactionType != null)
                                {
                                    <MudIcon Icon="@($"{reactionsSummary.AuthUserReactionType.GetReactionIcon()}")"/>
                                }
                            </RadzenButton>
                        }
                        else if (IdentityService.IsAuthenticated)
                        {
                            <RadzenButton Size="ButtonSize.Medium" class="separate-button"
                                          Click="@(() => OpenReactionsListingDialog())">
                                Reactions
                            </RadzenButton>
                        }
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
        <CommentsTab CommentContext="Event" ContextId="@EventId" StudentId="studentId"/>
        <h2 class="post-font rz-p-4" style="max-width: 1080px">Posts</h2>
        @if (IdentityService.IsAuthenticated && IsUserEventOrganizer(ev))
        {
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0.5rem" style="max-width: 1080px">
                <RadzenButton Size="ButtonSize.Medium" Text="Create new post" ButtonStyle="ButtonStyle.Secondary" class="separate-button"
                              Click="@(() => NavigationManager.NavigateTo($"/events/{ev.Id}/posts/create"))" Style="background-color: #1b6ec2 !important;"/>
            </RadzenStack>   
        }
        @if (pageInitialized && !posts.Any())
        {
            <h3>No posts have been added by organizers yet.</h3>
        }
        <RadzenDataList PageSize="6" AllowPaging="true" Data="@posts" TItem="PostDto">
            <Template Context="post">
                <RadzenCard Class="rz-border-radius-3" Style="cursor: pointer; max-width: 1080px;"
                            @onclick="@(() => NavigationManager.NavigateTo($"/events/{ev.Id}/posts/{post.Id}/author/{GetAuthorName(post.OrganizerId)}"))">
                    <RadzenRow Gap="0.5rem">
                        <RadzenColumn Size="12" class="rz-text-truncate">
                            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
                                <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: darkred"
                                            Text=@($"{GetAuthorName(post.OrganizerId)}")/>
                                @if (post.UpdatedAt != null)
                                {
                                    <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: dodgerblue">
                                        Updated at @(post.UpdatedAt?.ToLocalTime().ToString("f", CultureInfo.CurrentUICulture))
                                    </RadzenText>   
                                }
                                else
                                {
                                    <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: dodgerblue">
                                        Published at @(post.CreatedAt.ToLocalTime().ToString("f", CultureInfo.CurrentUICulture))
                                    </RadzenText>   
                                }
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>
                    <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;"/>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                        <RadzenStack Gap="1em">
                            <RadzenStack></RadzenStack>
                            <RadzenText TextStyle="TextStyle.Body1" TextAlign="TextAlign.Left" Class="rz-mb-0">
                                <strong>@(post.TextContent)</strong>
                            </RadzenText>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            </Template>
        </RadzenDataList>
    </RadzenStack>
}

<style>
    :root {
        --rz-card-padding: 10px;
        overflow: auto;
    }

    .rz-datalist-data {
      border-radius: 15px;
      overflow: auto;
    }
    
    .rz-g > div, .rz-datalist-data > li {
      padding: 0rem !important;
      border-radius: 15px;
      background-color: transparent;
      border-color: transparent;
    }
    
    .separate-button {
        margin: 10px; 
        border: 1px solid #ccc; 
        border-radius: 5px; 
        background-color: #30445f !important;
        padding: 12px;
        color: #333; 
        transition: background-color 0.3s ease; 
    }
    
    .separate-button-cancelled {
            margin: 10px; 
            border: 1px solid #ccc; 
            border-radius: 5px; 
            background-color: #88a5c5 !important;
            padding: 12px;
            color: #333; 
            transition: background-color 0.3s ease; 
        }
    
    .friends-button{
        border: 1px solid #30445f; 
        background-color: transparent !important;
        border-radius: 5px;
    }
    
    .edit-button {
        background-color: darkgreen !important;
        border-radius: 5px;
    }
    
    .delete-button {
        background-color: darkred !important;
        border-radius: 5px;
    }
    
    .event-name {
        word-break: break-word;
    }
    
    .small-font {
        font-size: 1.35em;
    }
    
    .medium-font {
        font-size: 1.85em;
    }
    
    .large-font {
        font-size: 2.5em;
    }

    .gradient-background {
        background: linear-gradient(90deg, rgba(48,68,95,1) 0%, rgba(16,35,56,1) 100%);
    }
    
    .archived-event {
        color: grey;
    }
        
    .cancelled-event {
        color: red;
    }
    
    .to-be-published-event {
        color: orange;
    }
    
    .post-font {
            font-family: Arial, sans-serif; /* Change this to your preferred font */
            font-size: 40px; /* Change this to your preferred font size */
            font-weight: bold; /* Change this to your preferred font weight */
        }

</style>

@code {
    [Parameter] public string EventId { get; set; }

    private Guid studentId;
    private EventDto ev = new();
    private bool pageInitialized = false;
    private bool eventNotFound = false;
    private EventRatingDto eventRating = null;

    private int activeIndex = 0;
    private bool arrows = true;
    private bool bullets = true;
    private bool enableSwipeGesture = true;
    private bool autocycle = true;
    private MudBlazor.Transition transition = MudBlazor.Transition.Slide;

    IEnumerable<PostDto> posts;
    IEnumerable<string> images = [];

    ReactionsSummaryDto reactionsSummary = new();
    List<KeyValuePair<string, ReactionType?>> reactionTypes = ReactionTypeExtensions.GenerateReactionPairs();

    private int participantPageSize = 10;
    IEnumerable<int> participantPageSizeOptions = new int[] { 10, 20, 40 };
    List<ParticipantDto> signedUpStudents;
    List<ParticipantDto> interestedStudents;

    protected override async Task OnInitializedAsync()
    {
        ev = await EventsService.GetEventAsync(new Guid(EventId), IdentityService.IsAuthenticated);
        posts = await PostsService.GetPostsAsync(ev.Id);
        reactionsSummary = await ReactionsService.GetReactionsSummaryAsync(ev.Id, ReactionContentType.Event);
        var tasks = new List<Task<FileDto>>();
        foreach (var mediaFile in ev.MediaFiles)
        {
            tasks.Add(MediaFilesService.GetFileAsync(mediaFile));
        }

        if (ev.Status == "Archived")
        {
            var response = await EventsService.GetEventRatingAsync(ev.Id);
            if (response != null)
            {
                eventRating = response;
            }
        }

        if (IdentityService.IsAuthenticated)
        {
            studentId = IdentityService.GetCurrentUserId();
        }

        StateHasChanged();
        images = (await Task.WhenAll(tasks)).Select(f => f.Base64Content).ToList();
        pageInitialized = true;
    }

    private string GetAuthorName(Guid authorId)
    {
        return authorId == ev.Organizer.Id ? ev.Organizer.Name : "Author unknown";
    }

    private bool IsUserEventOrganizer(EventDto eventDto)
    {
        if (IdentityService.GetCurrentUserRole() != "organizer")
        {
            return false;
        }

        return eventDto.Organizer != null && studentId == eventDto.Organizer.Id;
    }

    private async Task OpenEventDetailsDialog(EventDto eventDto)
    {
        await DialogService.OpenAsync<EventDetailsDialog>("Details of the event:",
            new Dictionary<string, object>() { { "EventDto", eventDto } },
            new DialogOptions()
            {
                Width = "700px", Height = "600px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }

    private async Task OpenDeleteEventDialog()
    {
        await DialogService.OpenAsync<DeleteEventDialog>("Are you sure? This action cannot be undone!",
            new Dictionary<string, object>() { { "EventId", new Guid(EventId) } },
            new DialogOptions()
            {
                Width = "500px", Height = "100px", Resizable = false, Draggable = false,
                AutoFocusFirstElement = false
            });
    }
    
    private async Task OpenReportEventDialog(CreateReportModel createReportModel)
    {
        await DialogService.OpenAsync<CreateReportDialog>("Report the event:",
            new Dictionary<string, object>() { { "CreateReportModel", createReportModel } },
            new DialogOptions()
            {
                Width = "700px", Height = "350px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }

    private async Task OpenInviteFriendsToEventDialog(Guid eventId)
    {
        var parameters = new Dictionary<string, object>()
        {
            {"EventId", eventId}
        };

        var options = new DialogOptions()
        {
            Width = "700px",
            Height = "530px",
            Resizable = true,
            Draggable = true
        };

        await DialogService.OpenAsync<InviteFriendsToEventDialog>("Invite Friends", parameters, options);
    }
    
    private async void SignUpToEvent(EventDto eventDto)
    {
        await EventsService.SignUpToEventAsync(eventDto.Id, studentId);
        eventDto.IsSignedUp = true;
        ev.SignedUpStudents++;
        StateHasChanged();
    }

    private async void CancelSignUpToEvent(EventDto eventDto)
    {
        await EventsService.CancelSignUpToEventAsync(eventDto.Id, studentId);
        eventDto.IsSignedUp = false;
        ev.SignedUpStudents--;
        StateHasChanged();
    }

    private async void ShowInterestInEvent(EventDto eventDto)
    {
        await EventsService.ShowInterestInEventAsync(eventDto.Id, studentId);
        eventDto.IsInterested = true;
        ev.InterestedStudents++;
        StateHasChanged();
    }

    private async void CancelInterestInEvent(EventDto eventDto)
    {
        await EventsService.CancelInterestInEventAsync(eventDto.Id, studentId);
        eventDto.IsInterested = false;
        ev.InterestedStudents--;
        StateHasChanged();
    }

    private async Task ReactionChanged(ReactionType? reactionType)
    {
        if (reactionsSummary.AuthUserReactionId != null)
        {
            await ReactionsService.DeleteReactionAsync((Guid)reactionsSummary.AuthUserReactionId);
        }

        if (reactionType != null)
        {
            await ReactionsService.CreateReactionAsync(Guid.Empty, studentId, reactionType.ToString(),
                ev.Id, ReactionContentType.Event.ToString());
        }

        reactionsSummary = await ReactionsService.GetReactionsSummaryAsync(ev.Id, ReactionContentType.Event);
        StateHasChanged();
    }
    
    private async Task RatingChanged(int? rating)
    {
        if (rating != null)
        {
            await EventsService.RateEventAsync(ev.Id, rating.Value, studentId);
        }
        else
        {
            await EventsService.CancelRateEventAsync(ev.Id, studentId);
        }
        eventRating = await EventsService.GetEventRatingAsync(ev.Id);
        ev.StudentRating = rating;
        StateHasChanged();
    }

    private string GetFontSizeClass(string eventName)
    {
        return eventName.Length switch
        {
            <= 50 => "large-font",
            <= 100 => "medium-font",
            _ => "small-font"
        };
    }

    private string StateToText()
    {
        return ev.Status switch
        {
            "Archived" => "Archived event",
            "Cancelled" => "Cancelled event",
            "ToBePublished" => $"To be published event: {ev.PublishDate.ToLocalTime().ToString("f", CultureInfo.CurrentUICulture)}",
            _ => $"Published: {ev.PublishDate.ToLocalTime().ToString("f", CultureInfo.CurrentUICulture)}"
        };
    }

    private string GetStateColor()
    {
        return ev.Status switch
        {
            "Archived" => "archived-event",
            "Cancelled" => "cancelled-event",
            "ToBePublished" => "to-be-published-event",
            _ => String.Empty
        };
    }

    private async Task OpenReactionsDialog()
    {
        var result = await DialogService.OpenAsync<ReactionDialog>("",
            new Dictionary<string, object>() { { "SelectedReaction", reactionsSummary.AuthUserReactionType } },
            new DialogOptions()
            {
                Width = "500px", Height = "50px", Resizable = false, Draggable = false, ShowClose = false,
                AutoFocusFirstElement = false
            });
        
        await ReactionChanged((ReactionType?)result);
        StateHasChanged(); 
    }
    
    private async Task OpenRatingDialog()
    {
        var result = await DialogService.OpenAsync<RatingDialog>("",
            new Dictionary<string, object>() { { "StudentRating", reactionsSummary.AuthUserReactionType } },
            new DialogOptions()
            {
                Width = "500px", Height = "50px", Resizable = false, Draggable = false, ShowClose = false,
                AutoFocusFirstElement = false
            });
        
        await RatingChanged((int?)result);
        StateHasChanged(); 
    }
    
    private async Task OpenReactionsListingDialog()
    {
        var reactions = await ReactionsService.GetReactionsAsync(ev.Id, ReactionContentType.Event);
        await DialogService.OpenAsync<ReactionListingDialog>("",
            new Dictionary<string, object>() { { "Reactions", reactions } },
            new DialogOptions()
            {
                Width = "700px", Height = "600px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
        
        StateHasChanged(); 
    }
    
    private async Task OpenSignedUpFriendsDialog()
    { 
        await DialogService.OpenAsync<EventFriendsDialog>("Signed up friends:",
            new Dictionary<string, object>() { { "Friends", ev.FriendsSignedUp } },
            new DialogOptions()
            {
                Width = "700px", Height = "600px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }
        
    private async Task OpenInterestedFriendsDialog()
    { 
        await DialogService.OpenAsync<EventFriendsDialog>("Interested friends:",
            new Dictionary<string, object>() { { "Friends", ev.FriendsInterestedIn } },
            new DialogOptions()
            {
                Width = "700px", Height = "600px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }
    
    private async Task OpenSignedUpStudentsDialog()
    { 
        var eventParticipantsDto = await EventsService.GetEventParticipantsAsync(ev.Id);
        await DialogService.OpenAsync<EventsSignedUpStudentsDialog>("Signed up students:",
            new Dictionary<string, object>()
            {
                { "Students", eventParticipantsDto.SignedUpStudents },
                { "EventId", ev.Id }
            },
            new DialogOptions()
            {
                Width = "800px", Height = "650px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
        ev = await EventsService.GetEventAsync(new Guid(EventId), IdentityService.IsAuthenticated);
    }
    
    private async Task OpenInterestedStudentsDialog()
    { 
        var eventParticipantsDto = await EventsService.GetEventParticipantsAsync(ev.Id);
        await DialogService.OpenAsync<EventInterestedStudentsDialog>("Interested students:",
            new Dictionary<string, object>()
            {
                { "Students", eventParticipantsDto.InterestedStudents },
                { "EventId", ev.Id }
            },
            new DialogOptions()
            {
                Width = "800px", Height = "650px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }
    
    private async Task ReportEvent(EventDto eventDto)
    {
        var createReportModel = new CreateReportModel
        {
            IssuerId = studentId,
            TargetId = eventDto.Id,
            TargetOwnerId = eventDto.Organizer.Id,
            ContextType = "Event"
        };

        await OpenReportEventDialog(createReportModel);
    }

    // private async Task SearchComments()
    // {
    //     comments = [];
    //     searchCommentsModel.Pageable.Page = 1;
    //     
    //     var response = await CommentsService.SearchRootCommentsAsync(searchCommentsModel.ContextId,
    //         searchCommentsModel.CommentContext, searchCommentsModel.Pageable);
    //     if (response.Content != null)
    //     {
    //         comments = response.Content.Content.ToHashSet();
    //         commentsEmpty = response.Content.Empty;
    //         
    //         if (response.Content.Number < response.Content.TotalPages)
    //         {
    //             comments.Last().IsLast = true;
    //         }
    //     }
    //     else
    //     {
    //         commentsEmpty = true;
    //     }
    //     
    //     foreach (var comment in comments)
    //     {
    //         if (comment.RepliesCount > 0)
    //         {
    //             comment.CanExpand = true;
    //         }
    //         
    //         var searchSubCommentsModel = searchCommentsModel.DeepClone();
    //         searchSubCommentsModel.Pageable.Page = 1;
    //         
    //         var subResponse = await CommentsService.SearchSubCommentsAsync(searchCommentsModel.ContextId,
    //             searchCommentsModel.CommentContext, comment.Id, searchCommentsModel.Pageable);
    //         if (subResponse.Content is { Empty: false })
    //         {
    //             comment.SubComments = subResponse.Content.Content.ToHashSet();
    //             var moreSubCommentsAvailable = subResponse.Content.Number < subResponse.Content.TotalPages;
    //
    //             foreach (var subComment in comment.SubComments)
    //             {
    //                 subComment.Parent = comment;
    //             }
    //
    //             if (moreSubCommentsAvailable)
    //             {
    //                 comment.SubComments.Last().IsLast = true;   
    //             }
    //         }
    //     }
    //     
    //     StateHasChanged();
    // }
}