@page "/events/{EventId}"
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Areas.Events
@using MiniSpace.Web.Pages.Events.Dialogs
@using MiniSpace.Web.Areas.Posts
@using MiniSpace.Web.Areas.Reactions
@using MiniSpace.Web.DTO.Enums
@using Radzen
@using AlignItems = Radzen.AlignItems
@using DialogOptions = Radzen.DialogOptions
@using DialogService = Radzen.DialogService
@using Orientation = Radzen.Orientation
@inject DialogService DialogService
@inject IIdentityService IdentityService
@inject IEventsService EventsService
@inject IPostsService PostsService
@inject IReactionsService ReactionsService
@inject NavigationManager NavigationManager

@if (!pageInitialized)
{
    <h3 class="rz-p-12">Loading...</h3>
}

@if (pageInitialized)
{
    <h1>@ev.Name</h1>

    <RadzenStack class="rz-pt-6" Gap="1rem" Style="height: 100%">
        <RadzenCard Class="rz-my-12 rz-mx-auto" Style="max-width: 500px">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-p-4">
                <RadzenStack Gap="0">
                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Description</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1"><b>@(ev.Description)</b></RadzenText>
                    @if (ev.Organizer != null)
                    {
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Organization</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@(ev.Organizer.OrganizationName)</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Organizer</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@(ev.Organizer.Name)</b></RadzenText>
                    }
                </RadzenStack>
            </RadzenStack>
            <RadzenCard class="rz-background-color-secondary rz-shadow-0 rz-border-radius-0 rz-p-8">
                <RadzenRow RowGap="0">
                    <RadzenColumn SizeSM="6">
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Start date</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@(ev.StartDate.ToLocalTime().ToString(dateFormat))</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Category</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@(ev.Category)</b></RadzenText>                    
                    </RadzenColumn>
                    <RadzenColumn SizeSM="6">
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">End date</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@(ev.EndDate.ToLocalTime().ToString(dateFormat))</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Fee</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@(ev.Fee)</b></RadzenText>                    
                    </RadzenColumn>
                </RadzenRow>
            </RadzenCard>
        </RadzenCard>
        
        <RadzenStack Gap="1rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0.5rem">
                <RadzenButton Size="ButtonSize.Medium" Text="Show full details" ButtonStyle="ButtonStyle.Primary"
                              Click="@(() => OpenEventDetailsDialog(ev))" />
                <RadzenButton Size="ButtonSize.Medium" Text="Report event" ButtonStyle="ButtonStyle.Primary"
                />
            </RadzenStack>
            
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0.5rem">
                @if (IdentityService.IsAuthenticated && !IsUserEventOrganizer(ev)
                     && (IdentityService.GetCurrentUserRole() == "user" || IdentityService.GetCurrentUserRole() == "organizer"))
                {
                    @if (!ev.IsSignedUp)
                    {
                        <RadzenButton Size="ButtonSize.Medium" Text="Sign up to event" ButtonStyle="ButtonStyle.Secondary"
                                      Click="@(() => SignUpToEvent(ev))"/>
                    }
                    else
                    {
                        <RadzenButton Size="ButtonSize.Medium" Text="Cancel sign up to event" ButtonStyle="ButtonStyle.Warning"
                                      Click="@(() => CancelSignUpToEvent(ev))"/>
                    }
                    
                    @if (!ev.IsInterested)
                    {
                        <RadzenButton Size="ButtonSize.Medium" Text="Interest in event" ButtonStyle="ButtonStyle.Secondary"
                                      Click="@(() => ShowInterestInEvent(ev))"/>
                    }
                    else
                    {
                        <RadzenButton Size="ButtonSize.Medium" Text="Cancel interest in event" ButtonStyle="ButtonStyle.Warning"
                                      Click="@(() => CancelInterestInEvent(ev))"/>
                    }
                }
            </RadzenStack>

            @if (IdentityService.IsAuthenticated && IsUserEventOrganizer(ev))
            {
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0.5rem">
                    <RadzenButton Size="ButtonSize.Medium" Text="Update event" ButtonStyle="ButtonStyle.Secondary"
                                  Click="@(() => NavigationManager.NavigateTo($"/events/{ev.Id}/update"))" />
                    <RadzenButton Size="ButtonSize.Medium" Text="Delete event" ButtonStyle="ButtonStyle.Warning"
                                  Click="@(() => OpenDeleteEventDialog(ev.Id))" />
                </RadzenStack>

                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0.5rem">
                    <RadzenButton Size="ButtonSize.Medium" Text="Create new post" ButtonStyle="ButtonStyle.Secondary"
                                  Click="@(() => NavigationManager.NavigateTo($"/events/{ev.Id}/posts/create"))" />
                </RadzenStack>   
            }

            <RadzenCard Class="rz-my-12 rz-mx-auto" Style="max-width: 500px">
                <RadzenCard class="rz-background-color-success rz-shadow-0 rz-border-radius-0 rz-p-8">
                    <RadzenRow RowGap="0">
                        <RadzenColumn SizeSM="6">
                            <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Number of reactions</RadzenText>
                            <RadzenText TextStyle="TextStyle.H6" class="rz-color-on-primary-light"><b>@(reactionsSummary.NumberOfReactions)</b></RadzenText>
                            <RadzenText Text="Your reaction" TextStyle="TextStyle.Subtitle2" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0" />
                            <RadzenDropDown Name="your-reaction" Data="reactionTypes" Value="@(reactionsSummary.AuthUserReactionType)"
                                            ValueChanged="@((ReactionType? reactionType) => ReactionChanged(reactionType))"
                                            TextProperty="Key" ValueProperty="Value" />
                        </RadzenColumn>
                        <RadzenColumn SizeSM="6">
                            <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Dominant reaction</RadzenText>
                            <RadzenText TextStyle="TextStyle.H6" class="rz-color-on-primary-light"><b>@(ReactionTypeExtensions.GetReactionText(reactionsSummary.DominantReaction))</b></RadzenText>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenCard>
            </RadzenCard>
        </RadzenStack>
        
        <RadzenTabs Change="@OnChange" TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Server">
            <Tabs>
                <RadzenTabsItem Text="Posts">
                    @if (pageInitialized && !posts.Any())
                    {
                        <h3>No posts have been added by organizers yet.</h3>
                    }
                    <RadzenDataList PageSize="6" AllowPaging="true" Data="@posts" TItem="PostDto">
                        <Template Context="post">
                            <RadzenCard Class="rz-border-radius-3" Style="cursor: pointer"
                                        @onclick="@(() => NavigationManager.NavigateTo($"/events/{ev.Id}/posts/{post.Id}/author/{GetAuthorName(post.OrganizerId)}"))">
                                <RadzenRow Gap="0.5rem">
                                    <RadzenColumn Size="12" class="rz-text-truncate">
                                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
                                            <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: dodgerblue"
                                                        Text=@($"{GetAuthorName(post.OrganizerId)}")/>
                                            @if (post.UpdatedAt != null)
                                            {
                                                <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: dodgerblue">
                                                    Updated at @(post.UpdatedAt?.ToLocalTime().ToString(dateFormat))
                                                </RadzenText>   
                                            }
                                            else
                                            {
                                                <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: dodgerblue">
                                                    Published at @(post.CreatedAt.ToLocalTime().ToString(dateFormat))
                                                </RadzenText>   
                                            }
                                        </RadzenStack>
                                    </RadzenColumn>
                                </RadzenRow>
                                <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;"/>
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                                    <RadzenStack Gap="1em">
                                        <RadzenStack></RadzenStack>
                                        <RadzenText TextStyle="TextStyle.Body1" TextAlign="TextAlign.Left" Class="rz-mb-0">
                                            <strong>@(post.TextContent)</strong>
                                        </RadzenText>
                                    </RadzenStack>
                                </RadzenStack>
                            </RadzenCard>
                        </Template>
                    </RadzenDataList>
                </RadzenTabsItem>

                <RadzenTabsItem Text="Comments">
                </RadzenTabsItem>

                <RadzenTabsItem Text="Reactions">
                    
                </RadzenTabsItem>

                @if (IdentityService.IsAuthenticated && !IsUserEventOrganizer(ev))
                {
                    <RadzenTabsItem Text="Signed up friends">
                        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" 
                                        AllowSorting="true" PageSize="@participantPageSize" PageSizeOptions="@participantPageSizeOptions"
                                        AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true"
                                        Data="@ev.FriendsSignedUp" ColumnWidth="100px" LogicalFilterOperator="LogicalFilterOperator.Or">
                            <Columns>
                                <RadzenDataGridColumn Property="Name" Title="Name" Frozen="true" TextAlign="TextAlign.Center" />
                                <RadzenDataGridColumn Context="friend" Title="Options" TextAlign="TextAlign.Center"
                                                      Filterable="false" Sortable="false" Frozen="true">
                                    <Template Context="friend">
                                        <RadzenButton Size="ButtonSize.Medium" Text="Show"
                                                      ButtonStyle="ButtonStyle.Secondary"
                                                      Click="@(() => OpenParticipantDetailsDialog(friend, "friend"))" />
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </RadzenTabsItem>
                    
                    <RadzenTabsItem Text="Interested friends">
                        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                                        AllowSorting="true" PageSize="@participantPageSize" PageSizeOptions="@participantPageSizeOptions"
                                        AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true"
                                        Data="@ev.FriendsInterestedIn" ColumnWidth="100px" LogicalFilterOperator="LogicalFilterOperator.Or">
                            <Columns>
                                <RadzenDataGridColumn Property="Name" Title="Name" Frozen="true" TextAlign="TextAlign.Center" />
                                <RadzenDataGridColumn Context="friend" Title="Options" TextAlign="TextAlign.Center"
                                                      Filterable="false" Sortable="false" Frozen="true">
                                    <Template Context="friend">
                                        <RadzenButton Size="ButtonSize.Medium" Text="Show"
                                                      ButtonStyle="ButtonStyle.Secondary"
                                                      Click="@(() => OpenParticipantDetailsDialog(friend, "friend"))" />
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </RadzenTabsItem>
                }

                @if (IdentityService.IsAuthenticated && IsUserEventOrganizer(ev))
                {
                    <RadzenTabsItem Text="Signed up students">
                        <RadzenDataGrid @ref="signedUpDataGrid"
                                        AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                                        AllowSorting="true" PageSize="@participantPageSize" PageSizeOptions="@participantPageSizeOptions"
                                        AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true"
                                        Data="@signedUpStudents" ColumnWidth="100px" LogicalFilterOperator="LogicalFilterOperator.Or">
                            <Columns>
                                <RadzenDataGridColumn Property="Name" Title="Name" Frozen="true" TextAlign="TextAlign.Center" />
                                <RadzenDataGridColumn Context="participant" Title="Options" TextAlign="TextAlign.Center"
                                                      Filterable="false" Sortable="false" Frozen="true">
                                    <Template Context="participant">
                                        <RadzenButton Size="ButtonSize.Medium" Text="Show"
                                                      ButtonStyle="ButtonStyle.Secondary"
                                                      Click="@(() => OpenParticipantDetailsDialog(participant, "participant"))" />
                                        <RadzenButton Size="ButtonSize.Medium" Text="Remove"
                                                      ButtonStyle="ButtonStyle.Warning"
                                                      Click="@(() => RemoveEventParticipant(ev, participant))"/>
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </RadzenTabsItem>
                    
                    <RadzenTabsItem Text="Interested students">
                        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                                        AllowSorting="true" PageSize="@participantPageSize" PageSizeOptions="@participantPageSizeOptions"
                                        AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true"
                                        Data="@interestedStudents" ColumnWidth="100px" LogicalFilterOperator="LogicalFilterOperator.Or">
                            <Columns>
                                <RadzenDataGridColumn Property="Name" Title="Name" Frozen="true" TextAlign="TextAlign.Center" />
                                <RadzenDataGridColumn Context="participant" Title="Options" TextAlign="TextAlign.Center"
                                                      Filterable="false" Sortable="false" Frozen="true">
                                    <Template Context="participant">
                                        <RadzenButton Size="ButtonSize.Medium" Text="Show"
                                                      ButtonStyle="ButtonStyle.Secondary"
                                                      Click="@(() => OpenParticipantDetailsDialog(participant, "participant"))" />
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </RadzenTabsItem>
                }
            </Tabs>
        </RadzenTabs>
    </RadzenStack>
}

@code {
    [Parameter]
    public string EventId { get; set; }
    
    private const string dateFormat = "dd/MM/yyyy HH:mm";

    private Guid studentId;
    public EventDto ev = new();
    private bool pageInitialized = false;

    IEnumerable<PostDto> posts;

    ReactionsSummaryDto reactionsSummary = new();
    List<KeyValuePair<string, ReactionType?>> reactionTypes =
    [
        new KeyValuePair<string, ReactionType?>("", null),
        new KeyValuePair<string, ReactionType?>(ReactionTypeExtensions.GetReactionText(ReactionType.LoveIt), ReactionType.LoveIt),
        new KeyValuePair<string, ReactionType?>(ReactionTypeExtensions.GetReactionText(ReactionType.LikeIt), ReactionType.LikeIt),
        new KeyValuePair<string, ReactionType?>(ReactionTypeExtensions.GetReactionText(ReactionType.Wow), ReactionType.Wow),
        new KeyValuePair<string, ReactionType?>(ReactionTypeExtensions.GetReactionText(ReactionType.ItWasOkay), ReactionType.ItWasOkay),
        new KeyValuePair<string, ReactionType?>(ReactionTypeExtensions.GetReactionText(ReactionType.HateIt), ReactionType.HateIt)
    ];
    
    private int participantPageSize = 10;
    IEnumerable<int> participantPageSizeOptions = new int[] { 10, 20, 40};
    RadzenDataGrid<ParticipantDto> signedUpDataGrid;
    List<ParticipantDto> signedUpStudents;
    List<ParticipantDto> interestedStudents;
     
    protected override async Task OnInitializedAsync()
    {
        if (IdentityService.IsAuthenticated)
        {
            studentId = IdentityService.GetCurrentUserId();
        }
        ev = await EventsService.GetEventAsync(new Guid(EventId));
        reactionsSummary = await ReactionsService.GetReactionsSummary(ev.Id, ReactionContentType.Event);
        posts = await PostsService.GetPostsAsync(ev.Id);
        
        pageInitialized = true;
    }

    private string GetAuthorName(Guid authorId)
    {
        return authorId == ev.Organizer.Id ? ev.Organizer.Name : "Author unknown";
    }

    private bool IsUserEventOrganizer(EventDto eventDto)
    {
        if (IdentityService.GetCurrentUserRole() != "organizer")
        {
            return false;
        }

        return eventDto.Organizer != null && studentId == eventDto.Organizer.Id;
    }
    
    private async void OnChange(int index)
    {
        if (!IdentityService.IsAuthenticated)
        {
            return;
        }
        
        switch (index)
        {
            case 0:
                posts = await PostsService.GetPostsAsync(ev.Id);
                break;
            case 3:
                if (IsUserEventOrganizer(ev))
                {
                    var eventParticipantsDto = await EventsService.GetEventParticipants(ev.Id);
                    signedUpStudents = eventParticipantsDto.SignedUpStudents.ToList();
                }
                break;
            case 4:
                if (IsUserEventOrganizer(ev))
                {
                    var eventParticipantsDto = await EventsService.GetEventParticipants(ev.Id);
                    interestedStudents = eventParticipantsDto.InterestedStudents.ToList();
                }
                break;
        }
        StateHasChanged();
    }
    
    private async Task OpenEventDetailsDialog(EventDto eventDto)
    {
        await DialogService.OpenAsync<EventDetailsDialog>($"Details of the event:",
            new Dictionary<string, object>() { { "EventDto", eventDto } },
            new DialogOptions()
            {
                Width = "700px", Height = "600px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }
    
    private async Task OpenDeleteEventDialog(Guid postId)
    {
        await DialogService.OpenAsync<DeleteEventDialog>("Are you sure? This action cannot be undone!",
            new Dictionary<string, object>() { {"EventId", new Guid(EventId) } },
            new DialogOptions()
            {
                Width = "500px", Height = "100px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }
    
    private async Task OpenParticipantDetailsDialog(ParticipantDto participantDto, string term)
    {
        await DialogService.OpenAsync<ParticipantDetailsDialog>($"Details of the {term}:",
            new Dictionary<string, object>()
            {
                { "EventId", EventId },
                { "ParticipantDto", participantDto }
            },
            new DialogOptions()
            {
                Width = "700px", Height = "600px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }
    
    private async void SignUpToEvent(EventDto eventDto)
    {
        await EventsService.SignUpToEventAsync(eventDto.Id, studentId);
        eventDto.IsSignedUp = true;
        StateHasChanged();
    }
    
    private async void CancelSignUpToEvent(EventDto eventDto)
    {
        await EventsService.CancelSignUpToEventAsync(eventDto.Id, studentId);
        eventDto.IsSignedUp = false;
        StateHasChanged();
    }
    
    private async void ShowInterestInEvent(EventDto eventDto)
    {
        await EventsService.ShowInterestInEventAsync(eventDto.Id, studentId);
        eventDto.IsInterested = true;
        StateHasChanged();
    }
    
    private async void CancelInterestInEvent(EventDto eventDto)
    {
        await EventsService.CancelInterestInEventAsync(eventDto.Id, studentId);
        eventDto.IsInterested = false;
        StateHasChanged();
    }
    
    private async void RemoveEventParticipant(EventDto eventDto, ParticipantDto participant)
    {
        await EventsService.RemoveEventParticipant(eventDto.Id, participant.StudentId);
        signedUpStudents.Remove(participant);
        await signedUpDataGrid.Reload();
    }

    private async void ReactionChanged(ReactionType? reactionType)
    {
        if (reactionsSummary.AuthUserReactionId != null)
        {
            await ReactionsService.DeleteReaction((Guid)reactionsSummary.AuthUserReactionId);
        }
        
        if (reactionType != null)
        {
            await ReactionsService.CreateReaction(Guid.Empty, studentId, reactionType.ToString(),
                ev.Id, ReactionContentType.Event.ToString());
        }

        reactionsSummary = await ReactionsService.GetReactionsSummary(ev.Id, ReactionContentType.Event);
        StateHasChanged();
    }
}