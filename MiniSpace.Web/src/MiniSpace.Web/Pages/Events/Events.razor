@page "/events"
@using MiniSpace.Web.Areas.Students
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Areas.Events
@using MiniSpace.Web.Components
@using MiniSpace.Web.Pages.Events.Dialogs
@using Radzen
@using DialogOptions = Radzen.DialogOptions
@using DialogService = Radzen.DialogService
@inject DialogService DialogService
@inject IIdentityService IdentityService
@inject IEventsService EventsService
@inject NavigationManager NavigationManager

<h1>Follow events</h1>

@if (!pageInitialized)
{
    <h3 class="rz-p-12">Loading...</h3>
}

@if (pageInitialized && studentId != Guid.Empty)
{
    <RadzenStack class="rz-pt-12" Gap="1rem" Style="height: 100%">
        <RadzenTabs TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Client">
            <Tabs>
                <RadzenTabsItem Text="Signed up">
                    @if (totalSignedUpElements == 0)
                    {
                        <h3>You haven't been signed up for any event yet.</h3>
                    }
                    <RadzenDataList AllowPaging="false" Data="@signedUpEvents" TItem="EventDto">
                        <Template Context="ev">
                            <RadzenEventCard Event="ev" />
                        </Template>
                    </RadzenDataList>
                </RadzenTabsItem>
                
                <RadzenTabsItem Text="Interested">
                    @if (totalInterestedElements == 0)
                    {
                        <h3>You haven't been interested in any event yet.</h3>
                    }
                    <RadzenDataList AllowPaging="false" Data="@interestedEvents" TItem="EventDto">
                        <Template Context="ev">
                            <RadzenEventCard Event="ev" />
                        </Template>
                    </RadzenDataList>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </RadzenStack>
}

@code {
    private const string dateFormat = "dd/MM/yyyy HH:mm";

    private Guid studentId;
    private bool pageInitialized = false;
    
    private int numberOfResults = 10;
    
    int totalSignedUpElements = 0;
    IEnumerable<EventDto> signedUpEvents;

    int totalInterestedElements = 0;
    IEnumerable<EventDto> interestedEvents;
    
    protected override async Task OnInitializedAsync()
    {
        if (IdentityService.IsAuthenticated)
        {
            studentId = IdentityService.GetCurrentUserId();
            
            var tmp = await EventsService.GetStudentEventsAsync(studentId, numberOfResults);
            if (tmp != null)
            {
                signedUpEvents = tmp.Content.Where(ev => ev.IsSignedUp);
                totalSignedUpElements = signedUpEvents.Count();

                interestedEvents = tmp.Content.Where(ev => ev.IsInterested);
                totalInterestedElements = interestedEvents.Count();
            }
            else
            {
                signedUpEvents = new List<EventDto>();
                totalSignedUpElements = 0;
                
                interestedEvents = new List<EventDto>();
                totalInterestedElements = 0;
            }
        }
        
        pageInitialized = true;
    }
}
