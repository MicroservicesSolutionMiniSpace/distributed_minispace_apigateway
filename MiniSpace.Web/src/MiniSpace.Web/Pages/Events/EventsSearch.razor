@page "/events/search"
@using MiniSpace.Web.Areas.Identity
@using MiniSpace.Web.Areas.Events
@using MiniSpace.Web.Areas.Students
@using MiniSpace.Web.DTO
@using MiniSpace.Web.DTO.Wrappers
@using MiniSpace.Web.Models.Events
@using MiniSpace.Web.Pages.Events.Dialogs
@using MudBlazor
@using Radzen
@using DialogOptions = Radzen.DialogOptions
@using DialogService = Radzen.DialogService
@using Orientation = Radzen.Orientation
@inject DialogService DialogService
@inject IEventsService EventsService
@inject IStudentsService StudentsService
@inject NavigationManager NavigationManager

<h1>Search events</h1>

<div class="rz-p-8 rz-text-align-center">
    <RadzenButton Size="ButtonSize.Medium" Text="Filter by criteria" Click="@OpenSearchDialog"/>
</div>

@if (!pageInitialized)
{
    <h3 class="rz-p-12">Loading...</h3>
}

@if (pageInitialized && totalElements == 0)
{
    <h3 class="rz-p-12">No results found. Try to give us more general filtering criteria.</h3>
}

@if (pageInitialized && totalElements != 0)
{
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
        <MudPagination Count="@totalPages" SelectedChanged="@SelectedPageChanged" Selected="@searchEventsModel.Pageable.Page"
                       Rectangular="true" ShowFirstButton="true" ShowLastButton="true"/>
    </RadzenStack>   
}

<RadzenDataList AllowPaging="false" Data="@events" TItem="EventDto">
    <Template Context="ev">
        <RadzenCard Class="rz-border-radius-3" Style="cursor: pointer"
                    @onclick="@(() => NavigationManager.NavigateTo($"/events/{ev.Id}"))">
            <RadzenRow Size="12">
                <RadzenColumn Size="12" SizeMD="6">
                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-1 rz-my-0">Name</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1"><b>@(ev.Name)</b></RadzenText>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="6">
                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-1 rz-my-0">Status</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1"><b>@(ev.Status)</b></RadzenText>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow Size="12">
                <RadzenColumn Size="12" SizeMD="6">
                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-3 rz-mb-0">Start date</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1"><b>@(ev.StartDate.ToLocalTime().ToString(dateFormat))</b></RadzenText>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="6">
                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-3 rz-mb-0">Capacity</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1"><b>@(ev.SignedUpStudents)/@(ev.Capacity)</b></RadzenText>
                </RadzenColumn>
            </RadzenRow>
            <hr style="border: none; background-color: rgba(0,0,0,.2); height: 1px; margin: 1rem 0;"/>
        </RadzenCard>
    </Template>
</RadzenDataList>

@if (pageInitialized && totalElements != 0)
{
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
        <MudPagination Count="@totalPages" SelectedChanged="@SelectedPageChanged" Selected="@searchEventsModel.Pageable.Page"
                       Rectangular="true" ShowFirstButton="true" ShowLastButton="true"/>
    </RadzenStack>   
}

@code {
    private const string dateFormat = "dd/MM/yyyy HH:mm";
    
    private SearchEventsModel searchEventsModel = new()
    {
        Name = "",
        Organizer = "",
        Category = "",
        State = "",
        Friends = [],
        FriendsEngagementType = "",
        DateFrom = new DateTime(2024, 04, 14),
        DateTo = new DateTime(2024, 05, 31),
        Pageable = new PageableDto()
        {
            Page = 1,
            Size = 5,
            Sort = new SortDto()
            {
                SortBy = new List<string>() { "dateFrom" },
                Direction = "Ascending"
            }
        }
    };
    
    private bool pageInitialized = false;
    
    int totalPages = 0;
    int totalElements = 0;
    IEnumerable<EventDto> events;
    
    protected override async Task OnInitializedAsync()
    {
        var tmp = await EventsService.SearchEventsAsync(searchEventsModel.Name,
            searchEventsModel.Organizer, searchEventsModel.Category, searchEventsModel.State,
            searchEventsModel.Friends, searchEventsModel.FriendsEngagementType,
            searchEventsModel.DateFrom.ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
            searchEventsModel.DateTo.ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
            searchEventsModel.Pageable);
        if (tmp.Content != null)
        {
            totalPages = tmp.Content.TotalPages;
            totalElements = tmp.Content.TotalElements;
            events = tmp.Content.Content;
        }
        else
        {
            totalPages = 0;
            totalElements = 0;
            events = new List<EventDto>();
        }

        pageInitialized = true;
    }
    
    private async void SelectedPageChanged(int pageNumber)
    {
        searchEventsModel.Pageable.Page = pageNumber;
        
        var tmp = await EventsService.SearchEventsAsync(searchEventsModel.Name,
            searchEventsModel.Organizer, searchEventsModel.Category, searchEventsModel.State,
            searchEventsModel.Friends, searchEventsModel.FriendsEngagementType,
            searchEventsModel.DateFrom.ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
            searchEventsModel.DateTo.ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
            searchEventsModel.Pageable);
        events = tmp.Content.Content;
        StateHasChanged();
    }
    
    private async Task OpenSearchDialog()
    {
        await DialogService.OpenAsync<EventsSearchDialog>($"Filter all events by criteria:",
            new Dictionary<string, object>() { { "SearchEventsModel", searchEventsModel } },
            new DialogOptions()
            {
                Width = "700px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
        await OnInitializedAsync();
    }
}
