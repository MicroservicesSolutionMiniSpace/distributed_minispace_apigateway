@page "/events/search"
@using MiniSpace.Web.Areas.Identity
@using MiniSpace.Web.Areas.Events
@using MiniSpace.Web.Areas.Students
@using MiniSpace.Web.Components
@using MiniSpace.Web.DTO
@using MiniSpace.Web.DTO.Wrappers
@using MiniSpace.Web.Models.Events
@using MiniSpace.Web.Models.Organizations
@using MiniSpace.Web.Pages.Events.Dialogs
@using MudBlazor
@using Radzen
@using DialogOptions = Radzen.DialogOptions
@using DialogService = Radzen.DialogService
@using Orientation = Radzen.Orientation
@using System.Globalization
@using MiniSpace.Web.Pages.Friends.Dialogs
@using AlignItems = Radzen.AlignItems
@using Variant = Radzen.Variant
@inject DialogService DialogService
@inject IEventsService EventsService
@inject IStudentsService StudentsService
@inject IIdentityService IdentityService
@inject NavigationManager NavigationManager


<div class="breadcrumbs-container">
    <MudBreadcrumbs Class="custom-breadcrumbs" Items="_items"></MudBreadcrumbs>
</div>

@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Search events", href: "/events/search", disabled: true, icon: Icons.Material.Filled.Event),
    };
}


<h1 class="rz-p-8 search-font">Search events</h1>

<RadzenStack Gap="1rem" class="rz-py-5 rz-mx-auto" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Style="max-width: 1080px">
    @if (IdentityService.IsAuthenticated)
    {
        <RadzenButton Text="Friends events" Click="@(() => OpenFriendsDialog())" Icon="search" class="separate-button search-button rz-ml-5"/>
        <RadzenButton Text="My events" Click="@(() => RedirectToFollowedEvents())" Icon="event" class="separate-button standard-button"/>
    }
    <RadzenButton Text="Advanced search" Click="@OpenSearchDialog" Icon="pageview" class="separate-button standard-button "/>
    <RadzenButton Text="Clear filters" Click="@(() => ClearFilters())" Icon="close" class="separate-button clear-button"/>
</RadzenStack>

@if (!pageInitialized)
{
    <div style="display: flex; justify-content: center; align-items: center;">
        <RadzenProgressBarCircular ShowValue="true" ProgressBarStyle="ProgressBarStyle.Light" 
                                   Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
            <Template>Loading...</Template>
        </RadzenProgressBarCircular>
    </div>
}

@if (pageInitialized && totalElements == 0)
{
    <h3 class="rz-p-12">No results found. Try to give us more general filtering criteria.</h3>
}

@if (pageInitialized && totalElements != 0)
{
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
        <MudPagination Count="@totalPages" SelectedChanged="@SelectedPageChanged"
                       Selected="@searchEventsModel.Pageable.Page"
                       Rectangular="true" ShowFirstButton="true" ShowLastButton="true"/>
    </RadzenStack>   
}

<div>
    <RadzenDataList AllowPaging="false" Data="@events" TItem="EventDto">
        <Template Context="ev">
            <RadzenEventCard Event="ev"/>
        </Template>
    </RadzenDataList>
</div>

@if (pageInitialized && totalElements != 0)
{
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
        <MudPagination Count="@totalPages" SelectedChanged="@SelectedPageChanged"
                       Selected="@searchEventsModel.Pageable.Page"
                       Rectangular="true" ShowFirstButton="true" ShowLastButton="true"/>
    </RadzenStack>   
}

<style>
    .search-font {
        font-family: Arial, sans-serif; /* Change this to your preferred font */
        font-size: 40px; /* Change this to your preferred font size */
        font-weight: bold; /* Change this to your preferred font weight */
    }
    
    .search-button{
        background-color: darkgreen !important;
    }
    
    .clear-button{
        background-color: darkred !important;
        margin-left: auto !important;
    }
    
    .standard-button {
         background-color: #14304f !important;
    }
    
    .separate-button {
        margin: 10px; 
        border: 1px solid #ccc; 
        border-radius: 5px; 
        padding: 12px;
        color: #333; 
        transition: background-color 0.3s ease; 
    }
    
    .separate-button:hover {
        background-color: #30445f; 
        color: #000; 
    }
    
</style>


@code {
    private bool pageInitialized = false;
    private int value = 1;
    int totalPages = 0;
    int totalElements = 0;
    IEnumerable<EventDto> events;
    private SearchEventsModel searchEventsModel = InitializeSearchModel();
    
    protected override async Task OnInitializedAsync()
    {
        var tmp = await EventsService.SearchEventsAsync(searchEventsModel.Name, searchEventsModel.Organizer,
            searchEventsModel.Organization.Id, searchEventsModel.Organization.RootId, searchEventsModel.Category,
            searchEventsModel.State, searchEventsModel.Friends, searchEventsModel.FriendsEngagementType,
            searchEventsModel.DateFrom.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
            searchEventsModel.DateTo.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
            searchEventsModel.Pageable);
        if (tmp.Content != null)
        {
            totalPages = tmp.Content.TotalPages;
            totalElements = tmp.Content.TotalElements;
            events = tmp.Content.Content;
        }
        else
        {
            totalPages = 0;
            totalElements = 0;
            events = new List<EventDto>();
        }

        pageInitialized = true;
    }

    private static SearchEventsModel InitializeSearchModel()
    {
        return new()
        {
            Name = "",
            Organizer = "",
            Organization = new OrganizationModel(),
            Category = "",
            State = "",
            Friends = [],
            FriendsEngagementType = "",
            DateFrom = DateTime.Now.AddDays(-7),
            DateTo = DateTime.Now.AddDays(30),
            Pageable = new PageableDto()
            {
                Page = 1,
                Size = 5,
                Sort = new SortDto()
                {
                    SortBy = new List<string>() {"startDate", "name"},
                    Direction = "asc"
                }
            }
        };
    }
    
    private async void SelectedPageChanged(int pageNumber)
    {
        searchEventsModel.Pageable.Page = pageNumber;
        
        var tmp = await EventsService.SearchEventsAsync(searchEventsModel.Name, searchEventsModel.Organizer,
            searchEventsModel.Organization.Id, searchEventsModel.Organization.RootId, searchEventsModel.Category,
            searchEventsModel.State, searchEventsModel.Friends, searchEventsModel.FriendsEngagementType,
            searchEventsModel.DateFrom.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
            searchEventsModel.DateTo.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
            searchEventsModel.Pageable);
        events = tmp.Content.Content;
        StateHasChanged();
    }
    
    private async Task OpenSearchDialog()
    {
        await DialogService.OpenAsync<EventsSearchDialog>($"Filter all events by criteria:",
            new Dictionary<string, object>() { { "SearchEventsModel", searchEventsModel } },
            new DialogOptions()
            {
                Width = "800px", Height = "650px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
        await OnInitializedAsync();
    }
    
    private async Task OpenFriendsDialog()
    {
        var result = await DialogService.OpenAsync<FriendsDialog>($"Filter events by friends",
            null, new DialogOptions() { Width = "700px", Height = "512px", Resizable = true, Draggable = true });
        searchEventsModel.Friends = result;
        await OnInitializedAsync();
    }
    
    private Task RedirectToFollowedEvents()
    {
        NavigationManager.NavigateTo("/events/follow");
        return Task.CompletedTask;
    }
    
    private async Task ClearFilters()
    {
        searchEventsModel = InitializeSearchModel();
        await OnInitializedAsync();
    }
    
}
