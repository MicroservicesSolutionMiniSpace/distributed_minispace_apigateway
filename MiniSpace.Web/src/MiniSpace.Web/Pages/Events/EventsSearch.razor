@page "/events/search"
@using MiniSpace.Web.Areas.Identity
@using MiniSpace.Web.Areas.Events
@using MiniSpace.Web.Areas.Students
@using MiniSpace.Web.Components
@using MiniSpace.Web.DTO
@using MiniSpace.Web.DTO.Wrappers
@using MiniSpace.Web.Models.Events
@using MiniSpace.Web.Models.Organizations
@using MiniSpace.Web.Pages.Events.Dialogs
@using MudBlazor
@using Radzen
@using DialogOptions = Radzen.DialogOptions
@using DialogService = Radzen.DialogService
@using Orientation = Radzen.Orientation
@using System.Globalization
@using Variant = Radzen.Variant
@inject DialogService DialogService
@inject IEventsService EventsService
@inject IStudentsService StudentsService
@inject NavigationManager NavigationManager

<h1>Search events</h1>

<div class="rz-p-8 rz-text-align-center">
    <RadzenButton Size="ButtonSize.Medium" Text="Filter by criteria" Click="@OpenSearchDialog"/>
</div>

@if (!pageInitialized)
{
    <h3 class="rz-p-12">Loading...</h3>
}

@if (pageInitialized && totalElements == 0)
{
    <h3 class="rz-p-12">No results found. Try to give us more general filtering criteria.</h3>
}

@if (pageInitialized && totalElements != 0)
{
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
        <MudPagination Count="@totalPages" SelectedChanged="@SelectedPageChanged"
                       Selected="@searchEventsModel.Pageable.Page"
                       Rectangular="true" ShowFirstButton="true" ShowLastButton="true"/>
    </RadzenStack>   
}

<div>
    <RadzenDataList AllowPaging="false" Data="@events" TItem="EventDto">
        <Template Context="ev">
            <RadzenCard Class="@(ev.Status == "Archived" ? "archived-event rz-mx-auto" : "rz-mx-auto")" Style="max-width: 1080px; border-radius: 15px; overflow: hidden; box-shadow: 0 6px 10px rgba(0, 0, 0, 0.1);">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" Class="rz-p-4">
                    <RadzenStack Gap="0">
                        <RadzenText TextStyle="TextStyle.Overline" Class="rz-display-flex rz-mt-2 rz-my-0">Event name</RadzenText>
                        <RadzenText TextStyle="TextStyle.H4" Class="@($"rz-font-weight-bold rz-mb-4 rz-text-align-left {GetFontSizeClass(ev.Name)}")">@ev.Name</RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" Class="rz-display-flex rz-mt-2 rz-my-0">Organization</RadzenText>
                        <RadzenText TextStyle="TextStyle.H6" Class="rz-font-weight-bold rz-text-align-left">@ev.Organizer.OrganizationName</RadzenText>
                    </RadzenStack>
                </RadzenStack>
                <RadzenCard Class="gradient-background rz-shadow-0 rz-border-radius-5 rz-p-8" Style="margin: 1rem calc(-1 * var(--rz-card-padding)); border-radius: 0;">
                    <RadzenRow RowGap="0">
                        <RadzenColumn SizeSM="6">
                            <RadzenText TextStyle="TextStyle.Overline" Class="rz-color-on-secondary-light rz-display-flex rz-mt-4 rz-mb-0">Start date</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" Class="rz-color-on-secondary-light rz-font-weight-bold">@ev.StartDate.ToString("g", CultureInfo.InvariantCulture)</RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" Class="rz-color-on-secondary-light rz-display-flex rz-mt-4 rz-mb-0">Location</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" Class="rz-color-on-secondary-light rz-font-weight-bold">@ev.Location?.BuildingName</RadzenText>
                        </RadzenColumn>
                        <RadzenColumn SizeSM="6">
                            <RadzenText TextStyle="TextStyle.Overline" Class="rz-color-on-secondary-light rz-display-flex rz-mt-4 rz-mb-0">End date</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" Class="rz-color-on-secondary-light rz-font-weight-bold">@ev.EndDate.ToString("g", CultureInfo.InvariantCulture)</RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" Class="rz-color-on-secondary-light rz-display-flex rz-mt-4 rz-mb-0">Fee</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" Class="rz-color-on-secondary-light rz-font-weight-bold">@String.Format(new System.Globalization.CultureInfo("pl-PL"), "{0:C}", ev?.Fee)</RadzenText>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenCard>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem" Class="rz-p-4 rz-border-top">
                    <RadzenButton Variant="Variant.Text" Class="rz-text-secondary-color" Text="Cancel" />
                    <RadzenButton Variant="Variant.Text" Text="Send" Class="rz-text-primary-color" />
                </RadzenStack>
            </RadzenCard>
        </Template>
    </RadzenDataList>
</div>

@if (pageInitialized && totalElements != 0)
{
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
        <MudPagination Count="@totalPages" SelectedChanged="@SelectedPageChanged"
                       Selected="@searchEventsModel.Pageable.Page"
                       Rectangular="true" ShowFirstButton="true" ShowLastButton="true"/>
    </RadzenStack>   
}

<style>
    :root {
        --rz-card-padding: 10px;
    }

    .rz-datalist-data {
      border-radius: 15px;
    }
    
    .rz-g > div, .rz-datalist-data > li {
      padding: 0rem !important;
      border-radius: 15px;
    }
    
    .small-font {
        font-size: 1.35em;
    }
    
    .medium-font {
        font-size: 1.85em;
    }
    
    .large-font {
        font-size: 2.5em;
    }

    .gradient-background {
        background: linear-gradient(90deg, rgba(48,68,95,1) 0%, rgba(16,35,56,1) 100%);
    }
    
    .archived-event {
        border: 2px solid grey;
        opacity: 0.65;
    }

</style>

@code {
    private SearchEventsModel searchEventsModel = new()
    {
        Name = "",
        Organizer = "",
        Organization = new OrganizationModel(),
        Category = "",
        State = "",
        Friends = [],
        FriendsEngagementType = "",
        DateFrom = DateTime.Now.AddDays(-7),
        DateTo = DateTime.Now.AddDays(30),
        Pageable = new PageableDto()
        {
            Page = 1,
            Size = 5,
            Sort = new SortDto()
            {
                SortBy = new List<string>() { "name" },
                Direction = "des"
            }
        }
    };
    
    private bool pageInitialized = false;
    
    int totalPages = 0;
    int totalElements = 0;
    IEnumerable<EventDto> events;
    
    protected override async Task OnInitializedAsync()
    {
        var tmp = await EventsService.SearchEventsAsync(searchEventsModel.Name, searchEventsModel.Organizer,
            searchEventsModel.Organization.Id, searchEventsModel.Organization.RootId, searchEventsModel.Category,
            searchEventsModel.State, searchEventsModel.Friends, searchEventsModel.FriendsEngagementType,
            searchEventsModel.DateFrom.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
            searchEventsModel.DateTo.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
            searchEventsModel.Pageable);
        if (tmp.Content != null)
        {
            totalPages = tmp.Content.TotalPages;
            totalElements = tmp.Content.TotalElements;
            events = tmp.Content.Content;
        }
        else
        {
            totalPages = 0;
            totalElements = 0;
            events = new List<EventDto>();
        }

        pageInitialized = true;
    }
    
    private async void SelectedPageChanged(int pageNumber)
    {
        searchEventsModel.Pageable.Page = pageNumber;
        
        var tmp = await EventsService.SearchEventsAsync(searchEventsModel.Name, searchEventsModel.Organizer,
            searchEventsModel.Organization.Id, searchEventsModel.Organization.RootId, searchEventsModel.Category,
            searchEventsModel.State, searchEventsModel.Friends, searchEventsModel.FriendsEngagementType,
            searchEventsModel.DateFrom.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
            searchEventsModel.DateTo.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
            searchEventsModel.Pageable);
        events = tmp.Content.Content;
        StateHasChanged();
    }
    
    private async Task OpenSearchDialog()
    {
        await DialogService.OpenAsync<EventsSearchDialog>($"Filter all events by criteria:",
            new Dictionary<string, object>() { { "SearchEventsModel", searchEventsModel } },
            new DialogOptions()
            {
                Width = "800px", Height = "650px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
        await OnInitializedAsync();
    }
    
    private string GetFontSizeClass(string eventName)
    {
        if (eventName.Length <= 50)
        {
            return "large-font";
        }
        else if (eventName.Length <= 100)
        {
            return "medium-font";
        }
        else
        {
            return "small-font";
        }
    }
}
