@page "/events/search"
@using MiniSpace.Web.Areas.Identity
@using MiniSpace.Web.Areas.Events
@using MiniSpace.Web.DTO
@using MiniSpace.Web.DTO.Wrappers
@using MiniSpace.Web.Models.Events
@using MiniSpace.Web.Pages.Dialogs
@using Radzen
@using DialogOptions = Radzen.DialogOptions
@using DialogService = Radzen.DialogService
@inject DialogService DialogService
@inject IIdentityService IdentityService
@inject IEventsService EventsService
@inject NavigationManager NavigationManager

<h1>Search events</h1>

<div class="rz-p-12 rz-text-align-center">
    <RadzenButton Size="ButtonSize.Large" Text="Filter" Click="@OpenSearchDialog"/>
</div>

@if (count == 0)
{
    <h3>No results found. Try to give us more general filter rules.</h3>
}

<RadzenDataList WrapItems="true" AllowPaging="false" Data="@events" TItem="EventDto">
    <Template Context="ev">
        <RadzenCard Style="width: 500px; ">
            <RadzenRow Size="12">
                <RadzenColumn Size="4">
                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-1 rz-my-0">Name</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1"><b>@(ev.Name)</b></RadzenText>
                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-3 rz-my-0">Organizer</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1"><b>@(ev.Organizer.Name)</b></RadzenText>
                </RadzenColumn>
                <RadzenColumn Size="4">
                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-1 rz-mb-0">Category</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1"><b>@(ev.Category)</b></RadzenText>
                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-3 rz-mb-0">Fee</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1"><b>@(ev.Fee)</b></RadzenText>
                </RadzenColumn>
                <RadzenColumn Size="4">
                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-1 rz-my-0">Description</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1"><b>@(ev.Description)</b></RadzenText>
                    <RadzenButton Size="ButtonSize.Small" Text="See event" class="rz-mt-4 rz-my-0"
                                  ButtonStyle="ButtonStyle.Secondary"
                                  Click="@(() => OpenEventDetailsDialog(ev))"/>
                </RadzenColumn>
            </RadzenRow>
            <hr style="border: none; background-color: rgba(0,0,0,.2); height: 1px; margin: 1rem 0;" />
        </RadzenCard>
    </Template>
</RadzenDataList>

<RadzenPager ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" HorizontalAlign="HorizontalAlign.Right"
             Count="count" PageSize="@searchEventsModel.Pageable.Size" PageNumbersCount="5" PageChanged="@PageChanged" />

@code {
    
    private SearchEventsModel searchEventsModel = new()
    {
        Name = "",
        Organizer = "",
        DateFrom = DateTime.Today,
        DateTo = new DateTime(2024, 12, 31),
        Pageable = new PageableDto()
        {
            Page = 1,
            Size = 6,
            Sort = new SortDto()
            {
                SortBy = new List<string>() { "dateFrom" },
                Direction = "Ascending"
            }
        }
    };
    
    private bool showError = false;
    private bool popup;
    private int publishInfo = 1;
    
    string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";
    int count = 0;
    IEnumerable<EventDto> events;
    
    
    protected override async Task OnInitializedAsync()
    {
        var tmp = await EventsService.SearchEventsAsync(searchEventsModel.Name, searchEventsModel.Organizer,
            searchEventsModel.DateFrom.ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
            searchEventsModel.DateTo.ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
            searchEventsModel.Pageable);
        //WriteSendDataOnConsole(searchEventsModel);
        if (tmp != null)
        {
            count = tmp.TotalElements;
            events = tmp.Content;   
        }
        else
        {
            count = 0;
            events = new List<EventDto>();
        }
    }

    private async void PageChanged(PagerEventArgs args)
    {
        searchEventsModel.Pageable.Page = args.PageIndex + 1;
        
        var tmp = await EventsService.SearchEventsAsync(searchEventsModel.Name, searchEventsModel.Organizer,
            searchEventsModel.DateFrom.ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
            searchEventsModel.DateTo.ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
            searchEventsModel.Pageable);
        //WriteSendDataOnConsole(searchEventsModel);
        events = tmp.Content;
    }
    
    private async Task OpenSearchDialog()
    {
        await DialogService.OpenAsync<EventsSearchDialog>($"Filter results of searching:",
            new Dictionary<string, object>() { { "SearchEventsModel", searchEventsModel } },
            new DialogOptions() { Width = "700px", Resizable = true, Draggable = true });
        await OnInitializedAsync();
    }

    private async Task OpenEventDetailsDialog(EventDto eventDto)
    {
        await DialogService.OpenAsync<EventDetailsDialog>($"Details of the event:",
            new Dictionary<string, object>() { { "EventDto", eventDto } },
            new DialogOptions() { Width = "700px", Height = "600px", Resizable = true, Draggable = true });
    }
    
    private static void WriteSendDataOnConsole(SearchEventsModel model)
    {
        Console.WriteLine();
        Console.WriteLine("Search events updated with the following data:");
        Console.WriteLine($"Name: {model.Name}");
        Console.WriteLine($"Organizer: {model.Organizer}");
        Console.WriteLine($"DateFrom: {model.DateFrom}");
        Console.WriteLine($"DateTo: {model.DateTo}");
        Console.WriteLine($"Pageable.Page: {model.Pageable.Page}");
        Console.WriteLine($"Pageable.Size: {model.Pageable.Size}");
        Console.WriteLine($"Pageable.Sort.Direction: {model.Pageable.Sort.Direction}");
        Console.WriteLine();
    }
}
