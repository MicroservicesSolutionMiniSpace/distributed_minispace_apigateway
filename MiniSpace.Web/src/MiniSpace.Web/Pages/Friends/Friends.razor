@page "/friends"
@using Radzen.Blazor
@inject NavigationManager NavigationManager
@using MiniSpace.Web.Areas.Friends
@inject IFriendsService FriendsService

@using MiniSpace.Web.DTO

<div class="container mt-4 mx-5" style="width: 1000px;">
    <div class="search-bar" style="display: flex; flex-direction: row;">
        <RadzenTextBox @bind-Value="searchTerm" Placeholder="Search friends..." Style="width: 75%;" />
        <RadzenButton Text="Search" Click="@SearchFriends" ButtonStyle="Radzen.ButtonStyle.Secondary" Icon="search" Style="margin-left: 10px; width: 23%;" />
    </div>



        <RadzenGrid Data="@students" TItem="StudentDto" PageSize="5" Style="margin-top: 20px;">
            <Columns>
                <RadzenGridColumn TItem="StudentDto" Property="StudentId" Title="ID" Width="100px" />
                <RadzenGridColumn TItem="StudentDto" Property="FirstName" Title="First Name" />
                <RadzenGridColumn TItem="StudentDto" Property="LastName" Title="Last Name" />
                <RadzenGridColumn TItem="StudentDto" Property="Email" Title="Email" />
                <RadzenGridColumn TItem="StudentDto" Context="student">
                    <Template>
                        <RadzenButton Text="Details" Click="@(() => OnDetails(student))" ButtonStyle="Radzen.ButtonStyle.Primary" />
                    </Template>
                </RadzenGridColumn>
            </Columns>
        </RadzenGrid>


    <RadzenGrid Data="@filteredFriends" TItem="Friend" AutoGenerateColumns="false" PageSize="5" Style="margin-top: 20px;">
        <Columns>
            <RadzenGridColumn TItem="Friend" Property="Name" Title="Name" Width="auto" />
            <RadzenGridColumn TItem="Friend" Width="auto">
                <Template Context="friend">
                    <div class="friend-actions">
                        <RadzenButton Text="Details" Click="@(() => ViewFriendDetails(friend))" ButtonStyle="Radzen.ButtonStyle.Info" Icon="info" Style="margin-right: 10px;" />
                        <RadzenButton Text="Remove" Click="@(() => RemoveFriend(friend))" ButtonStyle="Radzen.ButtonStyle.Danger" Icon="delete" />
                    </div>
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>


    <RadzenButton Text="Add Friend" Click="@AddFriend" ButtonStyle="Radzen.ButtonStyle.Success" Icon="add" Style="margin-top: 20px; width:100%;" />
</div>

<style>
    .search-bar {
        display: flex;
        flex-direction: column;
    }

    .friend-actions {
        display: flex;
        justify-content: space-between;
    }

    @* @media (min-width: 768px) {
        .search-bar {
            flex-direction: row;
            align-items: center;
        }

        .search-bar > * {
            flex: 1;
        }
    } *@

    .card-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-around;
        margin-top: 2rem;
    }

    .card {
        width: 18rem;
        margin: 1rem;
        min-height: 400px;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
        transition: 0.3s;
    }

    .card:hover {
        box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
    }

    .card-img-top {
        width: 100%;
        height: 180px;
        object-fit: cover;
    }

    .card-body {
        padding: 2px 16px;
    }

    .card-title {
        font-size: 20px;
        margin-bottom: 5px;
    }

    .card-text {
        font-size: 16px;
    }
</style>

@code {
    private string searchTerm;
    private List<Friend> friends = new List<Friend>();
    private IEnumerable<Friend> filteredFriends => friends.Where(f => f.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
    private IEnumerable<StudentDto> students;

    protected override async Task OnInitializedAsync()
    {
        await LoadStudents();
    }

    private async Task LoadStudents()
    {
        var result = await FriendsService.GetAllStudentsAsync();
        if (result != null && result.Any())
        {
            students = result;
            StateHasChanged(); 
        }
        else 
        {
            Console.WriteLine("No students available.");
        }
    }

    private void ViewFriendDetails(Friend friend)
    {
        NavigationManager.NavigateTo($"/friend/{friend.Id}");
    }

    private void SearchFriends()
    {
        // Refresh the list based on the search term
    }

    private void AddFriend()
    {
        NavigationManager.NavigateTo("/add-friend");
    }


    private void OnDetails(StudentDto student)
    {
        // Navigate to the student details page or display the details in some way
        NavigationManager.NavigateTo($"/student-details/{student.Id}");
    }


    private void RemoveFriend(Friend friend)
    {
        friends.Remove(friend);
    }

    public class Friend
    {
        public Guid Id { get; set; }
        public string Name { get; set; }
    }
}
