@page "/friends"
@using Radzen.Blazor
@inject NavigationManager NavigationManager
@using MiniSpace.Web.Areas.Friends
@inject IFriendsService FriendsService

@using MiniSpace.Web.DTO

<div class="container mt-4 mx-5" style="width: 1000px;">
    <div class="search-bar" style="display: flex; flex-direction: row;">
        <RadzenTextBox @bind-Value="searchTerm" Placeholder="Search friends..." Style="width: 75%;" />
        <RadzenButton Text="Search" Click="@SearchFriends" ButtonStyle="Radzen.ButtonStyle.Primary" Icon="search" Style="margin-left: 10px; width: 23%;" />
    </div>

     <div>
        <RadzenButton Text="Load Students" Click="@LoadStudents" ButtonStyle="Radzen.ButtonStyle.Secondary" Icon="school" Style="margin-top: 20px;" />
        <RadzenGrid Data="@students" TItem="StudentDto" AutoGenerateColumns="true" PageSize="5" Style="margin-top: 20px;">
            <!-- Columns can be customized as needed -->
        </RadzenGrid>
    </div>

    <RadzenGrid Data="@filteredFriends" TItem="Friend" AutoGenerateColumns="false" PageSize="5" Style="margin-top: 20px;">
        <Columns>
            <RadzenGridColumn TItem="Friend" Property="Name" Title="Name" Width="auto" />
            <RadzenGridColumn TItem="Friend" Width="auto">
                <Template Context="friend">
                    <div class="friend-actions">
                        <RadzenButton Text="Details" Click="@(() => ViewFriendDetails(friend))" ButtonStyle="Radzen.ButtonStyle.Info" Icon="info" Style="margin-right: 10px;" />
                        <RadzenButton Text="Remove" Click="@(() => RemoveFriend(friend))" ButtonStyle="Radzen.ButtonStyle.Danger" Icon="delete" />
                    </div>
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>


    <RadzenButton Text="Add Friend" Click="@AddFriend" ButtonStyle="Radzen.ButtonStyle.Success" Icon="add" Style="margin-top: 20px; width:100%;" />
</div>

<style>
    .search-bar {
        display: flex;
        flex-direction: column;
    }

    .friend-actions {
        display: flex;
        justify-content: space-between;
    }

    @* @media (min-width: 768px) {
        .search-bar {
            flex-direction: row;
            align-items: center;
        }

        .search-bar > * {
            flex: 1;
        }
    } *@
</style>

@code {
       private string searchTerm;
    private List<Friend> friends = new List<Friend>(); // This should be populated from your backend or service layer
    private IEnumerable<Friend> filteredFriends => friends.Where(f => f.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
    private IEnumerable<StudentDto> students; // To hold the list of students

    private async Task LoadStudents()
{
    try
    {
        var result = await FriendsService.GetAllStudentsAsync();
        if (result != null && result.Any())
        {
            students = result;
        }
        else
        {
            Console.WriteLine("No students found.");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Failed to load students: {ex.Message}");
    }
}


    private void ViewFriendDetails(Friend friend)
    {
        // Navigate to a detailed view of the friend or open a modal/dialog with more information
        NavigationManager.NavigateTo($"/friend/{friend.Id}");
    }

     private void SearchFriends()
    {
        // This method would ideally invoke a backend service to refresh the list based on the search term
    }

    private void AddFriend()
    {
        // Open a modal dialog to add a new friend, or navigate to a different page/form to handle new friend addition
        NavigationManager.NavigateTo("/add-friend");
    }

    private void RemoveFriend(Friend friend)
    {
        // Call a service to remove the friend from the database, then update the local list
        friends.Remove(friend);
    }

    public class Friend
    {
        public Guid Id { get; set; }
        public string Name { get; set; }
    }
}
