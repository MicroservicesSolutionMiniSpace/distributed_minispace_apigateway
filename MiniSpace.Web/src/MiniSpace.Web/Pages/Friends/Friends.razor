@page "/friends"
@using MiniSpace.Web.HttpClients
@using Radzen.Blazor
@using MiniSpace.Web.Areas.Friends
@using MiniSpace.Web.DTO;
@inject IIdentityService IdentityService
@inject IFriendsService FriendsService
@inject NavigationManager NavigationManager
@inject Radzen.NotificationService NotificationService
@inject Radzen.DialogService DialogService
@using MudBlazor

<div class="breadcrumbs-container">
    <MudBreadcrumbs Class="custom-breadcrumbs" Items="_items"></MudBreadcrumbs>
</div>
@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Friends", href: "/friends", icon: Icons.Material.Filled.People)
    };
}

<div style="display: flex; padding: 50px;">
    <div class="left-panel">
        <div class="search-bar">
            <RadzenTextBox @bind-Value="searchTerm" Placeholder="Search friends..." Style="width: 75%;" />
            <RadzenButton Text="Search" Click="@SearchFriends" ButtonStyle="Radzen.ButtonStyle.Secondary" Icon="search" Style="margin-left: 10px; width: 23%;" />
        </div>
        <div class="card-container">
            @if (friends != null && friends.Any())
            {
                foreach (var friend in friends)
                {
                    <div class="friend-card">
                        <img src="@GetImage(friend.StudentDetails.ProfileImage)" alt="Friend Image" class="friend-img">
                        <div class="friend-info">
                            <h5>@friend.StudentDetails.FirstName @friend.StudentDetails.LastName</h5>
                            <p>@friend.StudentDetails.Email</p>
                            <div class="buttons">
                                <RadzenButton ButtonStyle="Radzen.ButtonStyle.Secondary" Text="Details" Click="@(() => ViewDetails(friend.FriendId))" Style="margin-right: 10px;" />
                                <RadzenButton Text="Remove" Click="@(() => ConfirmRemoveFriend(friend.StudentDetails.Id))" ButtonStyle="Radzen.ButtonStyle.Danger" />
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <p>No friends to show. Start connecting now!</p>
            }
        </div>
    </div>
</div>

<style>
    .left-panel {
        width: 100%;
        overflow-y: auto;
    }

    .search-bar {
        display: flex;
        margin-bottom: 20px;
    }

    .card-container {
        display: flex;
        flex-direction: column;
    }

    .friend-card {
        display: flex;
        background-color: #ffffff;
        margin-bottom: 1rem !important;
        border: 1px solid #ddd;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        transition: all 0.3s;
        cursor: pointer;
        align-items: center;
        padding: 20px;
        border-radius: 8px;
    }

    .friend-card:hover {
        box-shadow: 0 5px 15px rgba(0,0,0,0.15);
    }

    .friend-img {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        margin-right: 20px;
        object-fit: cover;
        border: 3px solid #007BFF; 
    }

    .friend-info {
        flex: 1;
    }
</style>

@code {
    private List<FriendDto> friends;
    private string searchTerm;

    protected override async Task OnInitializedAsync()
    {
        await LoadFriends();
    }

    private async Task LoadFriends()
    {
        var currentUserId = IdentityService.GetCurrentUserId();
        var result = await FriendsService.GetAllFriendsAsync(currentUserId);
        friends = result.ToList();
    }

    private void SearchFriends()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            LoadFriends().Wait();
        }
        else
        {
            friends = friends.Where(f => f.StudentDetails.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) 
                                      || f.StudentDetails.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        StateHasChanged();
    }

    private string GetImage(string base64Image)
    {
        if (string.IsNullOrWhiteSpace(base64Image))
        {
            return "images/user_default.png";
        }
        return $"data:image/jpeg;base64,{base64Image}";
    }

    private async Task ConfirmRemoveFriend(string friendId)
    {
        var confirm = await DialogService.Confirm("Are you sure you want to remove this friend?", "Confirm Removal", new Radzen.ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (confirm.HasValue && confirm.Value)
        {
            await RemoveFriend(Guid.Parse(friendId));
        }
    }

    private async Task RemoveFriend(Guid friendId)
    {
        await FriendsService.RemoveFriendAsync(friendId);
        friends.RemoveAll(f => f.StudentId == friendId);
        NotificationService.Notify(Radzen.NotificationSeverity.Warning, "Friend Removed", $"You have removed a friend.", 5000);
        StateHasChanged();
    }

    private void ViewDetails(string friendId)
    {
        NavigationManager.NavigateTo($"/student-details/{friendId}");
    }
}
