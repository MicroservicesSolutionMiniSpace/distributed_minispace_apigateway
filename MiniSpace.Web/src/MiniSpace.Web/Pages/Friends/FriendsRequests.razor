@page "/friends/requests"
@using MiniSpace.Web.HttpClients
@using Radzen.Blazor
@inject NavigationManager NavigationManager
@using MiniSpace.Web.Areas.Friends
@inject IFriendsService FriendsService
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Areas.Identity
@using MiniSpace.Services.Friends.Application.Dto;
@inject IIdentityService IdentityService
@inject Radzen.NotificationService NotificationService
@using MudBlazor

<div class="breadcrumbs-container">
    <MudBreadcrumbs Class="custom-breadcrumbs" Items="_items"></MudBreadcrumbs>
</div>
@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Search", href: "/friends/search", icon: Icons.Material.Filled.Create),
        new BreadcrumbItem("Requests", href: "/friends", disabled: true, icon: Icons.Material.Filled.VideoLibrary),
    };
}
<h3>Incoming Friend Requests</h3>

@if (incomingRequests == null)
{
    <p>Loading...</p>
}
else if (incomingRequests.Any())
{
    <RadzenDataGrid Data="@incomingRequests" TItem="FriendRequestDto" AllowSorting="true" AllowPaging="true" PageSize="5">
        <Columns>
            <RadzenDataGridColumn TItem="FriendRequestDto" Property="InviterName" Title="Inviter Name" />
            <RadzenDataGridColumn TItem="FriendRequestDto" Property="RequestedAt" Title="Requested On" FormatString="{0:yyyy-MM-dd}" />
            <RadzenDataGridColumn TItem="FriendRequestDto" Property="State" Title="Status" />
            <RadzenDataGridColumn TItem="FriendRequestDto" Context="request">
                <Template>
                    <RadzenButton Text="Accept" Click="@(() => AcceptRequest(request.Id))" Style="margin-right: 10px;" />
                    <RadzenButton Text="Decline" Click="@(() => DeclineRequest(request.Id))" ButtonStyle="Radzen.ButtonStyle.Danger" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{
    <p>No incoming requests.</p>
}

@code {
    private IEnumerable<FriendRequestDto> incomingRequests;

    protected override async Task OnInitializedAsync()
    {
        incomingRequests = await FriendsService.GetIncomingFriendRequestsAsync();
    }

    private async Task AcceptRequest(Guid requestId)
    {
        var request = incomingRequests.FirstOrDefault(r => r.Id == requestId);
        if (request != null)
        {
            await FriendsService.AcceptFriendRequestAsync(request.Id, request.InviterId, request.InviteeId);
            incomingRequests = incomingRequests.Where(r => r.Id != requestId).ToList();
            NotificationService.Notify(Radzen.NotificationSeverity.Success, "Request Accepted", duration: 4000);
            StateHasChanged(); // Refresh the UI
        }
    }

    private async Task DeclineRequest(Guid requestId)
    {
        var request = incomingRequests.FirstOrDefault(r => r.Id == requestId);
        if (request != null)
        {
            await FriendsService.DeclineFriendRequestAsync(request.Id, request.InviterId, request.InviteeId);
            incomingRequests = incomingRequests.Where(r => r.Id != requestId).ToList();
            NotificationService.Notify(Radzen.NotificationSeverity.Warning, "Request Declined", duration: 4000);
            StateHasChanged(); // Update the UI
        }
    }

}
