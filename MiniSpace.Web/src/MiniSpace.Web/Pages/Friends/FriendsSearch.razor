@page "/friends/search"
@using MiniSpace.Web.HttpClients
@using Radzen.Blazor
@inject NavigationManager NavigationManager
@using MiniSpace.Web.Areas.Friends
@inject IFriendsService FriendsService
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Areas.Identity
@inject IIdentityService IdentityService
@inject Radzen.NotificationService NotificationService
@inject IJSRuntime JSRuntime


<div style="display: flex; padding: 50px;">
    <div class="left-panel">
        <div class="search-bar">
            <RadzenTextBox @bind-Value="searchTerm" Placeholder="Search friends..." Style="width: 75%;" />
            <RadzenButton Text="Search" Click="@SearchFriends" ButtonStyle="Radzen.ButtonStyle.Secondary" Icon="search" Style="margin-left: 10px; width: 23%;" />
        </div>
        <div class="card-container">
            @foreach (var student in students)
            {
                 <div class="friend-card" @onclick="@(() => OnDetails(student))">
                    <img src="@GetImage(student.ProfileImage)" alt="Student Image" class="friend-img">
                    <div class="friend-info">
                        <h5>@student.FirstName @student.LastName</h5>
                        <p>Email: @student.Email</p>
                        <div class="buttons">
                            <RadzenButton Text="Connect" Disabled="@student.IsInvitationPending" 
                                Click="@(e => ConnectWithStudent(student.Id, e))" 
                                ButtonStyle="Radzen.ButtonStyle.Secondary" 
                                Style="width: 100%; margin-top: 8px;" />
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
   
    <div class="right-panel">
          
            @if (student != null)
            {
                <div class="notification-block">
                <RadzenNotification @ref="notificationComponent" Style="position:sticky; top: 10px; right: 20px;" />
                </div>
                <div class="student-details">
                   
                   <div>
                    <img src="@student?.ProfileImage" alt="Profile Image" class="profile-image"/>
                    <div class="info-block">
                        <h3 class="name">@student?.FirstName @student?.LastName</h3>
                        <ul class="details-list">
                            <li><strong>ID:</strong> @student?.Id</li>
                            <li><strong>Email:</strong> @student?.Email</li>
                            <li><strong>Description:</strong> @student?.Description</li>
                            <li><strong>Number of Friends:</strong> @student?.NumberOfFriends</li>
                            <li><strong>Date of Birth:</strong> @student?.DateOfBirth.ToString("yyyy-MM-dd")</li>
                            <li><strong>State:</strong> @student?.State</li>
                            <li><strong>Created At:</strong> @student?.CreatedAt.ToString("yyyy-MM-dd")</li>
                        </ul>
                        <RadzenButton Text="Connect" Click="@(() => ConnectWithStudent(student.Id))" ButtonStyle="Radzen.ButtonStyle.Secondary" Style="margin-top: 10px;" />
                     </div>
                    
                   </div> 
                </div>
            }
            else
            {
                <div class="no-details">
                    <p>Select a student to view details.</p>
                </div>
            }
        </div>
    </div>

    <div class="pagination-controls">
        <button disabled="@currentPage == 1" @onclick="() => SetPage(1)">First</button>
        <button disabled="@currentPage == 1" @onclick="() => SetPage(currentPage - 1)">Previous</button>
        <span>Page @currentPage</span>
        <button disabled="@currentPage * pageSize >= totalStudents" @onclick="() => SetPage(currentPage + 1)">Next</button>
        <button disabled="@currentPage * pageSize >= totalStudents" @onclick="() => SetPage((totalStudents + pageSize - 1) / pageSize)">Last</button>
    </div>



<style>

    .notification-block {
        position: fixed; 
        top: 20px;
        right: 20px;
        z-index: 1050;
        max-width: 300px;
    }

    .main-container { 
        overflow: visible; 
        display: flex;   
        align-items: 
        flex-start; 
    }

    .left-panel {  
        width: 100%;   
        overflow-y: auto; 
    }
    @* .right-panel { width: 100%; padding: 50px; position: sticky; top: 50px;overflow-y: auto; } *@

    .right-panel {
        width: 70%; 
        padding: 25px;
        position: sticky;
        top: 100px; 
        background-color: white; 
    }
    .search-bar {
        display: flex; 
        margin-bottom: 20px; 
        }
    
    .card-container {
        display: flex;
        flex-direction: column;
    }

    .friend-card {
        display: flex;
        background-color: #ffffff;
        margin-bottom: 1rem !important;
        border: 1px solid #ddd;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        transition: all 0.3s;
        cursor: pointer;
        align-items: center;
        padding: 20px;
        border-radius: 8px;
    }

    .friend-card:hover {
        box-shadow: 0 5px 15px rgba(0,0,0,0.15);
    }

    .friend-img {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        margin-right: 20px;
        object-fit: cover;
        border: 3px solid #007BFF; 
    }

    .friend-info {
        flex: 1;
    }

    .search-bar input:focus {
        outline: none;
        border: 2px solid #0056b3;
        box-shadow: 0 0 5px rgba(0, 86, 179, 0.5);
    }

    .pagination-controls {
        margin-top: 20px;
        display: flex;
        justify-content: center;
    }

    .pagination-controls button {
        padding: 8px 16px;
        margin-right: 5px;
        background-color: #007BFF;
        color: white;
        border: none;
        border-radius: 5px;
    }

    .pagination-controls button:disabled {
        background-color: #ccc;
    }

</style>

@code {
    private string searchTerm;
    private List<StudentDto> students = new List<StudentDto>();
    private StudentDto student;
    RadzenNotification notificationComponent;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalStudents;

    protected override async Task OnInitializedAsync() {
        await LoadStudents();
    }

    private async Task LoadStudents() {
        var result = await FriendsService.GetAllStudentsAsync(currentPage, pageSize);
        totalStudents = result.Count();
        if (result != null) {
            students = result.ToList();
        }
    }

    private string GetImage(string base64Image)
    {
        if (string.IsNullOrWhiteSpace(base64Image))
        {
            return "images/user_image.png";
        }
        else
        {
            return $"data:image/jpeg;base64,{base64Image}";
        }
    }


    private void OnDetails(StudentDto selectedStudent) {
        student = selectedStudent;
    }

    private void SearchFriends() {
        students = students.Where(s => s.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                       s.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private async Task ConnectWithStudent(Guid studentId)
    {
        var response = await FriendsService.AddFriendAsync(studentId);
        
    }

     private async Task ConnectWithStudent(Guid studentId, MouseEventArgs e) {
        var currentUserId = IdentityService.GetCurrentUserId();
        await FriendsService.InviteStudent(currentUserId, studentId);

         var student = students.FirstOrDefault(s => s.Id == studentId);
        if (student != null)
        {
            student.InvitationSent = true;
        }
        NotificationService.Notify(Radzen.NotificationSeverity.Success, "Invitation Sent", "The invitation has been successfully sent.", 10000);
        await JSRuntime.InvokeVoidAsync("playNotificationSound");
    }

    private async Task SetPage(int page) {
        currentPage = page;
        await LoadStudents();
    }





}
