@page "/home"
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Areas.Posts
@using MiniSpace.Web.Data.Posts
@using MiniSpace.Web.Components
@using MiniSpace.Web.DTO.Wrappers
@using Radzen
@using System.Globalization
@inject NavigationManager NavigationManager
@inject IIdentityService IdentityService
@inject IPostsService PostsService

<h1 class="rz-p-8 search-font">Discover What's New</h1>

@if (pageInitialized)
{
    @if (posts.Any())
    {
        <RadzenStack>
            <RadzenDataList PageSize="6" AllowPaging="true" Data="@posts" TItem="PostDto">
                <Template Context="post">
                    <RadzenHomePostCard Post="post"></RadzenHomePostCard>
                </Template>
            </RadzenDataList>
        </RadzenStack>
    }
    else
    {
        <h1 class="rz-p-8">Please join an event first</h1>
    }
}

<style>
    .search-font {
        font-family: Arial, sans-serif; /* Change this to your preferred font */
        font-size: 40px; /* Change this to your preferred font size */
        font-weight: bold; /* Change this to your preferred font weight */
    }
</style>


@code {
    private IEnumerable<PostDto> posts;
    private Guid studentId;
    private bool pageInitialized = false;
    private SearchPosts searchModel;
    
    protected override async Task OnInitializedAsync()
    {
        if (IdentityService != null && IdentityService.IsAuthenticated)
        {
            studentId = IdentityService.GetCurrentUserId();
            searchModel = InitializeSearchModel(studentId);
            var result = await PostsService.SearchPostsAsync(searchModel);
            posts = result.Content.Content;
            pageInitialized = true;
        }
        else
        {
            NavigationManager.NavigateTo("");

        }
    }
    
    private static SearchPosts InitializeSearchModel(Guid studentId)
    {
        return new()
        {
            StudentId = studentId,
            Pageable = new PageableDto()
            {
                Page = 1,
                Size = 5,
                Sort = new SortDto()
                {
                    SortBy = new List<string>() {"publishDate"},
                    Direction = "des"
                }
            }
        };
    }
}
