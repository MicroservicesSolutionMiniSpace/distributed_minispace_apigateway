@page "/events/{EventId}/posts/{PostId}/author/{AuthorName}"
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Areas.Posts
@using MiniSpace.Web.Pages.Posts.Dialogs
@using MiniSpace.Web.Areas.Reactions
@using MiniSpace.Web.Pages.Reports.Dialogs
@using MiniSpace.Web.DTO.Enums
@using MiniSpace.Web.Models.Reports
@using MiniSpace.Web.Pages.Comments
@using Radzen
@using AlignItems = Radzen.AlignItems
@using DialogOptions = Radzen.DialogOptions
@using DialogService = Radzen.DialogService
@using Orientation = Radzen.Orientation
@inject DialogService DialogService
@inject IIdentityService IdentityService
@inject IPostsService PostsService
@inject IReactionsService ReactionsService
@inject NavigationManager NavigationManager

@if (!pageInitialized)
{
    <h3 class="rz-p-12">Loading...</h3>
}

@if (pageInitialized)
{
    <RadzenStack class="rz-pt-6" Gap="1rem" Style="height: 100%">
        <RadzenCard Class="rz-my-12 rz-mx-md-12 rz-border-radius-3">
            <RadzenRow Gap="0.5rem">
                <RadzenColumn Size="12" class="rz-text-truncate">
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
                        <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: dodgerblue"
                                    Text=@($"{AuthorName}")/>
                        @if (post.UpdatedAt != null)
                        {
                            <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: dodgerblue">
                                Updated at @(post.UpdatedAt?.ToLocalTime().ToString(dateFormat))
                            </RadzenText>
                        }
                        else
                        {
                            <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: dodgerblue">
                                Published at @(post.CreatedAt.ToLocalTime().ToString(dateFormat))
                            </RadzenText>
                        }
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
            <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;"/>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                <RadzenStack Gap="1em">
                    <RadzenStack></RadzenStack>
                    <RadzenText TextStyle="TextStyle.Body1" TextAlign="TextAlign.Left" Class="rz-mb-0">
                        <strong>@(post.TextContent)</strong>
                    </RadzenText>
                </RadzenStack>
            </RadzenStack>
        </RadzenCard>
        
        <RadzenStack Gap="1rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0.5rem">
                <RadzenButton Size="ButtonSize.Medium" Text="Go back to event" ButtonStyle="ButtonStyle.Primary"
                              Click="@(() => NavigationManager.NavigateTo($"events/{EventId}"))" />
                <RadzenButton Size="ButtonSize.Medium" Text="Report post" ButtonStyle="ButtonStyle.Primary"
                              Click="@(() => ReportPost(post))" />
            </RadzenStack>

            @if (IdentityService.IsAuthenticated && IsUserPostCreator(post))
            {
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0.5rem">
                    <RadzenButton Size="ButtonSize.Medium" Text="Update post" ButtonStyle="ButtonStyle.Secondary"
                                  Click="@(() => NavigationManager.NavigateTo($"events/{EventId}/posts/{PostId}/author/{AuthorName}/update"))" />
                    <RadzenButton Size="ButtonSize.Medium" Text="Delete post" ButtonStyle="ButtonStyle.Warning"
                                  Click="@(() => OpenDeletePostDialog(post.Id))" />
                </RadzenStack>
            }

            <RadzenCard Class="rz-my-12 rz-mx-auto" Style="max-width: 500px">
                <RadzenCard class="rz-background-color-success rz-shadow-0 rz-border-radius-0 rz-p-8">
                    <RadzenRow RowGap="0">
                        <RadzenColumn SizeSM="6">
                            <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Number of reactions</RadzenText>
                            <RadzenText TextStyle="TextStyle.H6" class="rz-color-on-primary-light"><b>@(reactionsSummary.NumberOfReactions)</b></RadzenText>
                            <RadzenText Text="Your reaction" TextStyle="TextStyle.Subtitle2" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0" />
                            <RadzenDropDown Name="your-reaction" Data="reactionTypes" Value="@(reactionsSummary.AuthUserReactionType)"
                                            ValueChanged="@((ReactionType? reactionType) => ReactionChanged(reactionType))"
                                            TextProperty="Key" ValueProperty="Value" />
                        </RadzenColumn>
                        <RadzenColumn SizeSM="6">
                            <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Dominant reaction</RadzenText>
                            <RadzenText TextStyle="TextStyle.H6" class="rz-color-on-primary-light"><b>@(ReactionTypeExtensions.GetReactionText(reactionsSummary.DominantReaction))</b></RadzenText>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenCard>
            </RadzenCard>
        </RadzenStack>
        
        <RadzenTabs Change="@OnChange" TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Server">
            <Tabs>
                <RadzenTabsItem Text="Comments">
                    <CommentsTab CommentContext="Post" ContextId="@PostId" StudentId="studentId" />
                </RadzenTabsItem>

                <RadzenTabsItem Text="Reactions">
                    @if (pageInitialized && !reactions.Any())
                    {
                    <h3>No reactions have been added by students yet.</h3>
                    }
                    <RadzenDataList PageSize="10" AllowPaging="true" Data="@reactions" TItem="ReactionDto">
                        <Template Context="reaction">
                            <RadzenCard Class="rz-border-radius-3">
                                <RadzenRow Gap="0.5rem">
                                    <RadzenColumn Size="6">
                                        <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: darkred"
                                                    Text=@(reaction.StudentFullName)/>
                                    </RadzenColumn>
                                    <RadzenColumn Size="6">
                                        <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: dodgerblue"
                                                    Text=@(ReactionTypeExtensions.GetReactionText(reaction.Type))/>
                                    </RadzenColumn>
                                </RadzenRow>
                            </RadzenCard>
                        </Template>
                    </RadzenDataList>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </RadzenStack>
}

@code {
    [Parameter]
    public string EventId { get; set; }
    [Parameter]
    public string PostId { get; set; }
    [Parameter]
    public string AuthorName { get; set; }
    
    private const string dateFormat = "dd/MM/yyyy HH:mm";

    private Guid studentId;
    private PostDto post = new();
    private bool pageInitialized = false;
    
    IEnumerable<ReactionDto> reactions;
    
    ReactionsSummaryDto reactionsSummary = new();
    List<KeyValuePair<string, ReactionType?>> reactionTypes = ReactionTypeExtensions.GenerateReactionPairs();
    
    protected override async Task OnInitializedAsync()
    {
        if (IdentityService.IsAuthenticated)
        {
            studentId = IdentityService.GetCurrentUserId();
        }
        post = await PostsService.GetPostAsync(new Guid(PostId));
        reactionsSummary = await ReactionsService.GetReactionsSummaryAsync(post.Id, ReactionContentType.Post);
        reactions = await ReactionsService.GetReactionsAsync(post.Id, ReactionContentType.Post);
        
        pageInitialized = true;
    }

    private bool IsUserPostCreator(PostDto postDto)
    {
        if (IdentityService.GetCurrentUserRole() != "organizer")
        {
            return false;
        }

        return studentId == postDto.OrganizerId;
    }
    
    private async void OnChange(int index)
    {
        if (!IdentityService.IsAuthenticated)
        {
            return;
        }
        
        switch (index)
        {
            case 1:
                reactions = await ReactionsService.GetReactionsAsync(post.Id, ReactionContentType.Post);
                break;
        }
        StateHasChanged();
    }
    
    private async Task OpenDeletePostDialog(Guid postId)
    {
        await DialogService.OpenAsync<DeletePostDialog>("Are you sure? This action cannot be undone!",
            new Dictionary<string, object>() { {"EventId", new Guid(EventId) }, { "PostId", new Guid(PostId) } },
            new DialogOptions()
            {
                Width = "500px", Height = "100px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }
    
    private async Task OpenReportPostDialog(CreateReportModel createReportModel)
    {
        await DialogService.OpenAsync<CreateReportDialog>("Report the post:",
            new Dictionary<string, object>() { { "CreateReportModel", createReportModel } },
            new DialogOptions()
            {
                Width = "700px", Height = "350px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }
    
    private async void ReactionChanged(ReactionType? reactionType)
    {
        if (reactionsSummary.AuthUserReactionId != null)
        {
            await ReactionsService.DeleteReactionAsync((Guid)reactionsSummary.AuthUserReactionId);
        }
        
        if (reactionType != null)
        {
            await ReactionsService.CreateReactionAsync(Guid.Empty, studentId, reactionType.ToString(),
                post.Id, ReactionContentType.Post.ToString());
        }

        reactionsSummary = await ReactionsService.GetReactionsSummaryAsync(post.Id, ReactionContentType.Post);
        StateHasChanged();
    }
    
    private async Task ReportPost(PostDto postDto)
    {
        var createReportModel = new CreateReportModel
        {
            IssuerId = studentId,
            TargetId = postDto.Id,
            TargetOwnerId = postDto.OrganizerId,
            ContextType = "Post"
        };

        await OpenReportPostDialog(createReportModel);
    }
}
