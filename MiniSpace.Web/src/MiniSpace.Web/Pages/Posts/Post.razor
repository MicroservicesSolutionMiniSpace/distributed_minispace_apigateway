@page "/events/{EventId}/posts/{PostId}/author/{AuthorName}"
@using MiniSpace.Web.DTO
@using MiniSpace.Web.Areas.Posts
@using MiniSpace.Web.Pages.Posts.Dialogs
@using MiniSpace.Web.Areas.Reactions
@using MiniSpace.Web.Pages.Reports.Dialogs
@using MiniSpace.Web.DTO.Enums
@using MiniSpace.Web.Models.Reports
@using MiniSpace.Web.Pages.Comments
@using Radzen
@using MudBlazor
@using AlignItems = Radzen.AlignItems
@using DialogOptions = Radzen.DialogOptions
@using DialogService = Radzen.DialogService
@using Orientation = Radzen.Orientation
@using System.Globalization
@using MiniSpace.Web.Areas.MediaFiles
@using MiniSpace.Web.Pages.Events.Dialogs
@inject DialogService DialogService
@inject IIdentityService IdentityService
@inject IPostsService PostsService
@inject IReactionsService ReactionsService
@inject IMediaFilesService MediaFilesService
@inject NavigationManager NavigationManager

@if (!pageInitialized)
{
    <h3 class="rz-p-12">Loading...</h3>
}

@if (pageInitialized)
{
    <RadzenStack class="rz-pt-6" Gap="1rem" Style="height: 100%">
        <div>
            <RadzenStack class="rz-pt-5 rz-mx-md-12" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Gap="1rem">
                <RadzenButton Size="ButtonSize.Medium" Text="Go back to event" ButtonStyle="ButtonStyle.Primary" class="separate-button"
                              Click="@(() => NavigationManager.NavigateTo($"events/{EventId}"))" />
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
                    @if(IdentityService.IsAuthenticated && !IsUserPostCreator(post))
                    {
                        <RadzenButton Size="ButtonSize.Medium" Text="Report event" class="report-button rz-px-0 rz-pb-4"
                                                              Click="@(() => ReportPost(post))" >
                            <RadzenIcon Icon="warning" Style="color: white; font-weight: 800;" class="rz-px-0"/>
                        </RadzenButton>
                    }
                    else if (IdentityService.IsAuthenticated && IsUserPostCreator(post))
                    {
                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0.5rem">
                            <RadzenButton Size="ButtonSize.Medium" Text="Update post" class="edit-button"
                                          Click="@(() => NavigationManager.NavigateTo($"events/{EventId}/posts/{PostId}/author/{AuthorName}/update"))">
                                <RadzenIcon Icon="edit" Style="color: white; font-weight: 800;"/>
                            </RadzenButton>
                            <RadzenButton Size="ButtonSize.Medium" Text="Delete post" class="delete-button"
                                                              Click="@(() => OpenDeletePostDialog(post.Id))" >
                                <RadzenIcon Icon="close" Style="color: white; font-weight: 800;"/>
                            </RadzenButton>
                        </RadzenStack>
                    }
                </RadzenStack>
            </RadzenStack>
        </div>
        <RadzenCard Class="rz-mb-12 rz-mx-md-12 rz-border-radius-3">
            <RadzenRow Gap="0.5rem">
                <RadzenColumn Size="12" class="rz-text-truncate">
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
                        <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-mb-0" Style="color: dodgerblue"
                                    Text=@($"{AuthorName}")/>
                        @if (post.UpdatedAt != null)
                        {
                            <RadzenText TextStyle="TextStyle.Subtitle1" Style="color: dodgerblue">
                                Updated at @(post.UpdatedAt?.ToLocalTime().ToString("f", CultureInfo.CurrentUICulture))
                            </RadzenText>
                        }
                        else
                        {
                            <RadzenText TextStyle="TextStyle.Subtitle1" Style="color: dodgerblue">
                                Published at @(post.CreatedAt.ToLocalTime().ToString("f", CultureInfo.CurrentUICulture))
                            </RadzenText>
                        }
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
            <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;"/>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" class="rz-pb-4">
                <RadzenStack Gap="1em">
                    <RadzenStack></RadzenStack>
                    <RadzenText TextStyle="TextStyle.Body1" TextAlign="TextAlign.Left" Class="rz-mb-0">
                        <strong>@(post.TextContent)</strong>
                    </RadzenText>
                </RadzenStack>
            </RadzenStack>
            @if (images.Any())
            {
                <RadzenStack class="rz-pb-5" Orientation="Orientation.Horizontal">
                    <MudCarousel @bind-SelectedIndex="@activeIndex" Class="mud-width-full" Style="height: 70vh;" ShowArrows="@arrows"
                                 ShowBullets="@bullets" EnableSwipeGesture="@enableSwipeGesture" AutoCycle="@autocycle" TData="object">
                        @foreach (var img in images)
                        {
                            <MudCarouselItem>
                                <div style="height: 100%; background-image: url('data:image/webp;base64,@img'); background-size: cover; background-position: center;"></div>
                            </MudCarouselItem>
                        }
                    </MudCarousel>
                </RadzenStack>
            }
            <RadzenRow RowGap="0">
                <RadzenColumn SizeSM="8">
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="0.5rem" Class="rz-p-6 rz-border-top">
                        <RadzenText TextStyle="TextStyle.H6" Class="rz-font-weight-bold rz-text-align-left">Number of reactions:  @reactionsSummary.NumberOfReactions</RadzenText>
                    </RadzenStack>
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="0.5rem" Class="rz-px-6 rz-pb-4 rz-border-top">
                        @if (reactionsSummary.NumberOfReactions > 0)
                        {
                            <RadzenText TextStyle="TextStyle.H6" Class="rz-font-weight-bold rz-text-align-left">Dominant reaction: </RadzenText>
                            <MudIcon Icon="@($"{reactionsSummary.DominantReaction.GetReactionIcon()}")" Style="color: #30445f;"/>
                        }
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn SizeSM="4">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="1rem" Class="rz-p-4 rz-border-top">
                        @if (IdentityService.IsAuthenticated && !IsUserPostCreator(post))
                        {
                            <RadzenButton Size="ButtonSize.Medium" class="separate-button"
                                          Click="@(() => OpenReactionsDialog())">
                                React
                                @if (reactionsSummary.AuthUserReactionType != null)
                                {
                                    <MudIcon Icon="@($"{reactionsSummary.AuthUserReactionType.GetReactionIcon()}")"/>
                                }
                            </RadzenButton>
                        }
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
        <CommentsTab CommentContext="Post" ContextId="@PostId" StudentId="studentId" />
    </RadzenStack>
}

<style>
    .separate-button {
        margin: 10px; 
        border: 1px solid #ccc; 
        border-radius: 5px; 
        background-color: #30445f !important;
        padding: 12px;
        color: #333; 
        transition: background-color 0.3s ease; 
    }
    
    .edit-button {
        background-color: darkgreen !important;
        border-radius: 5px;
    }
    
    .delete-button {
        background-color: darkred !important;
        border-radius: 5px;
    }
    
    .report-button {
        background-color: darkred !important;
        border-radius: 5px;
        height: 25px;
        width: 25px;
    }
</style>

@code {
    [Parameter]
    public string EventId { get; set; }
    [Parameter]
    public string PostId { get; set; }
    [Parameter]
    public string AuthorName { get; set; }
    
    private Guid studentId;
    private PostDto post = new();
    private bool pageInitialized = false;
    
    private int activeIndex = 0;
    private bool arrows = true;
    private bool bullets = true;
    private bool enableSwipeGesture = true;
    private bool autocycle = true;
    private MudBlazor.Transition transition = MudBlazor.Transition.Slide;
    
    IEnumerable<ReactionDto> reactions;
    IEnumerable<string> images = [];
    
    ReactionsSummaryDto reactionsSummary = new();
    List<KeyValuePair<string, ReactionType?>> reactionTypes = ReactionTypeExtensions.GenerateReactionPairs();
    
    protected override async Task OnInitializedAsync()
    {
        if (IdentityService.IsAuthenticated)
        {
            studentId = IdentityService.GetCurrentUserId();
        }
        post = await PostsService.GetPostAsync(new Guid(PostId));
        reactionsSummary = await ReactionsService.GetReactionsSummaryAsync(post.Id, ReactionContentType.Post);
        reactions = await ReactionsService.GetReactionsAsync(post.Id, ReactionContentType.Post);
        var tasks = new List<Task<FileDto>>();
        foreach (var mediaFile in post.MediaFiles)
        {
            tasks.Add(MediaFilesService.GetFileAsync(mediaFile));
        }
        
        StateHasChanged();
        images = (await Task.WhenAll(tasks)).Select(f => f.Base64Content).ToList();
        pageInitialized = true;
    }

    private bool IsUserPostCreator(PostDto postDto)
    {
        if (IdentityService.GetCurrentUserRole() != "organizer")
        {
            return false;
        }

        return studentId == postDto.OrganizerId;
    }
    
    private async void OnChange(int index)
    {
        if (!IdentityService.IsAuthenticated)
        {
            return;
        }
        
        switch (index)
        {
            case 1:
                reactions = await ReactionsService.GetReactionsAsync(post.Id, ReactionContentType.Post);
                break;
        }
        StateHasChanged();
    }
    
    private async Task OpenDeletePostDialog(Guid postId)
    {
        await DialogService.OpenAsync<DeletePostDialog>("Are you sure? This action cannot be undone!",
            new Dictionary<string, object>() { {"EventId", new Guid(EventId) }, { "PostId", new Guid(PostId) } },
            new DialogOptions()
            {
                Width = "500px", Height = "100px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }
    
    private async Task OpenReportPostDialog(CreateReportModel createReportModel)
    {
        await DialogService.OpenAsync<CreateReportDialog>("Report the post:",
            new Dictionary<string, object>() { { "CreateReportModel", createReportModel } },
            new DialogOptions()
            {
                Width = "700px", Height = "350px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }
    
    
    private async Task ReportPost(PostDto postDto)
    {
        var createReportModel = new CreateReportModel
        {
            IssuerId = studentId,
            TargetId = postDto.Id,
            TargetOwnerId = postDto.OrganizerId,
            ContextType = "Post"
        };

        await OpenReportPostDialog(createReportModel);
    }
    
    private async Task ReactionChanged(ReactionType? reactionType)
    {
        if (reactionsSummary.AuthUserReactionId != null)
        {
            await ReactionsService.DeleteReactionAsync((Guid)reactionsSummary.AuthUserReactionId);
        }

        if (reactionType != null)
        {
            await ReactionsService.CreateReactionAsync(Guid.Empty, studentId, reactionType.ToString(),
                post.Id, ReactionContentType.Post.ToString());
        }

        reactionsSummary = await ReactionsService.GetReactionsSummaryAsync(post.Id, ReactionContentType.Post);
        StateHasChanged();
    }
    
    private async Task OpenReactionsDialog()
    {
        var result = await DialogService.OpenAsync<ReactionDialog>("",
            new Dictionary<string, object>() { { "SelectedReaction", reactionsSummary.AuthUserReactionType } },
            new DialogOptions()
            {
                Width = "500px", Height = "50px", Resizable = false, Draggable = false, ShowClose = false,
                AutoFocusFirstElement = false
            });
        
        await ReactionChanged((ReactionType?)result);
        StateHasChanged(); 
    }
}
