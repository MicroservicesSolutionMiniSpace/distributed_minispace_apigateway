@using MiniSpace.Web.Areas.Events
@using MiniSpace.Web.Areas.Posts
@using Radzen
@using MiniSpace.Web.DTO
@using MiniSpace.Web.DTO.Types
@inject IEventsService EventsService
@inject IPostsService PostsService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<RadzenRow Size="12" AlignItems="AlignItems.Center">
    <RadzenColumn Size="6">
        <RadzenButton Size="ButtonSize.Medium" Text="Go to reported target" Style="width: 250px"
                      ButtonStyle="ButtonStyle.Primary" class="rz-border-radius-1"
                      Click="@(() => GoToReportedTargetPage(ReportDto))"/>
    </RadzenColumn>

    <RadzenColumn Size="6">
        <RadzenButton Size="ButtonSize.Medium" Text="Go to profile of target owner" Style="width: 250px"
                      ButtonStyle="ButtonStyle.Secondary" class="rz-border-radius-1"
                      Click="@(() => GoToTargetOwnerProfile(ReportDto))" />
    </RadzenColumn>
</RadzenRow>

@code {
    [Parameter]
    public ReportDto ReportDto { get; set; }
    [Parameter]
    public string ErrorMessage { get; set; }
    [Parameter]
    public bool ShowError { get; set; }
    
    private async void GoToReportedTargetPage(ReportDto reportDto)
    {
        await LocalStorage.SetItemAsync("reportDto", reportDto);
        switch (ReportDto.ContextType)
        {
            case ReportContextType.Event:
                NavigationManager.NavigateTo($"/events/{ReportDto.TargetId}");
                break;
            case ReportContextType.Post:
                var post = await PostsService.GetPostAsync(ReportDto.TargetId);
                if (post == null)
                {
                    ErrorMessage = "Reported post not found! Probably has been deleted!";
                    ShowError = true;
                    StateHasChanged();
                    return;
                }
                var ev = await EventsService.GetEventAsync(post.EventId);
                var authorName = post.OrganizerId == ev.Organizer.Id ? ev.Organizer.Name : "Author unknown";
                NavigationManager.NavigateTo($"/events/{ev.Id}/posts/{post.Id}/author/{authorName}");
                break;
            case ReportContextType.Comment:
                NavigationManager.NavigateTo($"/comments/{ReportDto.TargetId}/details");
                break;
            case ReportContextType.StudentProfile:
                NavigationManager.NavigateTo($"/student-details/{ReportDto.TargetId}");
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    private async void GoToTargetOwnerProfile(ReportDto reportDto)
    {
        await LocalStorage.SetItemAsync("reportDto", reportDto);
        NavigationManager.NavigateTo($"/student-details/{ReportDto.TargetOwnerId}");
    }

}