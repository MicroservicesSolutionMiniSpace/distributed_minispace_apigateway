@page "/reports"
@using MiniSpace.Web.Areas.Reports
@using MiniSpace.Web.DTO
@using MiniSpace.Web.DTO.Enums
@using MiniSpace.Web.DTO.States
@using MiniSpace.Web.DTO.Types
@using MiniSpace.Web.Models.Reports
@using MiniSpace.Web.Pages.Admin.Dialogs
@using MudBlazor
@using Radzen
@using Orientation = Radzen.Orientation
@using DialogOptions = Radzen.DialogOptions
@using DialogService = Radzen.DialogService
@inject DialogService DialogService
@inject IIdentityService IdentityService
@inject IReportsService ReportsService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h1>Your reports</h1>

@if (!pageInitialized)
{
    <h3 class="rz-p-12">Loading...</h3>
}
@if (pageInitialized && studentId != Guid.Empty)
{
    <h4 class="rz-p-8">To see details of a report, open details dialog by clicking "Show" button.</h4>
    
    <div class="rz-p-4 rz-text-align-center">
        <RadzenText>Results at page:</RadzenText>
        <RadzenDropDown Data="@pageSizeOptions" @bind-Value="@getStudentReportsModel.Results"
                        Change="@GetStudentReports" />
    </div>
    
    <RadzenStack Gap="1rem" Style="height: 100%">
        @if (totalElements == 0)
        {
            <h3>You haven't created any reports yet.</h3>
        }

        @if (pageInitialized && totalElements != 0)
        {
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
                <MudPagination Count="@totalPages" SelectedChanged="@SelectedPageChanged"
                               Selected="@getStudentReportsModel.Page"
                               Rectangular="true" ShowFirstButton="true" ShowLastButton="true"/>
            </RadzenStack>
        }
        
        <RadzenDataGrid AllowColumnResize="true" AllowAlternatingRows="false" Data="@reports" ColumnWidth="300px"
                        PagerHorizontalAlign="HorizontalAlign.Center">
            <Columns>
                <RadzenDataGridColumn Property="ContextType" Title="Context Type" Frozen="true" Width="60px" TextAlign="TextAlign.Center">
                    <Template Context="report">
                        <RadzenText>@(ReportContextTypeExtensions.GetReportContextTypeText(report.ContextType))</RadzenText>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="Category" Title="Category" Frozen="true" Width="100px" TextAlign="TextAlign.Center">
                    <Template Context="report">
                        <RadzenText>@(ReportCategoryExtensions.GetReportCategoryText(report.Category))</RadzenText>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="State" Title="State" Frozen="true" Width="60px" TextAlign="TextAlign.Center">
                    <Template Context="report">
                        @switch (report.State)
                        {
                            case ReportState.Submitted or ReportState.UnderReview:
                                <RadzenText Style="color: blue">@ReportStateExtensions.GetReportStateText(report.State)</RadzenText>
                                break;
                            case ReportState.Cancelled:
                                <RadzenText Style="color: darkorange">@ReportStateExtensions.GetReportStateText(report.State)</RadzenText>
                                break;
                            case ReportState.Resolved:
                                <RadzenText Style="color: green">@ReportStateExtensions.GetReportStateText(report.State)</RadzenText>
                                break;
                            case ReportState.Rejected:
                                <RadzenText Style="color: darkred">@ReportStateExtensions.GetReportStateText(report.State)</RadzenText>
                                break;
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Context="report" Title="Details" Width="60px" TextAlign="TextAlign.Center"
                                      Filterable="false" Sortable="false" Frozen="true">
                    <Template Context="report">
                        <RadzenButton Size="ButtonSize.Medium" Text="Show"
                                      ButtonStyle="ButtonStyle.Secondary"
                                      Click="@(() => OpenReportDetailsDialog(report))" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Context="report" Title="Options" Width="60px" TextAlign="TextAlign.Center"
                                      Filterable="false" Sortable="false" Frozen="true">
                    <Template Context="report">
                        @if (report.State is ReportState.Submitted or ReportState.UnderReview)
                        {
                            <RadzenButton Size="ButtonSize.Medium" Text="Cancel"
                                          ButtonStyle="ButtonStyle.Primary" Disabled="false"
                                          Click="@(() => OpenReportDetailsDialog(report))"/>
                        }
                        else
                        {
                            <RadzenButton Size="ButtonSize.Medium" Text="Cancel"
                                          ButtonStyle="ButtonStyle.Primary" Disabled="true"
                                          Click="@(() => OpenReportDetailsDialog(report))"/>   
                        }
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

        @if (pageInitialized && totalElements != 0)
        {
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
                <MudPagination Count="@totalPages" SelectedChanged="@SelectedPageChanged"
                               Selected="@getStudentReportsModel.Page"
                               Rectangular="true" ShowFirstButton="true" ShowLastButton="true"/>
            </RadzenStack>
        }
    </RadzenStack>
}

@code {
    private GetStudentReportsModel getStudentReportsModel = new();
    
    private Guid studentId;
    private bool pageInitialized = false;

    IEnumerable<int> pageSizeOptions = new int[] { 5, 10, 20, 40 };
    
    int totalPages = 0;
    int totalElements = 0;
    IEnumerable<ReportDto> reports; 
    
    protected override async Task OnInitializedAsync()
    {
        if (IdentityService.IsAuthenticated)
        {
            studentId = IdentityService.GetCurrentUserId();
            
            var getReportsCriteria = await LocalStorage.GetItemAsync<GetStudentReportsModel>("getReportsCriteria");
            if (getReportsCriteria != null)
            {
                getStudentReportsModel = getReportsCriteria;
            }

            await GetStudentReports();
            pageInitialized = true;
            
            var reportDto = await LocalStorage.GetItemAsync<ReportDto>("reportDto");
            if (reportDto != null)
            {
                await LocalStorage.RemoveItemAsync("reportDto");
                await OpenReportDetailsDialog(reportDto);
            }
        }
    }

    private async Task GetStudentReports()
    {
        var response = await ReportsService.GetStudentReportsAsync(studentId,
            getStudentReportsModel.Page, getStudentReportsModel.Results);
        
        if (response != null)
        {
            totalPages = response.TotalPages;
            totalElements = response.TotalElements;
            reports = response.Content;
        }
        else
        {
            totalPages = 0;
            totalElements = 0;
            reports = new List<ReportDto>();
        }
        
        await LocalStorage.SetItemAsync("getReportsCriteria", getStudentReportsModel);
    }
    
    private async void SelectedPageChanged(int pageNumber)
    {
        getStudentReportsModel.Page = pageNumber;
        
        var response = await ReportsService.GetStudentReportsAsync(studentId,
            getStudentReportsModel.Page, getStudentReportsModel.Results);
        reports = response.Content;
        
        await LocalStorage.SetItemAsync("getReportsCriteria", getStudentReportsModel);
        StateHasChanged();
    }
    
    private async Task OpenReportDetailsDialog(ReportDto reportDto)
    {
        await DialogService.OpenAsync<ManageReportDialog>("Details of the report:",
            new Dictionary<string, object>() { { "ReportDto", reportDto } },
            new DialogOptions()
            {
                Width = "700px", Height = "600px", Resizable = true, Draggable = true,
                AutoFocusFirstElement = false
            });
    }
}
