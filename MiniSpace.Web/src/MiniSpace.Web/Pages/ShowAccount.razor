@page "/account"
@using MiniSpace.Web.Areas.Students
@using MiniSpace.Web.Components
@using MiniSpace.Web.DTO
@using Radzen
@inject IIdentityService IdentityService
@inject IStudentsService StudentsService
@inject NavigationManager NavigationManager

<h1>Data of your account:</h1>

@if (studentDto.Id != Guid.Empty)
{
    <RadzenStack Gap="1rem">
        <RadzenLabelWithTextBoxes Id="fullname" LabelText="Fullname:" Value1="@studentDto.FirstName"
                                  Value2="@studentDto.LastName" Disabled="true" />

        <RadzenLabelWithTextBox Id="email" LabelText="Email:"
                                Value="@studentDto.Email" Disabled="true" />

        <RadzenLabelWithTextBox Id="description" LabelText="Description:"
                                Value="@studentDto.Description" Disabled=@editionDisabled />

        <RadzenLabelWithTextBox Id="state" LabelText="State:"
                                Value="@studentDto.State" Disabled="true" />

        <RadzenLabelWithNumeric Id="number-of-friends" LabelText="Number of friends:"
                                Value="@studentDto.NumberOfFriends" Disabled="true" />

        <RadzenLabelWithDatePicker Id="date-of-birth" LabelText="Date of birth:"
                                   Value="@studentDto.DateOfBirth" Disabled="true" />

        <RadzenLabelWithDatePicker Id="created-at" LabelText="Created at:"
                                   Value="@studentDto.CreatedAt" Disabled="true" />

        <RadzenLabelWithCheckbox Id="email-notifications" LabelText="Email notifications:"
                                 Value="@studentDto.EmailNotifications" Disabled=@editionDisabled />

        @if (studentDto.State == "incomplete")
        {
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn Size="12" SizeMD="12">
                    <RadzenButton Size="ButtonSize.Large" Text="Complete registration"
                                  Click="@(() => NavigationManager.NavigateTo("/signup/complete"))" />
                </RadzenColumn>
            </RadzenRow>
        }
        else
        {
            if (editionDisabled)
            {
                <RadzenRow AlignItems="AlignItems.Center">
                    <RadzenColumn Size="12" SizeMD="12">
                        <RadzenButton Size="ButtonSize.Large" Text="Update account"
                                      Click=@EnableEdition />
                    </RadzenColumn>
                </RadzenRow>   
            }
            else
            {
                <RadzenRow AlignItems="AlignItems.Center">
                    <RadzenColumn Size="12" SizeMD="12">
                        <RadzenButton Size="ButtonSize.Large" Text="Save account"
                                      Click=@HandleUpdateStudent />
                    </RadzenColumn>
                </RadzenRow>   
            }
        }
    </RadzenStack>
}
else
{
    <p>Loading...</p>
}

@code {
    private StudentDto studentDto = new();
    private bool editionDisabled = true;
    
    protected override async Task OnInitializedAsync()
    {
        if (IdentityService.IsAuthenticated)
        {
            var userDto = await IdentityService.GetAccountAsync();
            studentDto = await StudentsService.GetStudentAsync(userDto.Id);
        }
    }

    void EnableEdition()
    {
        editionDisabled = false;
        StateHasChanged();
    }

    private async Task HandleUpdateStudent()
    {
        editionDisabled = true;
        await StudentsService.UpdateStudentAsync(studentDto.Id, studentDto.ProfileImage,
            studentDto.Description, studentDto.EmailNotifications);
        StateHasChanged();
    }
}
