@page "/signin"
@using MiniSpace.Web.Models.Identity
@using MiniSpace.Web.Areas.Identity
@using MiniSpace.Web.Areas.Students
@inject IIdentityService IdentityService
@inject IStudentsService StudentsService
@inject NavigationManager NavigationManager

<h3>Login</h3>

@if (showError)
{
    <div class="alert alert-danger">
        Failed to sign in. Please check your credentials and try again.
    </div>
}

<EditForm Model="@signInModel" OnValidSubmit="HandleSignIn">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="signInModel.Email" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" class="form-control" @bind-Value="signInModel.Password" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private SignInModel signInModel = new SignInModel();
    private bool showError = false;

    private async Task HandleSignIn()
    {
        var jwtDto = await IdentityService.SignInAsync(signInModel.Email, signInModel.Password);
        if (jwtDto != null && !string.IsNullOrEmpty(jwtDto.AccessToken))
        {
            var userDto = await IdentityService.GetAccountAsync();
            var studentDto = await StudentsService.GetStudentAsync(userDto.Id);

            NavigationManager.NavigateTo(studentDto.State == "incomplete" ? "/signup/complete" : "/account");
        }
        else
        {
            showError = true;
            StateHasChanged(); // Force the component to re-render
        }
    }
}
