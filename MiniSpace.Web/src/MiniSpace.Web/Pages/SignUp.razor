@page "/signup"
@using MiniSpace.Web.Areas.Identity
@inject IIdentityService IdentityService

<h3>Sign Up</h3>

<EditForm Model="@signUpModel" OnValidSubmit="HandleSignUp">
    <DataAnnotationsValidator />
    <ValidationSummary />
@* 
    <div class="form-group">
        <label for="studentId">Student ID:</label>
        <InputNumber id="studentId" class="form-control" @bind-Value="signUpModel.StudentId" />
    </div> *@

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label for="name">Name:</label>
                <InputText type="text" id="name" class="form-control" @bind-Value="signUpModel.Name" />
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label for="surname">Surname:</label>
                <InputText type="text" id="surname" class="form-control" @bind-Value="signUpModel.Surname" />
            </div>
        </div>
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="signUpModel.Password" />
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" type="email" class="form-control" @bind-Value="signUpModel.Email" />
    </div>

    <button type="submit" class="btn btn-primary">Sign Up</button>
</EditForm>


@code {
    private SignUpModel signUpModel = new SignUpModel();

    private async Task HandleSignUp()
    {
        var organizerPermission = new List<string> { "organize_events" };
        await IdentityService.SignUpAsync(signUpModel.Email, signUpModel.Password, "user", organizerPermission);
        // Handle the post-sign-up logic, such as redirection or displaying a success message
    }
}