@using Radzen
@using MiniSpace.Web.Areas.Students
@inherits LayoutComponentBase
@inject IIdentityService IdentityService
@inject IStudentsService StudentsService
@inject NavigationManager NavigationManager
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@using Blazored.LocalStorage
@inject ILocalStorageService localStorage
@inject AuthenticationStateProvider AuthenticationStateProvider

<RadzenLayout style="width: 100%; min-width: 100vw; min-height: 100vh; text-align: center;" id="radzen-layout">
    <header>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" Style="width: 100%;">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                @if (IsUserAuthenticated()  && StudentsService.StudentDto.State == "valid")
                {
                    <RadzenSidebarToggle Click="@(() => _sidebarExpanded = !_sidebarExpanded)" />
                }
                <div class="logo-container" @onclick="NavigateToHome">
                    <RadzenLabel Text="MiniSpace" />
                </div>
            </RadzenStack>
            
            <RadzenMenu Class="rz-menu">
                <div class="rz-menu-stack">
                    <RadzenMenuItem Text="Home" Class="rz-menu-item" Click="@(() => ScrollToSection("home"))" />
                    <RadzenMenuItem Text="About App" Class="rz-menu-item" Click="@(() => ScrollToSection("about"))" />
                    <RadzenMenuItem Text="Connect" Class="rz-menu-item" Click="@(() => ScrollToSection("connect"))" />
                    @if (IsUserAuthenticated())
                    {
                        <RadzenMenuItem Text="Sign Out" Class="rz-menu-item" Click=@SignOut Icon="exit_to_app"/>
                    }
                    else
                    {
                        <RadzenMenuItem Text="Sign In" Class="rz-menu-item" Path="signin" Icon="exit_to_app"/>
                        <RadzenMenuItem Text="Sign Up" Class="rz-menu-item" Path="signup" Icon="assignment_ind"/>
                    }
                </div>
            </RadzenMenu>
        </RadzenStack>
    </header>
    
    <div style="display: flex; flex: 1; flex-direction: row;">
        @if (IsUserAuthenticated() && StudentsService.StudentDto.State == "valid")
        {
            <RadzenSidebar @bind-Expanded="@_sidebarExpanded">
                <RadzenPanelMenu>
                    <RadzenPanelMenuItem Text="Home" Icon="home"
                                         Click="@(() => NavigationManager.NavigateTo(""))" />
                    <RadzenPanelMenuItem Text="Account" Icon="account_box"
                                         Click="@(() => NavigationManager.NavigateTo("account"))" />
                    <RadzenPanelMenuItem Text="Events" Icon="event"
                                         Click="@(() => NavigationManager.NavigateTo("events"))" />
                    <RadzenPanelMenuItem Text="Friends" Icon="group"
                             Click="@(() => NavigationManager.NavigateTo("friends"))" />
                </RadzenPanelMenu>
            </RadzenSidebar>
        }
        
        <RadzenBody class="radzen-body">
            <div class="">
                @Body
            </div>
        </RadzenBody>    
    </div>
    
    <CustomRadzenFooter />
</RadzenLayout>

<RadzenDialog />

@code{
    bool _sidebarExpanded = true;
    protected override async Task OnInitializedAsync()
    {
        // Subscribe to authentication state changes
        AuthenticationStateProvider.AuthenticationStateChanged += HandleAuthenticationStateChanged;
    }

    private async void HandleAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            // Check if the user is valid and then expand the sidebar
            @* var studentState = await StudentsService.GetStudentStateAsync(); // Assume this method checks the student state
            _sidebarExpanded = studentState == "valid"; *@
        }
        else
        {
            _sidebarExpanded = true;
        }

        StateHasChanged(); // Refresh UI
    }

    public void Dispose() // Implement IDisposable to unsubscribe
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= HandleAuthenticationStateChanged;
    }

    public bool IsUserAuthenticated() => IdentityService.IsAuthenticated;
    
    @* void SignOut()
    {
        IdentityService.Logout();
        StudentsService.ClearStudentDto();
        NavigationManager.NavigateTo("");
    } *@

    async Task SignOut()
    {
        await localStorage.RemoveItemAsync("accessToken");
        await localStorage.RemoveItemAsync("jwtDto");
        NavigationManager.NavigateTo("signin", forceLoad: true);
    }

    
    async Task ScrollToSection(string sectionId)
    {
        if (NavigationManager.Uri != NavigationManager.BaseUri)
        {
            NavigationManager.NavigateTo("/", true);
        }
        while (NavigationManager.Uri != NavigationManager.BaseUri)
        {
            await Task.Delay(100); // Check every 100ms
        }
        await JSRuntime.InvokeVoidAsync("scrollToSection", sectionId);
    }

    void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }
}
