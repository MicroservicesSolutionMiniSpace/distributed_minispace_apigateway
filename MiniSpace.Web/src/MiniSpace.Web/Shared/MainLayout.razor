@using Radzen
@using MiniSpace.Web.Areas.Students
@inherits LayoutComponentBase
@inject IIdentityService IdentityService
@inject IStudentsService StudentsService
@inject NavigationManager NavigationManager
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@using Blazored.LocalStorage
@inject ILocalStorageService localStorage
@inject AuthenticationStateProvider authenticationStateProvider

<RadzenLayout style="width: 100%; min-height: 100vh; text-align: center;" id="radzen-layout">
    <header>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" Style="width: 100%;">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                @*
                    TODO: do not forget about the code snippet chaned ❕❕❕
                        @if (IsUserAuthenticated && StudentsService.StudentDto.State == "valid")
                *@
                @* @if (_isUserAuthenticated )
                {
                    <RadzenSidebarToggle Click="@(() => _sidebarExpanded = !_sidebarExpanded)" />
                } *@
                <div class="logo-container" @onclick="NavigateToHome">
                    <RadzenLabel Text="MiniSpace" />
                </div>
            </RadzenStack>

            <RadzenMenu Class="rz-menu">
                <div class="rz-menu-stack">
                  
                    @if (_isUserAuthenticated)
                    {
                        
                       <div class=" rz-text-align-center" style="">
                            <RadzenProfileMenu>
                                <Template>
                                    @* <RadzenGravatar Email="@_userEmail" /> *@
                                     <div style="padding: 10px; font-size: 16px;">
                                        Hello, @_userName
                                    </div>
                                </Template>
                                 <ChildContent>
                                    <RadzenProfileMenuItem Text="Account settings" Path="/account" Icon="settings"></RadzenProfileMenuItem>
                                    <RadzenProfileMenuItem Text="Notifications" Path="/notifications/all" Icon="notifications"></RadzenProfileMenuItem>
                                    @* <RadzenProfileMenuItem Text="Sign out" Click="@SignOut" Icon="exit_to_app"></RadzenProfileMenuItem> *@
                                </ChildContent>
                            </RadzenProfileMenu>
                        </div>
                        <RadzenMenuItem Text="Sign Out" Class="rz-menu-item" Click=@SignOut Icon="exit_to_app"/>
                    }
                    else
                    {
                        <RadzenMenuItem Text="Home" Class="rz-menu-item" Click="@(() => ScrollToSection("home"))" />
                        <RadzenMenuItem Text="About App" Class="rz-menu-item" Click="@(() => ScrollToSection("about"))" />
                        <RadzenMenuItem Text="Connect" Class="rz-menu-item" Click="@(() => ScrollToSection("connect"))" />
                        <RadzenMenuItem Text="Sign In" Class="rz-menu-item" Path="signin" Icon="exit_to_app"/>
                        <RadzenMenuItem Text="Sign Up" Class="rz-menu-item" Path="signup" Icon="assignment_ind"/>
                    }
                </div>
            </RadzenMenu>

        </RadzenStack>
    </header>

    @if (_isUserAuthenticated && _studentState == "valid")
    {

        <header class="header-services">
         <RadzenSidebarToggle Click="@(() => _sidebarExpanded = !_sidebarExpanded)" />
        </header>

    }


    <div style="display: flex; flex: 1; flex-direction: row;" class="main-content-container">
        @*
            TODO: do not forget about the code snippet chaned ❕❕❕
                    @if (IsUserAuthenticated && StudentsService.StudentDto.State == "valid")
        *@
        @if (_isUserAuthenticated && _studentState == "valid")
        {
            <RadzenSidebar Responsive="false" style="transition:  0.5s; width: max-content;" Class="mobile-sidebar">
                <RadzenPanelMenu DisplayStyle="@(_sidebarExpanded ? MenuItemDisplayStyle.IconAndText : MenuItemDisplayStyle.Icon)"  style="transition:  0.5s;">
                    <RadzenPanelMenuItem Text="Home" Icon="home"
                                         Click="@(() => NavigationManager.NavigateTo("home"))" />
                    
                    <RadzenPanelMenuItem Text="Account" Icon="account_box"
                                         Click="@(() => NavigationManager.NavigateTo("account"))" />
                    
                    <RadzenPanelMenuItem Text="Events" Icon="event">
                        <RadzenPanelMenuItem Text="Follow" Icon="bookmark"
                                             Click="@(() => NavigationManager.NavigateTo("events/follow"))"/>
                        <RadzenPanelMenuItem Text="Search" Icon="find_in_page"
                                             Click="@(() => NavigationManager.NavigateTo("events/search"))"/>
                        @if (IdentityService.GetCurrentUserRole() == "organizer")
                        {
                            <RadzenPanelMenuItem Text="Organize" Icon="assignment"
                                                 Click="@(() => NavigationManager.NavigateTo("events/organize"))"/>
                        }
                    </RadzenPanelMenuItem>
                    
                    <RadzenPanelMenuItem Text="Friends" Icon="group">
                        <RadzenPanelMenuItem Text="Search" Icon="search" Click="@(() => NavigationManager.NavigateTo("friends/search"))" />
                        <RadzenPanelMenuItem Text="Friends" Icon="group" Click="@(() => NavigationManager.NavigateTo("friends"))" />
                        <RadzenPanelMenuItem Text="Requests" Icon="mail_outline" Click="@(() => NavigationManager.NavigateTo("friends/requests"))" />
                        <RadzenPanelMenuItem Text="Sent Requests" Icon="compare_arrows" Click="@(() => NavigationManager.NavigateTo("friends/sent-requests"))" />
                    </RadzenPanelMenuItem>

                    <RadzenPanelMenuItem Text="Notifications" Icon="send">
                        <RadzenPanelMenuItem Text="All" Icon="accessibility" Click="@(() => NavigationManager.NavigateTo("notifications/all"))" />
                        <RadzenPanelMenuItem Text="New" Icon="send" Click="@(() => NavigationManager.NavigateTo("notifications/new"))" />
                        <RadzenPanelMenuItem Text="History" Icon="history" Click="@(() => NavigationManager.NavigateTo("notifications/history"))" />
                    </RadzenPanelMenuItem>

                    <RadzenPanelMenuItem Text="Reports" Icon="assignment_late" Click="@(() => NavigationManager.NavigateTo("reports"))" />
                    
                    @if (IdentityService.GetCurrentUserRole() == "admin")
                    {
                        <RadzenPanelMenuItem Text="Admin" Icon="build">
                            <RadzenPanelMenuItem Text="Students" Icon="account_circle"
                                                 Click="@(() => NavigationManager.NavigateTo("admin/students"))" />
                            <RadzenPanelMenuItem Text="Organizations" Icon="assignment"
                                                 Click="@(() => NavigationManager.NavigateTo("admin/organizations"))" />
                            <RadzenPanelMenuItem Text="Reports" Icon="assignment_late"
                                                 Click="@(() => NavigationManager.NavigateTo("admin/reports"))" />
                        </RadzenPanelMenuItem>
                    }
                </RadzenPanelMenu>
            </RadzenSidebar>
        }

           <div style="flex: 1; display: flex; margin-left: @(_isUserAuthenticated ? "200px" : "0px"); background: linear-gradient(to bottom, #f5f7fa, #c3cfe2)">
                <div style="flex: 1; display: flex; justify-content: @(_isUserAuthenticated ? " center" : "center");">
                    <div class="main-content" style="flex-grow: 1; max-width: @(_isUserAuthenticated ? " 960px " : "1200px");">
                        <div style="flex: 1; display: flex; justify-content: @(_isUserAuthenticated ? "flex-end" : "center");">
                            <div class="main-content" style="flex-grow: 1; max-width: @(_isUserAuthenticated ? " 960px " : "1200px");">
                                <DynamicContentComponent Route="@currentRoute" />
                            </div>
                        </div>

                        @* <RadzenBody> *@
                            <div style="@(_isUserAuthenticated ? "background-color: #fff; box-shadow: 0 4px 8px rgba(0,0,0,0.1), 0 6px 20px rgba(0,0,0,0.15); padding: 20px; border-radius: 5px; margin: 20px;" : " ")">
                                @Body
                            </div>


                        @* </RadzenBody> *@
                    </div>
                </div>

                @if(_isUserAuthenticated && _studentState == "valid")
                {
                    <div style="width: 300px; align-self: stretch; padding: 10px;" class="notification-component">
                        <NotificationComponent />
                    </div>
                }
            </div>
            

    </div>

    <CustomRadzenFooter />
</RadzenLayout>

<RadzenDialog />

@code{
    bool _sidebarExpanded = true;
    bool isLoading = true;
    private bool firstRender = true;
    
    private bool _isUserAuthenticated;
    private string _userName;
    private string _userSurname;
    private string _userEmail;
    
    private Guid _studentId;
    private string _studentState;
    
    private string currentRoute;

     protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            _isUserAuthenticated = await IdentityService.CheckIfUserIsAuthenticated();
            if (_isUserAuthenticated) {
                var userDto = await IdentityService.GetAccountAsync(IdentityService.JwtDto); 
                if (userDto != null) {
                    _userName = userDto.Name;
                    _userEmail = userDto.Email; 
                    @* _userSurname = userDto.LastName; *@
                    _studentId = userDto.Id;
                    
                    var studentDto = await StudentsService.GetStudentAsync(_studentId);
                    if (studentDto != null)
                    {
                        _studentState = studentDto.State;
                    }
                }
            }
            StateHasChanged();
        }
    }
    
    public async Task<bool> CheckAuthentication()
    {
        _isUserAuthenticated = await IdentityService.CheckIfUserIsAuthenticated();
        @* Console.WriteLine($"IsUserAuthenticated: {_isUserAuthenticated}"); *@
        return _isUserAuthenticated;
    }

    public bool IsUserAuthenticated => _isUserAuthenticated;
    async Task SignOut()
    {
        @* Console.WriteLine("Signing out..."); *@
        await localStorage.RemoveItemAsync("reportDto");
        await localStorage.RemoveItemAsync("searchReportsCriteria");
        await localStorage.RemoveItemAsync("studentReportDto");
        await localStorage.RemoveItemAsync("getReportsCriteria");
        await localStorage.RemoveItemAsync("searchEventsCriteria");
        await localStorage.RemoveItemAsync("searchOrganizerEventsCriteria");
        
        await localStorage.RemoveItemAsync("accessToken");
        await localStorage.RemoveItemAsync("jwtDto");

        await localStorage.ClearAsync();

        StateHasChanged();

        NavigationManager.NavigateTo("signin", forceLoad: true);
    }

    async Task ScrollToSection(string sectionId)
    {
        if (NavigationManager.Uri != NavigationManager.BaseUri)
        {
            NavigationManager.NavigateTo("/", true);
        }
        while (NavigationManager.Uri != NavigationManager.BaseUri)
        {
            await Task.Delay(100); // Check every 100ms
        }
        await JSRuntime.InvokeVoidAsync("scrollToSection", sectionId);
    }

    void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }

}
